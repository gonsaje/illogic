{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/standardized-audio-context/build/es2019/globals.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js","webpack:///./node_modules/standardized-audio-context/build/es2019/constants.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/invalid-state-error.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/get-audio-node-connections.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/not-supported-error.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/intercept-connections.js","webpack:///./node_modules/standardized-audio-context/build/es2019/guards/native-audio-node-faker.js","webpack:///./node_modules/standardized-audio-context/build/es2019/module.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/test-promise-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/index-size-error.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/insert-element-in-set.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-active.js","webpack:///./node_modules/automation-events/build/es5/bundle.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/is-part-of-a-cycle.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/get-event-listeners-of-audio-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive.js","webpack:///./node_modules/standardized-audio-context/build/es2019/guards/audio-node-output-connection.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/is-active-audio-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/guards/audio-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/guards/native-audio-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/get-audio-param-connections.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-param.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/wrap-event-listener.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-get-channel-data-method.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/connect-native-audio-node-to-native-audio-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/disconnect-native-audio-node-from-native-audio-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/copy-from-channel.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/create-nested-arrays.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/invalid-access-error.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/overwrite-accessors.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/is-valid-latency-hint.js","webpack:///./node_modules/standardized-audio-context/build/es2019/read-only-map.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/copy-to-channel.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/filter-buffer.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/compute-buffer-size.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/unknown-error.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/is-dc-curve.js","webpack:///./node_modules/standardized-audio-context/build/es2019/interfaces/index.js","webpack:///./node_modules/standardized-audio-context/build/es2019/types/index.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/abort-error.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/add-audio-node-connections.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/add-audio-param-connections.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/add-silent-connection.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/add-unrendered-audio-worklet-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/analyser-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/analyser-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-source-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-source-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/audio-context-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/audio-destination-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/audio-destination-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/audio-listener-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/audio-param-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/audio-param-renderer.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/audio-worklet-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/base-audio-context-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/biquad-filter-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/biquad-filter-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/cache-test-result.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/channel-merger-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/channel-merger-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/channel-splitter-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/channel-splitter-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/connect-audio-param.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/connect-multiple-outputs.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/connected-native-audio-buffer-source-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/constant-source-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/constant-source-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/convert-number-to-unsigned-long.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/convolver-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/convolver-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/create-native-offline-audio-context.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/data-clone-error.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/decrement-cycle-counter.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/delay-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/delay-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/delete-unrendered-audio-worklet-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/disconnect-multiple-outputs.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/dynamics-compressor-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/dynamics-compressor-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/encoding-error.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/evaluate-source.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/event-target-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/expose-current-frame-and-current-time.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/fetch-source.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/gain-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/gain-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/get-audio-node-renderer.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/get-audio-param-renderer.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/get-backup-native-context.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/get-native-context.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/get-unrendered-audio-worklet-nodes.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/iir-filter-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/increment-cycle-counter-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-context.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-param.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/is-any-offline-audio-context.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-context.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-param.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/is-native-context.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/is-native-offline-audio-context.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/is-secure-context.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/is-supported-promise.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/media-element-audio-source-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/media-stream-audio-destination-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/media-stream-audio-source-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/media-stream-track-audio-source-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/minimal-audio-context-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/minimal-base-audio-context-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/minimal-offline-audio-context-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/monitor-connections.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-audio-buffer-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-audio-context-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-audio-destination-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-audio-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-biquad-filter-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-channel-merger-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-constant-source-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-constant-source-node-faker-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-convolver-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-convolver-node-faker-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-delay-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-dynamics-compressor-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-gain-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-iir-filter-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-iir-filter-node-faker-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-media-element-audio-source-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-audio-destination-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-audio-source-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-track-audio-source-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-offline-audio-context-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-oscillator-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-panner-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-panner-node-faker-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-periodic-wave-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-script-processor-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-stereo-panner-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-stereo-panner-node-faker-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-wave-shaper-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-wave-shaper-node-faker-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/offline-audio-context-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/oscillator-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/oscillator-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/panner-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/panner-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/periodic-wave-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/render-automation.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/render-inputs-of-audio-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/render-inputs-of-audio-param.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/render-native-offline-audio-context.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/start-rendering.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/stereo-panner-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/stereo-panner-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-constructor-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-copy-channel-methods-subarray-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-source-node-start-method-consecutive-calls-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-source-node-start-method-duration-parameter-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-source-node-start-method-offset-clamping-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-source-node-stop-method-nullified-buffer-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-close-method-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-decode-audio-data-method-type-error-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-options-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-audio-node-connect-method-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-audio-scheduled-source-node-start-method-negative-parameters-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-audio-scheduled-source-node-stop-method-consecutive-calls-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-audio-scheduled-source-node-stop-method-negative-parameters-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-audio-worklet-processor-no-outputs-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-channel-merger-node-channel-count-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-constant-source-node-accurate-scheduling-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-convolver-node-buffer-reassignability-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-is-secure-context-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-offline-audio-context-current-time-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-stereo-panner-node-default-value-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/wave-shaper-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/wave-shaper-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/window.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-copy-channel-methods.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-scheduled-source-node-stop-method-consecutive-calls.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/wrap-channel-merger-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/test-transferables-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-offset-clamping.js","webpack:///./node_modules/standardized-audio-context/build/es2019/guards/audio-worklet-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/delete-event-listeners-of-audio-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/is-passive-audio-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/pick-element-from-set.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive-when-necessary.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/test-audio-node-disconnect-method-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/visit-each-audio-node-once.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-node-disconnect-method.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/audio-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/clone-audio-worklet-node-options.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/create-audio-worklet-processor-promise.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-faker-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/create-audio-worklet-processor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-audio-buffer-source-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-duration-parameter.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/is-constructible.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/split-import-statements.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/add-audio-worklet-module.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/test-analyser-node-get-float-time-domain-data-method-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-analyser-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/wrap-analyser-node-get-float-time-domain-data-method.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/wrap-iir-filter-node-get-frequency-response-method.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/iir-filter-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/guards/delay-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/detect-cycles.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/decode-audio-data.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/detach-array-buffer.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/test-clonability-of-audio-worklet-node-options.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/audio-worklet-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/get-audio-worklet-processor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/wrap-channel-splitter-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-channel-splitter-node-factory.js","webpack:///./node_modules/@babel/runtime/helpers/slicedToArray.js","webpack:///./node_modules/@babel/runtime/helpers/arrayWithHoles.js","webpack:///./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js","webpack:///./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","webpack:///./node_modules/@babel/runtime/helpers/arrayLikeToArray.js","webpack:///./node_modules/@babel/runtime/helpers/nonIterableRest.js","webpack:///./node_modules/@babel/runtime/helpers/classCallCheck.js","webpack:///./node_modules/@babel/runtime/helpers/createClass.js","webpack:///./node_modules/tone/build/esm/core/util/Debug.js","webpack:///./node_modules/tone/build/esm/core/util/TypeCheck.js","webpack:///./node_modules/tone/build/esm/core/context/AudioContext.js","webpack:///./node_modules/tslib/tslib.es6.js","webpack:///./node_modules/tone/build/esm/core/clock/Ticker.js","webpack:///./node_modules/tone/build/esm/core/util/AdvancedTypeCheck.js","webpack:///./node_modules/tone/build/esm/core/util/Defaults.js","webpack:///./node_modules/tone/build/esm/core/Tone.js","webpack:///./node_modules/tone/build/esm/version.js","webpack:///./node_modules/tone/build/esm/core/util/Math.js","webpack:///./node_modules/tone/build/esm/core/util/Timeline.js","webpack:///./node_modules/tone/build/esm/core/context/ContextInitialization.js","webpack:///./node_modules/tone/build/esm/core/util/Emitter.js","webpack:///./node_modules/tone/build/esm/core/context/BaseContext.js","webpack:///./node_modules/tone/build/esm/core/context/Context.js","webpack:///./node_modules/tone/build/esm/core/util/Interface.js","webpack:///./node_modules/tone/build/esm/core/context/ToneAudioBuffer.js","webpack:///./node_modules/tone/build/esm/core/context/OfflineContext.js","webpack:///./node_modules/tone/build/esm/core/Global.js","webpack:///./node_modules/tone/build/esm/core/context/DummyContext.js","webpack:///./node_modules/tone/build/esm/core/type/Conversions.js","webpack:///./node_modules/tone/build/esm/core/type/TimeBase.js","webpack:///./node_modules/tone/build/esm/core/type/Time.js","webpack:///./node_modules/tone/build/esm/core/type/Frequency.js","webpack:///./node_modules/tone/build/esm/core/type/TransportTime.js","webpack:///./node_modules/tone/build/esm/core/context/ToneWithContext.js","webpack:///./node_modules/tone/build/esm/core/util/StateTimeline.js","webpack:///./node_modules/tone/build/esm/core/context/Param.js","webpack:///./node_modules/tone/build/esm/core/context/ToneAudioNode.js","webpack:///./node_modules/tone/build/esm/core/context/Gain.js","webpack:///./node_modules/tone/build/esm/source/OneShotSource.js","webpack:///./node_modules/tone/build/esm/signal/ToneConstantSource.js","webpack:///./node_modules/tone/build/esm/signal/Signal.js","webpack:///./node_modules/tone/build/esm/core/clock/TickParam.js","webpack:///./node_modules/tone/build/esm/core/clock/TickSignal.js","webpack:///./node_modules/tone/build/esm/core/clock/TickSource.js","webpack:///./node_modules/tone/build/esm/core/clock/Clock.js","webpack:///./node_modules/tone/build/esm/core/util/TimelineValue.js","webpack:///./node_modules/tone/build/esm/core/type/Ticks.js","webpack:///./node_modules/tone/build/esm/core/util/IntervalTimeline.js","webpack:///./node_modules/tone/build/esm/core/clock/TransportEvent.js","webpack:///./node_modules/tone/build/esm/core/clock/TransportRepeatEvent.js","webpack:///./node_modules/tone/build/esm/core/clock/Transport.js","webpack:///./node_modules/tone/build/esm/component/channel/Volume.js","webpack:///./node_modules/tone/build/esm/core/context/Destination.js","webpack:///./node_modules/tone/build/esm/core/context/ToneAudioBuffers.js","webpack:///./node_modules/tone/build/esm/core/util/Draw.js","webpack:///./node_modules/tone/build/esm/source/Source.js","webpack:///./node_modules/tone/build/esm/source/buffer/ToneBufferSource.js","webpack:///./node_modules/tone/build/esm/source/oscillator/OscillatorInterface.js","webpack:///./node_modules/tone/build/esm/source/oscillator/ToneOscillatorNode.js","webpack:///./node_modules/tone/build/esm/source/oscillator/Oscillator.js","webpack:///./node_modules/tone/build/esm/signal/SignalOperator.js","webpack:///./node_modules/tone/build/esm/signal/WaveShaper.js","webpack:///./node_modules/tone/build/esm/signal/AudioToGain.js","webpack:///./node_modules/tone/build/esm/signal/Multiply.js","webpack:///./node_modules/tone/build/esm/source/oscillator/AMOscillator.js","webpack:///./node_modules/tone/build/esm/source/oscillator/FMOscillator.js","webpack:///./node_modules/tone/build/esm/source/oscillator/PulseOscillator.js","webpack:///./node_modules/tone/build/esm/source/oscillator/FatOscillator.js","webpack:///./node_modules/tone/build/esm/source/oscillator/PWMOscillator.js","webpack:///./node_modules/tone/build/esm/source/oscillator/OmniOscillator.js","webpack:///./node_modules/tone/build/esm/core/util/Decorator.js","webpack:///./node_modules/tone/build/esm/source/buffer/Player.js","webpack:///./node_modules/tone/build/esm/component/envelope/Envelope.js","webpack:///./node_modules/tone/build/esm/instrument/Instrument.js","webpack:///./node_modules/tone/build/esm/instrument/Monophonic.js","webpack:///./node_modules/tone/build/esm/component/envelope/AmplitudeEnvelope.js","webpack:///./node_modules/tone/build/esm/instrument/Synth.js","webpack:///./node_modules/tone/build/esm/instrument/MembraneSynth.js","webpack:///./node_modules/tone/build/esm/core/worklet/WorkletGlobalScope.js","webpack:///./node_modules/tone/build/esm/core/worklet/ToneAudioWorkletProcessor.worklet.js","webpack:///./node_modules/tone/build/esm/core/worklet/AudioWorkletProcessor.worklet.js","webpack:///./node_modules/tone/build/esm/core/worklet/SingleIOProcessor.worklet.js","webpack:///./node_modules/tone/build/esm/core/worklet/DelayLine.worklet.js","webpack:///./node_modules/tone/build/esm/component/filter/FeedbackCombFilter.worklet.js","webpack:///./node_modules/tone/build/esm/instrument/Sampler.js","webpack:///./node_modules/tone/build/esm/component/channel/Panner.js","webpack:///./node_modules/tone/build/esm/effect/BitCrusher.worklet.js","webpack:///./node_modules/tone/build/esm/component/channel/Solo.js","webpack:///./node_modules/tone/build/esm/component/channel/PanVol.js","webpack:///./node_modules/tone/build/esm/component/channel/Channel.js","webpack:///./node_modules/tone/build/esm/core/context/Listener.js","webpack:///./node_modules/tone/build/esm/index.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ACTIVE_AUDIO_NODE_STORE","WeakSet","AUDIO_NODE_CONNECTIONS_STORE","WeakMap","AUDIO_NODE_STORE","AUDIO_PARAM_CONNECTIONS_STORE","AUDIO_PARAM_STORE","BACKUP_NATIVE_CONTEXT_STORE","CONTEXT_STORE","EVENT_LISTENERS","CYCLE_COUNTERS","NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS","NODE_TO_PROCESSOR_MAPS","assignNativeAudioNodeOptions","nativeAudioNode","options","MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","isOwnedByContext","nativeContext","context","assignNativeAudioNodeOption","option","undefined","assignNativeAudioNodeAudioParamValue","audioParam","getNativeAudioNode","audioNode","createInvalidStateError","DOMException","err","code","getAudioNodeConnections","getValueForKey","map","Error","createNotSupportedError","interceptConnections","original","interceptor","connect","disconnect","isNativeAudioNodeFaker","nativeAudioNodeOrNativeAudioNodeFaker","cacheTestResult","Map","window","nativeOfflineAudioContextConstructor","isNativeOfflineAudioContext","nativeAudioContextConstructor","getBackupNativeContext","createNativeAudioNode","createNativeAnalyserNode","getAudioNodeRenderer","renderInputsOfAudioNode","createAnalyserNodeRenderer","auxiliaryGainNodeStore","getNativeContext","audioParamAudioNodeStore","eventTargetConstructor","isNativeAudioContext","isNativeAudioNode","isNativeAudioParam","audioNodeConstructor","analyserNodeConstructor","audioBufferStore","nativeAudioBufferConstructor","convertNumberToUnsignedLong","Uint32Array","wrapAudioBufferCopyChannelMethods","wrapAudioBufferCopyChannelMethodsOutOfBounds","audioBufferConstructor","createNativeGainNode","addSilentConnection","testAudioScheduledSourceNodeStartMethodNegativeParametersSupport","testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport","testAudioScheduledSourceNodeStopMethodNegativeParametersSupport","wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls","renderInputsOfAudioParam","connectAudioParam","createNativeAudioBufferSourceNode","renderAutomation","createAudioBufferSourceNodeRenderer","createAudioParam","audioBufferSourceNodeConstructor","audioDestinationNodeConstructor","createNativeBiquadFilterNode","createBiquadFilterNodeRenderer","biquadFilterNodeConstructor","monitorConnections","wrapChannelMergerNode","createNativeChannelMergerNode","createChannelMergerNodeRenderer","channelMergerNodeConstructor","createNativeChannelSplitterNode","createChannelSplitterNodeRenderer","channelSplitterNodeConstructor","createNativeConstantSourceNodeFaker","createNativeConstantSourceNode","createConstantSourceNodeRenderer","constantSourceNodeConstructor","createNativeConvolverNodeFaker","createNativeConvolverNode","createConvolverNodeRenderer","convolverNodeConstructor","createNativeDelayNode","createDelayNodeRenderer","delayNodeConstructor","createNativeDynamicsCompressorNode","createDynamicsCompressorNodeRenderer","dynamicsCompressorNodeConstructor","createGainNodeRenderer","gainNodeConstructor","createNativeScriptProcessorNode","createNativeIIRFilterNodeFaker","renderNativeOfflineAudioContext","createIIRFilterNodeRenderer","createNativeIIRFilterNode","iIRFilterNodeConstructor","createAudioListener","unrenderedAudioWorkletNodeStore","minimalBaseAudioContextConstructor","createNativeOscillatorNode","createOscillatorNodeRenderer","oscillatorNodeConstructor","createConnectedNativeAudioBufferSourceNode","createNativeWaveShaperNodeFaker","createNativeWaveShaperNode","createNativePannerNodeFaker","createNativePannerNode","createPannerNodeRenderer","pannerNodeConstructor","createNativePeriodicWave","periodicWaveConstructor","nativeStereoPannerNodeFakerFactory","createNativeStereoPannerNode","createStereoPannerNodeRenderer","stereoPannerNodeConstructor","createWaveShaperNodeRenderer","waveShaperNodeConstructor","isSecureContext","exposeCurrentFrameAndCurrentTime","addAudioWorkletModule","isNativeContext","decodeAudioData","baseAudioContextConstructor","createNativeMediaElementAudioSourceNode","mediaElementAudioSourceNodeConstructor","createNativeMediaStreamAudioDestinationNode","mediaStreamAudioDestinationNodeConstructor","createNativeMediaStreamAudioSourceNode","mediaStreamAudioSourceNodeConstructor","createNativeMediaStreamTrackAudioSourceNode","mediaStreamTrackAudioSourceNodeConstructor","audioContextConstructor","getUnrenderedAudioWorkletNodes","addUnrenderedAudioWorkletNode","connectMultipleOutputs","deleteUnrenderedAudioWorkletNode","disconnectMultipleOutputs","createNativeAudioWorkletNodeFaker","createNativeAudioWorkletNode","nativeAudioWorkletNodeConstructor","createAudioWorkletNodeRenderer","audioWorkletNodeConstructor","createNativeOfflineAudioContext","startRendering","offlineAudioContextConstructor","isAnyAudioContext","isAnyAudioNode","isAnyAudioParam","isAnyOfflineAudioContext","testPromiseSupport","uint32Array","promise","buffer","catch","createIndexSizeError","insertElementInSet","set","element","predicate","ignoreDuplicates","lmnt","add","setInternalStateToActive","has","forEach","eventListener","_slicedToArray","_classCallCheck","_createClass","createExtendedExponentialRampToValueAutomationEvent","endTime","insertTime","type","createExtendedLinearRampToValueAutomationEvent","createSetValueAutomationEvent","startTime","createSetValueCurveAutomationEvent","values","duration","getTargetValueAtTime","time","valueAtStartTime","_ref","target","timeConstant","Math","exp","isExponentialRampToValueAutomationEvent","automationEvent","isLinearRampToValueAutomationEvent","isAnyRampToValueAutomationEvent","isSetValueAutomationEvent","isSetValueCurveAutomationEvent","getValueOfAutomationEventAtIndexAtTime","automationEvents","index","defaultValue","length","getEndTimeAndValueOfPreviousAutomationEvent","currentAutomationEvent","nextAutomationEvent","isCancelAndHoldAutomationEvent","isCancelScheduledValuesAutomationEvent","getEventTime","cancelTime","getExponentialRampValueAtTime","pow","getLinearRampValueAtTime","getValueCurveValueAtTime","theoreticIndex","lowerIndex","floor","upperIndex","ceil","interpolateValue","isSetTargetAutomationEvent","AutomationEventList","this","_automationEvents","_currenTime","_defaultValue","iterator","eventTime","findIndex","removedAutomationEvent","slice","lastAutomationEvent","startValue","truncatedAutomationEvent","push","getValue","Float32Array","_index","previousAutomationEvent","persistentAutomationEvent","splice","remainingAutomationEvents","firstRemainingAutomationEvent","unshift","_getEndTimeAndValueOf","_getEndTimeAndValueOf2","_getEndTimeAndValueOf3","_getEndTimeAndValueOf4","_startTime","_value","createCancelAndHoldAutomationEvent","createCancelScheduledValuesAutomationEvent","createExponentialRampToValueAutomationEvent","createLinearRampToValueAutomationEvent","createSetTargetAutomationEvent","factory","isPartOfACycle","getEventListenersOfAudioNode","setInternalStateToPassive","delete","isAudioNodeOutputConnection","outputConnection","isActiveAudioNode","isAudioNode","audioNodeOrAudioParam","nativeAudioNodeOrAudioParam","getAudioParamConnections","getNativeAudioParam","wrapEventListener","event","descriptor","defineProperties","currentTarget","handleEvent","wrapAudioBufferGetChannelDataMethod","audioBuffer","getChannelData","channel","wrapAudioScheduledSourceNodeStartMethodNegativeParameters","nativeAudioScheduledSourceNode","start","when","offset","RangeError","wrapAudioScheduledSourceNodeStopMethodNegativeParameters","stop","testAudioBufferCopyChannelMethodsOutOfBoundsSupport","nativeAudioBuffer","copyToChannel","connectNativeAudioNodeToNativeAudioNode","nativeSourceAudioNode","nativeDestinationAudioNode","output","input","fakeNativeDestinationAudioNode","inputs","disconnectNativeAudioNodeFromNativeAudioNode","copyFromChannel","parent","channelNumber","bufferOffset","byteLength","channelData","slicedInput","BYTES_PER_ELEMENT","createNestedArrays","x","y","arrays","array","j","createInvalidAccessError","overwriteAccessors","createGetter","createSetter","getPrototypeOf","getOwnPropertyDescriptor","isValidLatencyHint","latencyHint","ReadOnlyMap","parameters","_map","size","entries","callback","thisArg","keys","filterBuffer","feedback","feedbackLength","feedforward","feedforwardLength","minLength","xBuffer","yBuffer","bufferIndex","bufferLength","inputLength","k","computeBufferSize","baseLatency","sampleRate","max","min","round","log2","createUnknownError","isDCCurve","curve","createAbortError","createAddAudioNodeConnections","audioNodeConnectionsStore","audioNodeRenderer","activeInputs","numberOfInputs","Set","outputs","passiveInputs","renderer","createAddAudioParamConnections","audioParamConnectionsStore","audioParamRenderer","createAddSilentConnection","nativeGainNode","channelCount","channelCountMode","channelInterpretation","gain","destination","removeEventListener","addEventListener","createAddUnrenderedAudioWorkletNode","audioWorkletNode","DEFAULT_OPTIONS","fftSize","maxDecibels","minDecibels","smoothingTimeConstant","createAnalyserNodeConstructor","audionNodeConstructor","mergedOptions","nativeAnalyserNode","super","_nativeAnalyserNode","frequencyBinCount","getByteFrequencyData","getByteTimeDomainData","getFloatFrequencyData","getFloatTimeDomainData","createAnalyserNodeRendererFactory","renderedNativeAnalyserNodes","proxy","nativeOfflineAudioContext","trace","renderedNativeAnalyserNode","Promise","resolve","async","createAnalyserNode","numberOfChannels","createAudioBufferConstructor","testNativeAudioBufferConstructorSupport","AudioBuffer","createBuffer","hasInstance","instance","loop","loopEnd","loopStart","playbackRate","createAudioBufferSourceNodeConstructor","nativeAudioBufferSourceNode","isOffline","audioBufferSourceNodeRenderer","_audioBufferSourceNodeRenderer","_isBufferNullified","_isBufferSet","_nativeAudioBufferSourceNode","_onended","_playbackRate","fill","wrappedListener","onended","nativeOnEnded","resetInternalStateToPassive","setTimeout","createAudioBufferSourceNodeRendererFactory","renderedNativeAudioBufferSourceNodes","renderedNativeAudioBufferSourceNode","nativeAudioBufferSourceNodeIsOwnedByContext","createAudioBufferSourceNode","createAudioContextConstructor","nativeAudioContext","TypeError","_baseLatency","_nativeAudioContext","_state","state","revokeState","close","then","mediaElement","mediaStream","mediaStreamTrack","reject","resolvePromise","resume","suspend","createAudioDestinationNodeConstructor","createAudioDestinationNodeRenderer","createNativeAudioDestinationNode","nativeAudioDestinationNode","_isNodeOfNativeOfflineAudioContext","_nativeAudioDestinationNode","maxChannelCount","nativeAudioDestinationNodePromise","render","createAudioDestinationNode","createAudioListenerFactory","nativeListener","listener","forwardX","forwardY","forwardZ","positionX","positionY","positionZ","upX","upY","upZ","channelMergerNode","scriptProcessorNode","createFakeAudioParam","constantSourceNode","lastOrientation","lastPosition","onaudioprocess","inputBuffer","orientation","some","setOrientation","positon","setPosition","createFakeAudioParams","createAudioParamFactory","addAudioParamConnections","audioParamStore","createAudioParamRenderer","isAudioParamOfOfflineAudioContext","nativeAudioParam","maxValue","minValue","automationEventList","setValueAtTime","currentTime","cancelAndHoldAtTime","flush","previousLastEvent","Array","from","pop","currentLastEvent","cancelScheduledValues","exponentialRampToValueAtTime","linearRampToValueAtTime","setValueCurveAtTime","setTargetAtTime","firstSample","lastSample","numberOfInterpolatedValues","interpolatedValues","timeOfLastSample","numberOfOutputs","outputChannelCount","parameterData","processorOptions","createChannelCount","createAudioWorkletNodeConstructor","sanitizedOptions","nodeNameToProcessorConstructorMap","processorConstructor","nativeAudioWorkletNode","nm","_nativeAudioWorkletNode","_onprocessorerror","_parameters","onprocessorerror","nativeOnProcessorError","port","createBaseAudioContextConstructor","_nativeContext","_audioWorklet","addModule","moduleURL","maxDelayTime","real","imag","constraints","disableNormalization","audioData","successCallback","errorCallback","Q","detune","frequency","createBiquadFilterNodeConstructor","nativeBiquadFilterNode","_Q","_detune","_frequency","_gain","log10","_nativeBiquadFilterNode","frequencyHz","magResponse","phaseResponse","getFrequencyResponse","createBiquadFilterNodeRendererFactory","renderedNativeBiquadFilterNodes","renderedNativeBiquadFilterNode","nativeBiquadFilterNodeIsOwnedByContext","createBiquadFilterNode","createCacheTestResult","ongoingTests","testResults","tester","test","cachedTestResult","ongoingTest","synchronousTestResult","finalTestResult","createChannelMergerNodeConstructor","createChannelMergerNodeRendererFactory","renderedNativeAudioNodes","renderedNativeAudioNode","createAudioNode","createChannelSplitterNodeConstructor","createChannelSplitterNodeRendererFactory","createConnectAudioParam","createConnectMultipleOutputs","outputAudioNodes","outputAudioNode","createConnectedNativeAudioBufferSourceNodeFactory","createConstantSourceNodeConstructor","createConstantSourceNodeRendererFactory","nativeConstantSourceNode","constantSourceNodeRenderer","_constantSourceNodeRenderer","_nativeConstantSourceNode","_offset","renderedNativeConstantSourceNodes","renderedNativeConstantSourceNode","nativeConstantSourceNodeIsOwnedByContext","createConstantSourceNode","createConvertNumberToUnsignedLong","unit32Array","createConvolverNodeConstructor","nativeConvolverNode","_nativeConvolverNode","normalize","createConvolverNodeRendererFactory","renderedNativeConvolverNodes","renderedNativeConvolverNode","createConvolverNode","createCreateNativeOfflineAudioContext","createDataCloneError","createDecrementCycleCounter","cycleCounters","count","cycleCounter","nativeDestinationAudioParam","delayTime","createDelayNodeConstructor","nativeDelayNode","_delayTime","createDelayNodeRendererFactory","renderedNativeDelayNodes","renderedNativeDelayNode","nativeDelayNodeIsOwnedByContext","createDelayNode","createDeleteUnrenderedAudioWorkletNode","getOutputAudioNodeAtIndex","createDisconnectMultipleOutputs","destinationOrOutput","attack","knee","ratio","release","threshold","createDynamicsCompressorNodeConstructor","nativeDynamicsCompressorNode","_attack","_knee","_nativeDynamicsCompressorNode","_ratio","_release","_threshold","previousChannelCount","reduction","createDynamicsCompressorNodeRendererFactory","renderedNativeDynamicsCompressorNodes","renderedNativeDynamicsCompressorNode","nativeDynamicsCompressorNodeIsOwnedByContext","createDynamicsCompressorNode","createEncodingError","createEvaluateSource","source","SyntaxError","head","document","script","createElement","blob","Blob","url","URL","createObjectURL","originalOnErrorHandler","onerror","removeErrorEventListenerAndRevokeUrl","revokeObjectURL","message","src","lineno","colno","error","location","href","onload","appendChild","createEventTargetConstructor","_nativeEventTarget","_listeners","wrappedEventListener","dispatchEvent","createExposeCurrentFrameAndCurrentTime","fn","currentFrame","configurable","createFetchSource","response","fetch","ok","text","createGainNodeConstructor","createGainNodeRendererFactory","renderedNativeGainNodes","renderedNativeGainNode","nativeGainNodeIsOwnedByContext","createGainNode","createGetAudioNodeRenderer","audioNodeConnections","createGetAudioParamRenderer","audioParamConnections","createGetBackupNativeContext","backupNativeContext","bckpNtveCntxt","createGetNativeContext","contextStore","createGetUnrenderedAudioWorkletNodes","unrenderedAudioWorkletNodes","createIIRFilterNodeRendererFactory","filteredBufferPromise","nativeIIRFilterNode","nativeIIRFilterNodeIsOwnedByContext","createIIRFilter","ntvCntxt","partialOfflineAudioContext","renderedBuffer","filteredBuffer","filterFullBuffer","createIncrementCycleCounterFactory","createIsAnyAudioContext","anything","createIsAnyAudioNode","audioNodeStore","createIsAnyAudioParam","createIsAnyOfflineAudioContext","createIsNativeAudioContext","createIsNativeAudioNode","AudioNode","createIsNativeAudioParam","AudioParam","createIsNativeContext","createIsNativeOfflineAudioContext","createIsSecureContext","createIsSupportedPromise","testAudioBufferCopyChannelMethodsSubarraySupport","testAudioContextCloseMethodSupport","testAudioContextDecodeAudioDataMethodTypeErrorSupport","testAudioContextOptionsSupport","testAudioNodeConnectMethodSupport","testAudioWorkletProcessorNoOutputsSupport","testChannelMergerNodeChannelCountSupport","testConstantSourceNodeAccurateSchedulingSupport","testConvolverNodeBufferReassignabilitySupport","testIsSecureContextSupport","testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport","testStereoPannerNodeDefaultValueSupport","testTransferablesSupport","all","every","result","createMediaElementAudioSourceNodeConstructor","nativeMediaElementAudioSourceNode","_mediaElement","_nativeMediaElementAudioSourceNode","createMediaStreamAudioDestinationNodeConstructor","nativeMediaStreamAudioDestinationNode","_nativeMediaStreamAudioDestinationNode","stream","createMediaStreamAudioSourceNodeConstructor","nativeMediaStreamAudioSourceNode","_nativeMediaStreamAudioSourceNode","createMediaStreamTrackAudioSourceNodeConstructor","createMinimalAudioContextConstructor","createMinimalBaseAudioContextConstructor","_destination","_listener","_onstatechange","onstatechange","nativeOnStateChange","createMinimalOfflineAudioContextConstructor","delayStateChangeEvent","stopImmediatePropagation","_waitForThePromiseToSettle","_length","_nativeOfflineAudioContext","createMonitorConnections","whenConnected","whenDisconnected","connections","wasDisconnected","connection","wasConnected","apply","clear","isDisconnected","createNativeAudioBufferConstructor","createNativeAudioContextConstructor","AudioContext","webkitAudioContext","createNativeAudioDestinationNodeFactory","isNodeOfNativeOfflineAudioContext","gainNode","createNativeAudioNodeFactory","factoryFunction","createNativeAudioWorkletNodeConstructor","AudioWorkletNode","createNativeBiquadFilterNodeFactory","createBiquadFilter","createNativeChannelMergerNodeFactory","nativeChannelMergerNode","createChannelMerger","createNativeConstantSourceNodeFactory","createConstantSource","createNativeConstantSourceNodeFakerFactory","audioNodeOptions","audioBufferSourceNode","nativeConstantSourceNodeFaker","args","createNativeConvolverNodeFactory","createConvolver","createNativeConvolverNodeFakerFactory","convolverNode","nativeConvolverNodeFaker","createNativeDelayNodeFactory","createDelay","createNativeDynamicsCompressorNodeFactory","createDynamicsCompressor","createNativeGainNodeFactory","createGain","createNativeIIRFilterNodeFactory","divide","a","b","denominator","evaluatePolynomial","coefficient","z","createNativeIIRFilterNodeFakerFactory","bufferSize","bufferIndexes","xBuffers","yBuffers","outputBuffer","nyquist","nativeIIRFilterNodeFaker","omega","PI","cos","sin","sqrt","atan2","createNativeMediaElementAudioSourceNodeFactory","ntvDCntxt","createMediaElementSource","createNativeMediaStreamAudioDestinationNodeFactory","createMediaStreamDestination","createNativeMediaStreamAudioSourceNodeFactory","audioStreamTracks","getAudioTracks","filteredAudioStreamTracks","sort","id","createMediaStreamSource","MediaStream","createNativeMediaStreamTrackAudioSourceNodeFactory","createMediaStreamTrackSource","kind","createNativeOfflineAudioContextConstructor","OfflineAudioContext","webkitOfflineAudioContext","createNativeOscillatorNodeFactory","nativeOscillatorNode","createOscillator","periodicWave","setPeriodicWave","createNativePannerNodeFactory","nativePannerNode","createPanner","orientationX","createNativePannerNodeFakerFactory","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","orientationY","orientationZ","panningModel","refDistance","rolloffFactor","pannerNode","SINGLE_CHANNEL_OPTIONS","inputGainNode","orientationXGainNode","orientationYGainNode","orientationZGainNode","positionXGainNode","positionYGainNode","positionZGainNode","waveShaperNode","oversample","nativePannerNodeFaker","createNativePeriodicWaveFactory","wrappedImag","wrappedReal","createPeriodicWave","createNativeScriptProcessorNodeFactory","numberOfInputChannels","numberOfOutputChannels","createScriptProcessor","createNativeStereoPannerNodeFactory","createNativeStereoPannerNodeFaker","createStereoPanner","nativeStereoPannerNode","createNativeStereoPannerNodeFakerFactory","DC_CURVE","HALF_PI","SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS","buildInternalGraph","panGainNode","leftWaveShaperCurve","rightWaveShaperCurve","leftGainNode","leftWaveShaperNode","panWaveShaperNode","rightGainNode","rightWaveShaperNode","buildInternalGraphForMono","leftInputForLeftOutputWaveShaperCurve","leftInputForRightOutputWaveShaperCurve","rightInputForLeftOutputWaveShaperCurve","rightInputForRightOutputWaveShaperCurve","centerIndex","CURVE_SIZE","channelSplitterNode","leftInputForLeftOutputGainNode","leftInputForLeftOutputWaveShaperNode","leftInputForRightOutputGainNode","leftInputForRightOutputWaveShaperNode","rightInputForLeftOutputGainNode","rightInputForLeftOutputWaveShaperNode","rightInputForRightOutputGainNode","rightInputForRightOutputWaveShaperNode","buildInternalGraphForStereo","pan","connectGraph","disconnectGraph","isConnected","createNativeWaveShaperNodeFactory","nativeWaveShaperNode","createWaveShaper","disconnectNativeAudioBufferSourceNode","createNativeWaveShaperNodeFakerFactory","negativeWaveShaperNode","positiveWaveShaperNode","invertGainNode","outputGainNode","revertGainNode","unmodifiedCurve","nativeWaveShaperNodeFaker","curveLength","negativeCurve","positiveCurve","createOfflineAudioContextConstructor","createOscillatorNodeConstructor","oscillatorNodeRenderer","_nativeOscillatorNode","_oscillatorNodeRenderer","createOscillatorNodeRendererFactory","renderedNativeOscillatorNodes","renderedNativeOscillatorNode","nativeOscillatorNodeIsOwnedByContext","createOscillatorNode","createPannerNodeConstructor","_nativePannerNode","_orientationX","_orientationY","_orientationZ","_positionX","_positionY","_positionZ","createPannerNodeRendererFactory","renderedBufferPromise","renderedNativeGainNodeOrNativePannerNode","commonAudioNodeOptions","commonNativePannerNodeOptions","nativePannerNodeIsOwnedByContext","nativeConstantSourceNodes","channelDatas","gateGainNode","partialPannerNode","createPeriodicWaveConstructor","periodicWaveStore","PeriodicWave","createRenderAutomation","getAudioParamRenderer","replay","createRenderInputsOfAudioNode","nextTrace","filter","includes","reduce","allRenderingPromises","renderingPromises","createRenderInputsOfAudioParam","createRenderNativeOfflineAudioContext","testOfflineAudioContextCurrentTimeSupport","isOfflineAudioContextCurrentTimeSupported","oncomplete","createStartRendering","createStereoPannerNodeConstructor","_pan","createStereoPannerNodeRendererFactory","renderedNativeStereoPannerNodes","renderedNativeStereoPannerNode","nativeStereoPannerNodeIsOwnedByContext","createStereoPannerNode","createTestAudioBufferConstructorSupport","createTestAudioBufferCopyChannelMethodsSubarraySupport","createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport","createBufferSource","createTestAudioBufferSourceNodeStartMethodDurationParameterSupport","offlineAudioContext","createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport","createTestAudioBufferSourceNodeStopMethodNullifiedBufferSupport","createTestAudioContextCloseMethodSupport","audioContext","isAudioContextClosable","createTestAudioContextDecodeAudioDataMethodTypeErrorSupport","isPending","createTestAudioContextOptionsSupport","createTestAudioNodeConnectMethodSupport","isSupported","createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport","createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport","createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport","createTestAudioWorkletProcessorNoOutputsSupport","isCallingProcess","audioWorklet","onmessage","createTestChannelMergerNodeChannelCountSupport","createTestConstantSourceNodeAccurateSchedulingSupport","Number","POSITIVE_INFINITY","createTestConvolverNodeBufferReassignabilitySupport","createTestIsSecureContextSupport","createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport","createTestOfflineAudioContextCurrentTimeSupport","createTestStereoPannerNodeDefaultValueSupport","stereoPanner","createWaveShaperNodeConstructor","_isCurveNullified","_nativeWaveShaperNode","createWaveShaperNodeRendererFactory","renderedNativeWaveShaperNodes","renderedNativeWaveShaperNode","createWaveShaperNode","createWindow","createWrapAudioBufferCopyChannelMethods","channelNumberAsNumber","bufferOffsetAsNumber","audioBufferLength","destinationLength","sourceLength","createWrapAudioBufferCopyChannelMethodsOutOfBounds","createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer","nullifiedBuffer","createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls","disconnectGainNode","isStopped","createWrapChannelMergerNode","monitorConnectionsFunction","arrayBuffer","ArrayBuffer","port1","port2","MessageChannel","data","postMessage","wrapAudioBufferSourceNodeStartMethodOffsetClamping","clampedOffset","isAudioWorkletNode","deleteEventListenerOfAudioNode","isPassiveAudioNode","pickElementFromSet","matchingElements","matchingElement","setInternalStateToPassiveWhenNecessary","testAudioNodeDisconnectMethodSupport","analyzer","dummy","ones","chnnlDt","sample","visitEachAudioNodeOnce","cycles","visitor","counts","cycle","addActiveInputConnectionToAudioNode","activeInputConnection","addActiveInputConnectionToAudioParam","addPassiveInputConnectionToAudioNode","passiveInputConnections","passiveInputConnection","addPassiveInputConnectionToAudioParam","deletePassiveInputConnectionToAudioNode","matchingConnection","deletePassiveInputConnectionToAudioParam","addConnectionToAudioNodeOfAudioContext","eventListeners","isActive","partialConnection","deleteActiveInputConnectionToAudioNode","addConnectionToAudioParamOfAudioContext","deleteActiveInputConnectionToAudioParam","deleteActiveInputConnection","activeInputConnections","deleteInputsOfAudioNode","deleteInputConnectionOfAudioNode","deleteInputsOfAudioParam","deleteInputConnectionOfAudioParam","createAudioNodeConstructor","addAudioNodeConnections","createIncrementCycleCounter","decrementCycleCounter","detectCycles","_context","_nativeAudioNode","returnValue","connectionsToDestination","filteredConnections","wrapAudioNodeDisconnectMethod","auxiliaryGainNodes","addConnectionToAudioNodeOfOfflineAudioContext","addConnectionToAudioParamOfOfflineAudioContext","destinations","audioNodeConnectionsOfSource","deleteAnyConnection","deleteConnectionAtOutput","deleteConnectionToDestination","createAudioWorkletProcessorPromise","audioWorkletNodeOptions","onmessageerror","cloneAudioWorkletNodeOptions","createNativeAudioWorkletNodeFakerFactory","sum","numberOfParameters","parameterDescriptors","messageChannel","gainNodes","inputChannelSplitterNodes","constantSourceNodes","inputChannelMergerNode","outputChannelSplitterNode","outputChannelMergerNodes","parameterMap","nativeAudioWorkletNodeFaker","_","patchedEventListeners","unpatchedEventListener","patchedEventListener","audioWorkletProcessor","nodeToProcessorMap","audioWorkletProcessorPromise","createAudioWorkletProcessor","dWrkltPrcssr","prmtrs","disconnectOutputsGraph","outputChannelSplitterNodeOutput","outputChannelMergerNode","potentiallyEmptyInputs","activeSourceFlag","process","ErrorEvent","disconnectFakeGraph","connectFakeGraph","createNativeAudioBufferSourceNodeFactory","testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport","testAudioBufferSourceNodeStartMethodDurationParameterSupport","testAudioBufferSourceNodeStartMethodOffsetClampingSupport","testAudioBufferSourceNodeStopMethodNullifiedBufferSupport","wrapAudioBufferSourceNodeStartMethodOffsetClampling","wrapAudioBufferSourceNodeStopMethodNullifiedBuffer","isScheduled","wrapAudioBufferSourceNodeStartMethodConsecutiveCalls","stopTime","actualStartTime","durationInBufferTime","wrapAudioBufferSourceNodeStartMethodDurationParameter","handler","construct","IMPORT_STATEMENT_REGEX","splitImportStatements","importStatements","sourceWithoutImportStatements","replace","match","unresolvedUrl","importStatementWithResolvedUrl","toString","join","verifyParameterDescriptors","isArray","verifyProcessorCtor","processorCtor","constructible","Proxy","isConstructible","createAddAudioWorkletModule","evaluateSource","fetchSource","ongoingRequests","resolvedRequests","credentials","absoluteUrl","resolvedRequestsOfContext","ongoingRequestsOfContext","promiseOfOngoingRequest","evaluateAudioWorkletGlobalScope","_AWGS","trim","rslvdRqstsFCntxt","ngngRqstsFCntxt","testAnalyserNodeGetFloatTimeDomainDataMethodSupport","createNativeAnalyserNodeFactory","createAnalyser","byteTimeDomainData","Uint8Array","wrapAnalyserNodeGetFloatTimeDomainDataMethod","createIIRFilterNodeConstructor","wrapIIRFilterNodeGetFrequencyResponseMethod","_nativeIIRFilterNode","createDetectCycles","chain","nextLink","isDelayNode","mergedCycles","nestedCycles","concat","createDecodeAudioData","detachedArrayBuffers","anyContext","complete","detachArrayBuffer","fail","createNativeAudioWorkletNodeFactory","testClonabilityOfAudioWorkletNodeOptions","processBuffer","processedBuffer","getAudioWorkletProcessor","createAudioWorkletNodeRendererFactory","processedBufferPromise","renderedNativeAudioWorkletNodeOrGainNode","nativeOutputNodes","nativeAudioWorkletNodeIsOwnedByContext","renderBuffer","createNativeChannelSplitterNodeFactory","nativeChannelSplitterNode","createChannelSplitter","wrapChannelSplitterNode","arrayWithHoles","iterableToArrayLimit","unsupportedIterableToArray","nonIterableRest","arr","_arr","_n","_d","_e","_s","_i","next","done","arrayLikeToArray","minLen","constructor","len","arr2","Constructor","_defineProperties","props","writable","protoProps","staticProps","assert","statement","assertRange","gte","lte","Infinity","assertContextRunning","warn","defaultLogger","console","isUndef","arg","isDefined","isNumber","isObject","isBoolean","isString","isNote","createOfflineAudioContext","channels","theWindow","self","hasAudioContext","__decorate","decorators","desc","arguments","Reflect","decorate","__awaiter","_arguments","P","generator","fulfilled","step","e","rejected","Ticker","updateInterval","_callback","_type","_updateInterval","_createClock","toFixed","blobUrl","worker","Worker","_worker","_timeout","_createTimeout","_createWorker","clearTimeout","terminate","interval","_disposeClock","isAudioParam","isOfflineAudioContext","isAudioContext","isAudioBuffer","noCopy","deepMerge","sources","shift","assign","optionsFromArguments","defaults","argsArray","objKey","opts","indexOf","defaultArg","given","fallback","omitFromObject","obj","omit","prop","debug","_wasDisposed","TONE_DEBUG_CLASS","log","version","GT","GTE","EQ","LT","abs","clamp","_timeline","getDefaults","memory","increasing","valueOf","lastValue","_search","diff","param","after","beginning","end","midPoint","nextEvent","lowerBound","upperBound","_iterate","dispose","notifyNewContext","onContextInit","cb","notifyCloseContext","onContextClose","split","eventName","_events","boundCallback","off","on","eventList","constr","_constants","_timeouts","_timeoutIds","_initialized","_workletModules","_latencyHint","lookAhead","_ticker","emit","clockSource","_timeoutLoop","ctx","feedForward","initialize","_transport","_draw","createAudioWorkletNode","rawContext","promises","hint","lookAheadValue","val","constant","now","firstEvent","peek","timeout","remove","intervalFn","readOnly","str","noOp","reverse","load","_buffer","getContext","loaded","_reversed","_reverse","doneLoading","downloads","isMultidimensional","multiChannelArray","chanNum","fromArray","toArray","outputArray","numChannels","channelArray","ret","startSamples","endSamples","retBuffer","subarray","rev","matches","extensions","extension","ext","supportsType","baseUrl","endsWith","canPlayType","_currentTime","_duration","asynchronous","yieldEvery","workletsAreReady","_renderClock","dummyContext","_numberOfChannels","_sampleRate","_numberOfInputs","_numberOfOutputs","_maxDelayTime","_feedForward","_feedback","_real","_imag","_constraints","_stream","_audioData","_name","_options","_url","_fn","_id","_interval","_val","globalContext","setContext","TONE_SILENCE_LOGGING","prefix","printString","dbToGain","db","gainToDb","LN10","intervalToFrequencyRatio","A4","ftom","ftomf","mtof","midi","units","defaultUnits","_units","_expressions","_getExpressions","hz","method","_frequencyToUnits","parseFloat","regexp","_ticksToUnits","parseInt","_beatsToUnits","_getTimeSignature","dot","numericValue","scalar","number","_secondsToUnits","samples","tr","q","total","fromType","_noArg","typeName","quantity","expr","matching","freq","beats","_getBpm","seconds","ticks","_getPPQ","_now","transport","bpm","timeSignature","PPQ","toSeconds","toTicks","toFrequency","toMidi","capture","quantize","quantTo","nextSubdivision","subdiv","percent","subdivision","testNotations","power","closest","closestSeconds","notation","notationSeconds","quarterTime","quarters","measures","sixteenths","sixteenthString","setA4","note","pitch","octave","noteNumber","noteToScaleIndex","toLowerCase","intervals","transpose","scaleIndexToNote","cbb","cx","dbb","dx","ebb","eb","ex","fbb","fb","f","fx","gbb","gb","g","gx","abb","ab","ax","bbb","bb","bx","defaultContext","attribute","member","_getPartialProperties","initial","_initial","setStateAtTime","overridden","_minOutput","_param","_swappable","swappable","_initialValue","convert","_minValue","_maxValue","_toType","getValueAtTime","_fromType","_is","computedTime","isFinite","JSON","stringify","_assertRange","getAfter","before","beforeValue","previous","getBefore","_linearInterpolate","_exponentialInterpolate","previousVal","_exponentialApproach","currentVal","rampTime","setRampPoint","exponentialApproachValueAtTime","scaling","startingValue","segTime","cancel","valueAtTime","sampleTime","exponentialRampTo","linearRampTo","previousEvent","subdivisions","forEachAfter","t0","v0","v1","t1","_internalChannels","node","nodeList","_isAudioNode","_getInternalNodes","_getChannelProperties","_setChannelProperties","outputNum","inputNum","toDestination","nodes","connectSeries","first","prev","current","srcNode","dstNode","outputNumber","inputNumber","_gainNode","_stopTime","getStateAtTime","_fadeIn","fadeIn","_fadeOut","fadeOut","_curve","fadeInTime","_stopGain","cancelStop","fadeOutTime","targetRampTo","additionalTail","_stopSource","_source","_startGain","override","_constantSource","connectSignal","rampTo","signal","_multiplier","multiplier","computedValue","prevEvent","segments","rampVal","ticksUntilTime","_getTicksUntilEvent","computedVal","segmentDur","val0","val1","onTheLineEvent","currentTick","getTicksAtTime","getTimeOfTick","tick","delta","sol1","sol2","getDurationOfTicks","computedDuration","startTicks","ticksToTime","timeToTicks","_tickOffset","setTicksAtTime","stopEvent","getLastState","tmpEvent","lastState","elapsedTicks","forEachBetween","periodStartTime","offsetEvent","getSecondsAtTime","elapsedSeconds","absoluteTicks","lastStateEvent","forEachTickBetween","maxStartTime","nextTickTime","_lastUpdate","_boundLoop","_loop","_tickSource","pause","mixin","initialValue","_root","IntervalNode","insert","updateHeight","updateMax","_rebalance","results","search","_removeNode","forEachFrom","replacement","isLeftChild","left","right","_setRoot","_replaceNodeInParent","temp","getBalance","pivotNode","balance","_rotateLeft","_rotateRight","low","allNodes","traverse","searchAfter","high","_left","_right","height","point","_eventId","_once","once","_currentId","_nextId","_nextTick","_boundRestart","_restart","_createEvents","invoke","scheduleOnce","_loopStart","_loopEnd","_scheduledEvents","_repeatedEvents","_syncedSignals","_swingAmount","_ppq","ppq","_clock","_processTick","_bindClockEvents","_timeSignature","_swingTicks","swing","swingSubdivision","tickTime","progress","amount","forEachAtTime","_addEvent","eventId","item","timeline","computedAfter","offsetTicks","timeSig","startPosition","endPosition","toNotation","toBarsBeatsSixteenths","remainingTicks","computedFreq","ratioSignal","syncedSignal","volume","_unmutedVolume","mute","_buffers","_loadingCount","urls","_bufferLoaded","expiration","anticipation","_boundDrawLoop","_drawLoop","_animationFrame","requestAnimationFrame","cancelAnimationFrame","draw","_synced","_scheduled","_syncedStart","_syncedStop","_volume","onstop","_clampToCurrentTime","sched","schedule","_start","restart","getNextState","_stop","stateEvent","startOffset","unsync","_sourceStarted","_sourceStopped","computedOffset","loopDuration","computedDur","generateWaveform","_oscillator","_partials","partials","_partialCount","partialCount","baseType","phase","oscillator","_wave","syncSignal","unsyncSignal","_periodicWaveCache","find","description","_phase","arrayA","arrayB","oscProps","isBasicType","cache","_getCachedPeriodicWave","wave","_getRealImaginary","partial","exec","fullPartials","v","periodicWaveSize","piFactor","twoPi","_inverseFFT","_shaper","mapping","setMap","normalized","oversampling","_norm","_mult","factor","_modulationScale","_modulationNode","_carrier","_modulator","modulationType","harmonicity","modulationIndex","_widthGate","_thresh","width","_triangle","_oscillators","_spread","spread","_forEach","osc","sourceType","_scale","_pulse","modulationFrequency","carrierType","OmniOscillatorSourceMap","am","fat","fm","pulse","pwm","_sourceType","substr","_createNewOscillator","_getOscType","oscType","OscConstructor","oldOsc","blockTime","sType","mType","range","valueMap","propertyKey","newValue","timeRange","_activeSources","_onload","autostart","origDuration","_onSourceEnd","implicitEnd","rate","_sig","decay","sustain","attackCurve","releaseCurve","decayCurve","direction","curveName","EnvelopeCurves","curveDef","_getCurve","_attackCurve","_setCurve","_releaseCurve","_decayCurve","velocity","currentValue","decayValue","decayStart","triggerAttack","triggerRelease","attackPortion","envelopeDuration","sustainTime","totalDuration","clone","triggerAttackRelease","cosineCurve","rippleCurve","curveLen","sineWave","stairsCurve","sineCurve","bounceCurve","invertCurve","out","bounce","In","Out","cosine","exponential","linear","ripple","sine","_original_triggerAttack","_original_triggerRelease","_syncMethod","timePosition","originalMethod","portamento","onsilence","_triggerEnvelopeAttack","setNote","_triggerEnvelopeRelease","computedFrequency","getLevelAtTime","portTime","envelope","computedAttack","computedDecay","pitchDecay","octaves","hertz","maxNote","workletContext","addToWorklet","classOrFunction","classOrFunctionToString","RegExp","registerProcessor","classDesc","processor","MessagePort","_inputs","_outputs","disposed","blockSize","params","paramName","updateParams","inputSample","generate","writeHead","delay","readHead","delayLine","DelayLine","delayedSample","urlMap","mid","notes","difference","_findClosest","closestNote","_panner","_channel","bits","_allSolos","solo","_isSoloed","_addSolo","_removeSolo","_updateSolo","_soloed","_noSolos","_solo","_panVol","muted","buses","bus","_getBus","sendKnob","immediate","play","body","querySelector","getElementById","Tone","info","modal","modalChild","preventDefault","style","display","synths","synth","$rows","querySelectorAll","scheduleRepeat","checked"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 685);\n","export const ACTIVE_AUDIO_NODE_STORE = new WeakSet();\nexport const AUDIO_NODE_CONNECTIONS_STORE = new WeakMap();\nexport const AUDIO_NODE_STORE = new WeakMap();\nexport const AUDIO_PARAM_CONNECTIONS_STORE = new WeakMap();\nexport const AUDIO_PARAM_STORE = new WeakMap();\nexport const BACKUP_NATIVE_CONTEXT_STORE = new WeakMap();\nexport const CONTEXT_STORE = new WeakMap();\nexport const EVENT_LISTENERS = new WeakMap();\nexport const CYCLE_COUNTERS = new WeakMap(); // This clunky name is borrowed from the spec. :-)\n\nexport const NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS = new WeakMap();\nexport const NODE_TO_PROCESSOR_MAPS = new WeakMap();","import { assignNativeAudioNodeOption } from './assign-native-audio-node-option';\nexport const assignNativeAudioNodeOptions = (nativeAudioNode, options) => {\n  assignNativeAudioNodeOption(nativeAudioNode, options, 'channelCount');\n  assignNativeAudioNodeOption(nativeAudioNode, options, 'channelCountMode');\n  assignNativeAudioNodeOption(nativeAudioNode, options, 'channelInterpretation');\n};","export const MOST_NEGATIVE_SINGLE_FLOAT = -3.4028234663852886e38;\nexport const MOST_POSITIVE_SINGLE_FLOAT = -MOST_NEGATIVE_SINGLE_FLOAT;","export const isOwnedByContext = (nativeAudioNode, nativeContext) => {\n  return nativeAudioNode.context === nativeContext;\n};","export const assignNativeAudioNodeOption = (nativeAudioNode, options, option) => {\n  const value = options[option];\n\n  if (value !== undefined && value !== nativeAudioNode[option]) {\n    nativeAudioNode[option] = value;\n  }\n};","export const assignNativeAudioNodeAudioParamValue = (nativeAudioNode, options, audioParam) => {\n  const value = options[audioParam];\n\n  if (value !== undefined && value !== nativeAudioNode[audioParam].value) {\n    nativeAudioNode[audioParam].value = value;\n  }\n};","import { AUDIO_NODE_STORE } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getNativeAudioNode = audioNode => {\n  return getValueForKey(AUDIO_NODE_STORE, audioNode);\n};","export const createInvalidStateError = () => {\n  try {\n    return new DOMException('', 'InvalidStateError');\n  } catch (err) {\n    // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n    err.code = 11;\n    err.name = 'InvalidStateError';\n    return err;\n  }\n};","import { AUDIO_NODE_CONNECTIONS_STORE } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getAudioNodeConnections = audioNode => {\n  return getValueForKey(AUDIO_NODE_CONNECTIONS_STORE, audioNode);\n};","export const getValueForKey = (map, key) => {\n  const value = map.get(key);\n\n  if (value === undefined) {\n    throw new Error('A value with the given key could not be found.');\n  }\n\n  return value;\n};","export const createNotSupportedError = () => {\n  try {\n    return new DOMException('', 'NotSupportedError');\n  } catch (err) {\n    // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n    err.code = 9;\n    err.name = 'NotSupportedError';\n    return err;\n  }\n};","export const interceptConnections = (original, interceptor) => {\n  original.connect = interceptor.connect.bind(interceptor);\n  original.disconnect = interceptor.disconnect.bind(interceptor);\n  return original;\n};","export const isNativeAudioNodeFaker = nativeAudioNodeOrNativeAudioNodeFaker => {\n  return 'inputs' in nativeAudioNodeOrNativeAudioNodeFaker;\n};","import { createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent } from 'automation-events';\nimport { createAbortError } from './factories/abort-error';\nimport { createAddAudioNodeConnections } from './factories/add-audio-node-connections';\nimport { createAddAudioParamConnections } from './factories/add-audio-param-connections';\nimport { createAddAudioWorkletModule } from './factories/add-audio-worklet-module';\nimport { createAddSilentConnection } from './factories/add-silent-connection';\nimport { createAddUnrenderedAudioWorkletNode } from './factories/add-unrendered-audio-worklet-node';\nimport { createAnalyserNodeConstructor } from './factories/analyser-node-constructor';\nimport { createAnalyserNodeRendererFactory } from './factories/analyser-node-renderer-factory';\nimport { createAudioBufferConstructor } from './factories/audio-buffer-constructor';\nimport { createAudioBufferSourceNodeConstructor } from './factories/audio-buffer-source-node-constructor';\nimport { createAudioBufferSourceNodeRendererFactory } from './factories/audio-buffer-source-node-renderer-factory';\nimport { createAudioContextConstructor } from './factories/audio-context-constructor';\nimport { createAudioDestinationNodeConstructor } from './factories/audio-destination-node-constructor';\nimport { createAudioDestinationNodeRenderer } from './factories/audio-destination-node-renderer-factory';\nimport { createAudioListenerFactory } from './factories/audio-listener-factory';\nimport { createAudioNodeConstructor } from './factories/audio-node-constructor';\nimport { createAudioParamFactory } from './factories/audio-param-factory';\nimport { createAudioParamRenderer } from './factories/audio-param-renderer';\nimport { createAudioWorkletNodeConstructor } from './factories/audio-worklet-node-constructor';\nimport { createAudioWorkletNodeRendererFactory } from './factories/audio-worklet-node-renderer-factory';\nimport { createBaseAudioContextConstructor } from './factories/base-audio-context-constructor';\nimport { createBiquadFilterNodeConstructor } from './factories/biquad-filter-node-constructor';\nimport { createBiquadFilterNodeRendererFactory } from './factories/biquad-filter-node-renderer-factory';\nimport { createCacheTestResult } from './factories/cache-test-result';\nimport { createChannelMergerNodeConstructor } from './factories/channel-merger-node-constructor';\nimport { createChannelMergerNodeRendererFactory } from './factories/channel-merger-node-renderer-factory';\nimport { createChannelSplitterNodeConstructor } from './factories/channel-splitter-node-constructor';\nimport { createChannelSplitterNodeRendererFactory } from './factories/channel-splitter-node-renderer-factory';\nimport { createConnectAudioParam } from './factories/connect-audio-param';\nimport { createConnectMultipleOutputs } from './factories/connect-multiple-outputs';\nimport { createConnectedNativeAudioBufferSourceNodeFactory } from './factories/connected-native-audio-buffer-source-node-factory';\nimport { createConstantSourceNodeConstructor } from './factories/constant-source-node-constructor';\nimport { createConstantSourceNodeRendererFactory } from './factories/constant-source-node-renderer-factory';\nimport { createConvertNumberToUnsignedLong } from './factories/convert-number-to-unsigned-long';\nimport { createConvolverNodeConstructor } from './factories/convolver-node-constructor';\nimport { createConvolverNodeRendererFactory } from './factories/convolver-node-renderer-factory';\nimport { createCreateNativeOfflineAudioContext } from './factories/create-native-offline-audio-context';\nimport { createDataCloneError } from './factories/data-clone-error';\nimport { createDecodeAudioData } from './factories/decode-audio-data';\nimport { createDecrementCycleCounter } from './factories/decrement-cycle-counter';\nimport { createDelayNodeConstructor } from './factories/delay-node-constructor';\nimport { createDelayNodeRendererFactory } from './factories/delay-node-renderer-factory';\nimport { createDeleteUnrenderedAudioWorkletNode } from './factories/delete-unrendered-audio-worklet-node';\nimport { createDetectCycles } from './factories/detect-cycles';\nimport { createDisconnectMultipleOutputs } from './factories/disconnect-multiple-outputs';\nimport { createDynamicsCompressorNodeConstructor } from './factories/dynamics-compressor-node-constructor';\nimport { createDynamicsCompressorNodeRendererFactory } from './factories/dynamics-compressor-node-renderer-factory';\nimport { createEncodingError } from './factories/encoding-error';\nimport { createEvaluateSource } from './factories/evaluate-source';\nimport { createEventTargetConstructor } from './factories/event-target-constructor';\nimport { createExposeCurrentFrameAndCurrentTime } from './factories/expose-current-frame-and-current-time';\nimport { createFetchSource } from './factories/fetch-source';\nimport { createGainNodeConstructor } from './factories/gain-node-constructor';\nimport { createGainNodeRendererFactory } from './factories/gain-node-renderer-factory';\nimport { createGetAudioNodeRenderer } from './factories/get-audio-node-renderer';\nimport { createGetAudioParamRenderer } from './factories/get-audio-param-renderer';\nimport { createGetBackupNativeContext } from './factories/get-backup-native-context';\nimport { createGetNativeContext } from './factories/get-native-context';\nimport { createGetUnrenderedAudioWorkletNodes } from './factories/get-unrendered-audio-worklet-nodes';\nimport { createIIRFilterNodeConstructor } from './factories/iir-filter-node-constructor';\nimport { createIIRFilterNodeRendererFactory } from './factories/iir-filter-node-renderer-factory';\nimport { createIncrementCycleCounterFactory } from './factories/increment-cycle-counter-factory';\nimport { createIndexSizeError } from './factories/index-size-error';\nimport { createInvalidAccessError } from './factories/invalid-access-error';\nimport { createInvalidStateError } from './factories/invalid-state-error';\nimport { createIsAnyAudioContext } from './factories/is-any-audio-context';\nimport { createIsAnyAudioNode } from './factories/is-any-audio-node';\nimport { createIsAnyAudioParam } from './factories/is-any-audio-param';\nimport { createIsAnyOfflineAudioContext } from './factories/is-any-offline-audio-context';\nimport { createIsNativeAudioContext } from './factories/is-native-audio-context';\nimport { createIsNativeAudioNode } from './factories/is-native-audio-node';\nimport { createIsNativeAudioParam } from './factories/is-native-audio-param';\nimport { createIsNativeContext } from './factories/is-native-context';\nimport { createIsNativeOfflineAudioContext } from './factories/is-native-offline-audio-context';\nimport { createIsSecureContext } from './factories/is-secure-context';\nimport { createIsSupportedPromise } from './factories/is-supported-promise';\nimport { createMediaElementAudioSourceNodeConstructor } from './factories/media-element-audio-source-node-constructor';\nimport { createMediaStreamAudioDestinationNodeConstructor } from './factories/media-stream-audio-destination-node-constructor';\nimport { createMediaStreamAudioSourceNodeConstructor } from './factories/media-stream-audio-source-node-constructor';\nimport { createMediaStreamTrackAudioSourceNodeConstructor } from './factories/media-stream-track-audio-source-node-constructor';\nimport { createMinimalAudioContextConstructor } from './factories/minimal-audio-context-constructor';\nimport { createMinimalBaseAudioContextConstructor } from './factories/minimal-base-audio-context-constructor';\nimport { createMinimalOfflineAudioContextConstructor } from './factories/minimal-offline-audio-context-constructor';\nimport { createMonitorConnections } from './factories/monitor-connections';\nimport { createNativeAnalyserNodeFactory } from './factories/native-analyser-node-factory';\nimport { createNativeAudioBufferConstructor } from './factories/native-audio-buffer-constructor';\nimport { createNativeAudioBufferSourceNodeFactory } from './factories/native-audio-buffer-source-node-factory';\nimport { createNativeAudioContextConstructor } from './factories/native-audio-context-constructor';\nimport { createNativeAudioDestinationNodeFactory } from './factories/native-audio-destination-node';\nimport { createNativeAudioNodeFactory } from './factories/native-audio-node-factory';\nimport { createNativeAudioWorkletNodeConstructor } from './factories/native-audio-worklet-node-constructor';\nimport { createNativeAudioWorkletNodeFactory } from './factories/native-audio-worklet-node-factory';\nimport { createNativeAudioWorkletNodeFakerFactory } from './factories/native-audio-worklet-node-faker-factory';\nimport { createNativeBiquadFilterNodeFactory } from './factories/native-biquad-filter-node-factory';\nimport { createNativeChannelMergerNodeFactory } from './factories/native-channel-merger-node-factory';\nimport { createNativeChannelSplitterNodeFactory } from './factories/native-channel-splitter-node-factory';\nimport { createNativeConstantSourceNodeFactory } from './factories/native-constant-source-node-factory';\nimport { createNativeConstantSourceNodeFakerFactory } from './factories/native-constant-source-node-faker-factory';\nimport { createNativeConvolverNodeFactory } from './factories/native-convolver-node-factory';\nimport { createNativeConvolverNodeFakerFactory } from './factories/native-convolver-node-faker-factory';\nimport { createNativeDelayNodeFactory } from './factories/native-delay-node-factory';\nimport { createNativeDynamicsCompressorNodeFactory } from './factories/native-dynamics-compressor-node-factory';\nimport { createNativeGainNodeFactory } from './factories/native-gain-node-factory';\nimport { createNativeIIRFilterNodeFactory } from './factories/native-iir-filter-node-factory';\nimport { createNativeIIRFilterNodeFakerFactory } from './factories/native-iir-filter-node-faker-factory';\nimport { createNativeMediaElementAudioSourceNodeFactory } from './factories/native-media-element-audio-source-node-factory';\nimport { createNativeMediaStreamAudioDestinationNodeFactory } from './factories/native-media-stream-audio-destination-node-factory';\nimport { createNativeMediaStreamAudioSourceNodeFactory } from './factories/native-media-stream-audio-source-node-factory';\nimport { createNativeMediaStreamTrackAudioSourceNodeFactory } from './factories/native-media-stream-track-audio-source-node-factory';\nimport { createNativeOfflineAudioContextConstructor } from './factories/native-offline-audio-context-constructor';\nimport { createNativeOscillatorNodeFactory } from './factories/native-oscillator-node-factory';\nimport { createNativePannerNodeFactory } from './factories/native-panner-node-factory';\nimport { createNativePannerNodeFakerFactory } from './factories/native-panner-node-faker-factory';\nimport { createNativePeriodicWaveFactory } from './factories/native-periodic-wave-factory';\nimport { createNativeScriptProcessorNodeFactory } from './factories/native-script-processor-node-factory';\nimport { createNativeStereoPannerNodeFactory } from './factories/native-stereo-panner-node-factory';\nimport { createNativeStereoPannerNodeFakerFactory } from './factories/native-stereo-panner-node-faker-factory';\nimport { createNativeWaveShaperNodeFactory } from './factories/native-wave-shaper-node-factory';\nimport { createNativeWaveShaperNodeFakerFactory } from './factories/native-wave-shaper-node-faker-factory';\nimport { createNotSupportedError } from './factories/not-supported-error';\nimport { createOfflineAudioContextConstructor } from './factories/offline-audio-context-constructor';\nimport { createOscillatorNodeConstructor } from './factories/oscillator-node-constructor';\nimport { createOscillatorNodeRendererFactory } from './factories/oscillator-node-renderer-factory';\nimport { createPannerNodeConstructor } from './factories/panner-node-constructor';\nimport { createPannerNodeRendererFactory } from './factories/panner-node-renderer-factory';\nimport { createPeriodicWaveConstructor } from './factories/periodic-wave-constructor';\nimport { createRenderAutomation } from './factories/render-automation';\nimport { createRenderInputsOfAudioNode } from './factories/render-inputs-of-audio-node';\nimport { createRenderInputsOfAudioParam } from './factories/render-inputs-of-audio-param';\nimport { createRenderNativeOfflineAudioContext } from './factories/render-native-offline-audio-context';\nimport { createStartRendering } from './factories/start-rendering';\nimport { createStereoPannerNodeConstructor } from './factories/stereo-panner-node-constructor';\nimport { createStereoPannerNodeRendererFactory } from './factories/stereo-panner-node-renderer-factory';\nimport { createTestAudioBufferConstructorSupport } from './factories/test-audio-buffer-constructor-support';\nimport { createTestAudioBufferCopyChannelMethodsSubarraySupport } from './factories/test-audio-buffer-copy-channel-methods-subarray-support';\nimport { createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport } from './factories/test-audio-buffer-source-node-start-method-consecutive-calls-support';\nimport { createTestAudioBufferSourceNodeStartMethodDurationParameterSupport } from './factories/test-audio-buffer-source-node-start-method-duration-parameter-support';\nimport { createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport } from './factories/test-audio-buffer-source-node-start-method-offset-clamping-support';\nimport { createTestAudioBufferSourceNodeStopMethodNullifiedBufferSupport } from './factories/test-audio-buffer-source-node-stop-method-nullified-buffer-support';\nimport { createTestAudioContextCloseMethodSupport } from './factories/test-audio-context-close-method-support';\nimport { createTestAudioContextDecodeAudioDataMethodTypeErrorSupport } from './factories/test-audio-context-decode-audio-data-method-type-error-support';\nimport { createTestAudioContextOptionsSupport } from './factories/test-audio-context-options-support';\nimport { createTestAudioNodeConnectMethodSupport } from './factories/test-audio-node-connect-method-support';\nimport { createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport } from './factories/test-audio-scheduled-source-node-start-method-negative-parameters-support';\nimport { createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport } from './factories/test-audio-scheduled-source-node-stop-method-consecutive-calls-support';\nimport { createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport } from './factories/test-audio-scheduled-source-node-stop-method-negative-parameters-support';\nimport { createTestAudioWorkletProcessorNoOutputsSupport } from './factories/test-audio-worklet-processor-no-outputs-support';\nimport { createTestChannelMergerNodeChannelCountSupport } from './factories/test-channel-merger-node-channel-count-support';\nimport { createTestConstantSourceNodeAccurateSchedulingSupport } from './factories/test-constant-source-node-accurate-scheduling-support';\nimport { createTestConvolverNodeBufferReassignabilitySupport } from './factories/test-convolver-node-buffer-reassignability-support';\nimport { createTestIsSecureContextSupport } from './factories/test-is-secure-context-support';\nimport { createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport } from './factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support';\nimport { createTestOfflineAudioContextCurrentTimeSupport } from './factories/test-offline-audio-context-current-time-support';\nimport { createTestStereoPannerNodeDefaultValueSupport } from './factories/test-stereo-panner-node-default-value-support';\nimport { createUnknownError } from './factories/unknown-error';\nimport { createWaveShaperNodeConstructor } from './factories/wave-shaper-node-constructor';\nimport { createWaveShaperNodeRendererFactory } from './factories/wave-shaper-node-renderer-factory';\nimport { createWindow } from './factories/window';\nimport { createWrapAudioBufferCopyChannelMethods } from './factories/wrap-audio-buffer-copy-channel-methods';\nimport { createWrapAudioBufferCopyChannelMethodsOutOfBounds } from './factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds';\nimport { createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer } from './factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer';\nimport { createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls } from './factories/wrap-audio-scheduled-source-node-stop-method-consecutive-calls';\nimport { createWrapChannelMergerNode } from './factories/wrap-channel-merger-node';\nimport { AUDIO_NODE_CONNECTIONS_STORE, AUDIO_NODE_STORE, AUDIO_PARAM_CONNECTIONS_STORE, AUDIO_PARAM_STORE, CONTEXT_STORE, CYCLE_COUNTERS } from './globals';\nimport { connectNativeAudioNodeToNativeAudioNode } from './helpers/connect-native-audio-node-to-native-audio-node';\nimport { disconnectNativeAudioNodeFromNativeAudioNode } from './helpers/disconnect-native-audio-node-from-native-audio-node';\nimport { getAudioNodeConnections } from './helpers/get-audio-node-connections';\nimport { getAudioParamConnections } from './helpers/get-audio-param-connections';\nimport { getNativeAudioNode } from './helpers/get-native-audio-node';\nimport { getNativeAudioParam } from './helpers/get-native-audio-param';\nimport { getValueForKey } from './helpers/get-value-for-key';\nimport { insertElementInSet } from './helpers/insert-element-in-set';\nimport { isActiveAudioNode } from './helpers/is-active-audio-node';\nimport { isDCCurve } from './helpers/is-dc-curve';\nimport { isPartOfACycle } from './helpers/is-part-of-a-cycle';\nimport { overwriteAccessors } from './helpers/overwrite-accessors';\nimport { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from './helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { testPromiseSupport } from './helpers/test-promise-support';\nimport { testTransferablesSupport } from './helpers/test-transferables-support';\nimport { wrapAudioBufferSourceNodeStartMethodOffsetClamping } from './helpers/wrap-audio-buffer-source-node-start-method-offset-clamping';\nimport { wrapEventListener } from './helpers/wrap-event-listener';\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\n\nexport * from './interfaces/index';\nexport * from './types/index';\nconst cacheTestResult = createCacheTestResult(new Map(), new WeakMap());\nconst window = createWindow();\nconst nativeOfflineAudioContextConstructor = createNativeOfflineAudioContextConstructor(window);\nconst isNativeOfflineAudioContext = createIsNativeOfflineAudioContext(nativeOfflineAudioContextConstructor);\nconst nativeAudioContextConstructor = createNativeAudioContextConstructor(window);\nconst getBackupNativeContext = createGetBackupNativeContext(isNativeOfflineAudioContext, nativeAudioContextConstructor, nativeOfflineAudioContextConstructor);\nconst createNativeAudioNode = createNativeAudioNodeFactory(getBackupNativeContext);\nconst createNativeAnalyserNode = createNativeAnalyserNodeFactory(cacheTestResult, createIndexSizeError, createNativeAudioNode);\nconst getAudioNodeRenderer = createGetAudioNodeRenderer(getAudioNodeConnections);\nconst renderInputsOfAudioNode = createRenderInputsOfAudioNode(getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle);\nconst createAnalyserNodeRenderer = createAnalyserNodeRendererFactory(createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst auxiliaryGainNodeStore = new WeakMap();\nconst getNativeContext = createGetNativeContext(CONTEXT_STORE);\nconst audioParamAudioNodeStore = new WeakMap();\nconst eventTargetConstructor = createEventTargetConstructor(wrapEventListener);\nconst isNativeAudioContext = createIsNativeAudioContext(nativeAudioContextConstructor);\nconst isNativeAudioNode = createIsNativeAudioNode(window);\nconst isNativeAudioParam = createIsNativeAudioParam(window);\nconst audioNodeConstructor = createAudioNodeConstructor(createAddAudioNodeConnections(AUDIO_NODE_CONNECTIONS_STORE), auxiliaryGainNodeStore, cacheTestResult, createIncrementCycleCounterFactory(CYCLE_COUNTERS, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, isActiveAudioNode), createIndexSizeError, createInvalidAccessError, createNotSupportedError, createDecrementCycleCounter(connectNativeAudioNodeToNativeAudioNode, CYCLE_COUNTERS, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext), createDetectCycles(audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey), eventTargetConstructor, getNativeContext, isNativeAudioContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext);\nconst analyserNodeConstructor = createAnalyserNodeConstructor(audioNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext);\nexport { analyserNodeConstructor as AnalyserNode };\nconst audioBufferStore = new WeakSet();\nconst nativeAudioBufferConstructor = createNativeAudioBufferConstructor(window);\nconst convertNumberToUnsignedLong = createConvertNumberToUnsignedLong(new Uint32Array(1));\nconst wrapAudioBufferCopyChannelMethods = createWrapAudioBufferCopyChannelMethods(convertNumberToUnsignedLong, createIndexSizeError);\nconst wrapAudioBufferCopyChannelMethodsOutOfBounds = createWrapAudioBufferCopyChannelMethodsOutOfBounds(convertNumberToUnsignedLong);\nconst audioBufferConstructor = createAudioBufferConstructor(audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, createTestAudioBufferConstructorSupport(nativeAudioBufferConstructor), wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nexport { audioBufferConstructor as AudioBuffer };\nconst createNativeGainNode = createNativeGainNodeFactory(createNativeAudioNode);\nconst addSilentConnection = createAddSilentConnection(createNativeGainNode);\nconst testAudioScheduledSourceNodeStartMethodNegativeParametersSupport = createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport(createNativeAudioNode);\nconst testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(createNativeAudioNode);\nconst testAudioScheduledSourceNodeStopMethodNegativeParametersSupport = createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport(createNativeAudioNode);\nconst wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(createNativeAudioNode);\nconst renderInputsOfAudioParam = createRenderInputsOfAudioParam(getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle);\nconst connectAudioParam = createConnectAudioParam(renderInputsOfAudioParam);\nconst createNativeAudioBufferSourceNode = createNativeAudioBufferSourceNodeFactory(addSilentConnection, cacheTestResult, createNativeAudioNode, createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(createNativeAudioNode), createTestAudioBufferSourceNodeStartMethodDurationParameterSupport(nativeOfflineAudioContextConstructor), createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport(createNativeAudioNode), createTestAudioBufferSourceNodeStopMethodNullifiedBufferSupport(createNativeAudioNode), testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClamping, createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer(overwriteAccessors), wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst renderAutomation = createRenderAutomation(createGetAudioParamRenderer(getAudioParamConnections), renderInputsOfAudioParam);\nconst createAudioBufferSourceNodeRenderer = createAudioBufferSourceNodeRendererFactory(connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst createAudioParam = createAudioParamFactory(createAddAudioParamConnections(AUDIO_PARAM_CONNECTIONS_STORE), audioParamAudioNodeStore, AUDIO_PARAM_STORE, createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor);\nconst audioBufferSourceNodeConstructor = createAudioBufferSourceNodeConstructor(audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nexport { audioBufferSourceNodeConstructor as AudioBufferSourceNode };\nconst audioDestinationNodeConstructor = createAudioDestinationNodeConstructor(audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNodeFactory(createNativeGainNode, overwriteAccessors), getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode);\nconst createNativeBiquadFilterNode = createNativeBiquadFilterNodeFactory(createNativeAudioNode);\nconst createBiquadFilterNodeRenderer = createBiquadFilterNodeRendererFactory(connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst biquadFilterNodeConstructor = createBiquadFilterNodeConstructor(audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext);\nconst monitorConnections = createMonitorConnections(insertElementInSet, isNativeAudioNode);\nconst wrapChannelMergerNode = createWrapChannelMergerNode(createInvalidStateError, createNativeAudioNode, monitorConnections);\nconst createNativeChannelMergerNode = createNativeChannelMergerNodeFactory(createNativeAudioNode, wrapChannelMergerNode);\nconst createChannelMergerNodeRenderer = createChannelMergerNodeRendererFactory(createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst channelMergerNodeConstructor = createChannelMergerNodeConstructor(audioNodeConstructor, createChannelMergerNodeRenderer, createNativeChannelMergerNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeChannelSplitterNode = createNativeChannelSplitterNodeFactory(createNativeAudioNode);\nconst createChannelSplitterNodeRenderer = createChannelSplitterNodeRendererFactory(createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst channelSplitterNodeConstructor = createChannelSplitterNodeConstructor(audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeConstantSourceNodeFaker = createNativeConstantSourceNodeFakerFactory(addSilentConnection, createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections);\nconst createNativeConstantSourceNode = createNativeConstantSourceNodeFactory(addSilentConnection, cacheTestResult, createNativeAudioNode, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport);\nconst createConstantSourceNodeRenderer = createConstantSourceNodeRendererFactory(connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst constantSourceNodeConstructor = createConstantSourceNodeConstructor(audioNodeConstructor, createAudioParam, createConstantSourceNodeRenderer, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nconst createNativeConvolverNodeFaker = createNativeConvolverNodeFakerFactory(createNativeAudioNode, createNativeGainNode, monitorConnections);\nconst createNativeConvolverNode = createNativeConvolverNodeFactory(createNativeAudioNode, createNativeConvolverNodeFaker, createNotSupportedError, overwriteAccessors);\nconst createConvolverNodeRenderer = createConvolverNodeRendererFactory(createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst convolverNodeConstructor = createConvolverNodeConstructor(audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeDelayNode = createNativeDelayNodeFactory(createNativeAudioNode);\nconst createDelayNodeRenderer = createDelayNodeRendererFactory(connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst delayNodeConstructor = createDelayNodeConstructor(audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeDynamicsCompressorNode = createNativeDynamicsCompressorNodeFactory(createNativeAudioNode, createNotSupportedError);\nconst createDynamicsCompressorNodeRenderer = createDynamicsCompressorNodeRendererFactory(connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst dynamicsCompressorNodeConstructor = createDynamicsCompressorNodeConstructor(audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext);\nconst createGainNodeRenderer = createGainNodeRendererFactory(connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst gainNodeConstructor = createGainNodeConstructor(audioNodeConstructor, createAudioParam, createGainNodeRenderer, createNativeGainNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeScriptProcessorNode = createNativeScriptProcessorNodeFactory(createNativeAudioNode);\nconst createNativeIIRFilterNodeFaker = createNativeIIRFilterNodeFakerFactory(createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError);\nconst renderNativeOfflineAudioContext = createRenderNativeOfflineAudioContext(cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, createTestOfflineAudioContextCurrentTimeSupport(createNativeGainNode, nativeOfflineAudioContextConstructor));\nconst createIIRFilterNodeRenderer = createIIRFilterNodeRendererFactory(createNativeAudioBufferSourceNode, createNativeAudioNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\nconst createNativeIIRFilterNode = createNativeIIRFilterNodeFactory(createNativeAudioNode, createNativeIIRFilterNodeFaker);\nconst iIRFilterNodeConstructor = createIIRFilterNodeConstructor(audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nconst createAudioListener = createAudioListenerFactory(createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, isNativeOfflineAudioContext);\nconst unrenderedAudioWorkletNodeStore = new WeakMap();\nconst minimalBaseAudioContextConstructor = createMinimalBaseAudioContextConstructor(audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, isNativeOfflineAudioContext, unrenderedAudioWorkletNodeStore, wrapEventListener);\nconst createNativeOscillatorNode = createNativeOscillatorNodeFactory(addSilentConnection, cacheTestResult, createNativeAudioNode, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst createOscillatorNodeRenderer = createOscillatorNodeRendererFactory(connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst oscillatorNodeConstructor = createOscillatorNodeConstructor(audioNodeConstructor, createAudioParam, createInvalidStateError, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nconst createConnectedNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNodeFactory(createNativeAudioBufferSourceNode);\nconst createNativeWaveShaperNodeFaker = createNativeWaveShaperNodeFakerFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeAudioNode, createNativeGainNode, isDCCurve, monitorConnections);\nconst createNativeWaveShaperNode = createNativeWaveShaperNodeFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeAudioNode, createNativeWaveShaperNodeFaker, isDCCurve, monitorConnections, overwriteAccessors);\nconst createNativePannerNodeFaker = createNativePannerNodeFakerFactory(connectNativeAudioNodeToNativeAudioNode, createInvalidStateError, createNativeAudioNode, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError, disconnectNativeAudioNodeFromNativeAudioNode, monitorConnections);\nconst createNativePannerNode = createNativePannerNodeFactory(createNativeAudioNode, createNativePannerNodeFaker);\nconst createPannerNodeRenderer = createPannerNodeRendererFactory(connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeGainNode, createNativePannerNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\nconst pannerNodeConstructor = createPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nconst createNativePeriodicWave = createNativePeriodicWaveFactory(getBackupNativeContext);\nconst periodicWaveConstructor = createPeriodicWaveConstructor(createNativePeriodicWave, getNativeContext, new WeakSet());\nconst nativeStereoPannerNodeFakerFactory = createNativeStereoPannerNodeFakerFactory(createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError, monitorConnections);\nconst createNativeStereoPannerNode = createNativeStereoPannerNodeFactory(createNativeAudioNode, nativeStereoPannerNodeFakerFactory, createNotSupportedError);\nconst createStereoPannerNodeRenderer = createStereoPannerNodeRendererFactory(connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst stereoPannerNodeConstructor = createStereoPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nconst createWaveShaperNodeRenderer = createWaveShaperNodeRendererFactory(createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst waveShaperNodeConstructor = createWaveShaperNodeConstructor(audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nconst isSecureContext = createIsSecureContext(window);\nconst exposeCurrentFrameAndCurrentTime = createExposeCurrentFrameAndCurrentTime(window); // The addAudioWorkletModule() function is only available in a SecureContext.\n\nexport const addAudioWorkletModule = isSecureContext ? createAddAudioWorkletModule(createNotSupportedError, createEvaluateSource(window), exposeCurrentFrameAndCurrentTime, createFetchSource(createAbortError), getBackupNativeContext, getNativeContext, new WeakMap(), new WeakMap(), // @todo window is guaranteed to be defined because isSecureContext checks that as well.\nwindow) : undefined;\nconst isNativeContext = createIsNativeContext(isNativeAudioContext, isNativeOfflineAudioContext);\nexport const decodeAudioData = createDecodeAudioData(audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, new WeakSet(), getNativeContext, isNativeContext, isNativeOfflineAudioContext, nativeOfflineAudioContextConstructor, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nconst baseAudioContextConstructor = createBaseAudioContextConstructor(addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor);\nconst createNativeMediaElementAudioSourceNode = createNativeMediaElementAudioSourceNodeFactory(createNativeAudioNode);\nconst mediaElementAudioSourceNodeConstructor = createMediaElementAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaElementAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeMediaStreamAudioDestinationNode = createNativeMediaStreamAudioDestinationNodeFactory(createNativeAudioNode, createNotSupportedError);\nconst mediaStreamAudioDestinationNodeConstructor = createMediaStreamAudioDestinationNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeMediaStreamAudioSourceNode = createNativeMediaStreamAudioSourceNodeFactory(createNativeAudioNode);\nconst mediaStreamAudioSourceNodeConstructor = createMediaStreamAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNodeFactory(createInvalidStateError, createNativeAudioNode, isNativeOfflineAudioContext);\nconst mediaStreamTrackAudioSourceNodeConstructor = createMediaStreamTrackAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamTrackAudioSourceNode, getNativeContext);\nconst audioContextConstructor = createAudioContextConstructor(baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioDestinationNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor);\nexport { audioContextConstructor as AudioContext };\nconst getUnrenderedAudioWorkletNodes = createGetUnrenderedAudioWorkletNodes(unrenderedAudioWorkletNodeStore);\nconst addUnrenderedAudioWorkletNode = createAddUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);\nconst connectMultipleOutputs = createConnectMultipleOutputs(createIndexSizeError);\nconst deleteUnrenderedAudioWorkletNode = createDeleteUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);\nconst disconnectMultipleOutputs = createDisconnectMultipleOutputs(createIndexSizeError);\nconst createNativeAudioWorkletNodeFaker = createNativeAudioWorkletNodeFakerFactory(auxiliaryGainNodeStore, connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, monitorConnections);\nconst createNativeAudioWorkletNode = createNativeAudioWorkletNodeFactory(createInvalidStateError, createNativeAudioNode, createNativeAudioWorkletNodeFaker, createNativeGainNode, createNotSupportedError, monitorConnections);\nconst nativeAudioWorkletNodeConstructor = createNativeAudioWorkletNodeConstructor(window);\nconst createAudioWorkletNodeRenderer = createAudioWorkletNodeRendererFactory(connectAudioParam, connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, deleteUnrenderedAudioWorkletNode, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getNativeAudioNode, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext); // The AudioWorkletNode constructor is only available in a SecureContext.\n\nconst audioWorkletNodeConstructor = isSecureContext ? createAudioWorkletNodeConstructor(addUnrenderedAudioWorkletNode, audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, wrapEventListener) : undefined;\nexport { audioWorkletNodeConstructor as AudioWorkletNode };\nexport { biquadFilterNodeConstructor as BiquadFilterNode };\nexport { channelMergerNodeConstructor as ChannelMergerNode };\nexport { channelSplitterNodeConstructor as ChannelSplitterNode };\nexport { convolverNodeConstructor as ConvolverNode };\nexport { constantSourceNodeConstructor as ConstantSourceNode };\nexport { delayNodeConstructor as DelayNode };\nexport { dynamicsCompressorNodeConstructor as DynamicsCompressorNode };\nexport { gainNodeConstructor as GainNode };\nexport { iIRFilterNodeConstructor as IIRFilterNode };\nexport { mediaElementAudioSourceNodeConstructor as MediaElementAudioSourceNode };\nexport { mediaStreamAudioDestinationNodeConstructor as MediaStreamAudioDestinationNode };\nexport { mediaStreamAudioSourceNodeConstructor as MediaStreamAudioSourceNode };\nexport { mediaStreamTrackAudioSourceNodeConstructor as MediaStreamTrackAudioSourceNode };\nconst minimalAudioContextConstructor = createMinimalAudioContextConstructor(createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor);\nexport { minimalAudioContextConstructor as MinimalAudioContext };\nconst createNativeOfflineAudioContext = createCreateNativeOfflineAudioContext(createNotSupportedError, nativeOfflineAudioContextConstructor);\nconst startRendering = createStartRendering(audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nconst minimalOfflineAudioContextConstructor = createMinimalOfflineAudioContextConstructor(cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering);\nexport { minimalOfflineAudioContextConstructor as MinimalOfflineAudioContext };\nconst offlineAudioContextConstructor = createOfflineAudioContextConstructor(baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering);\nexport { offlineAudioContextConstructor as OfflineAudioContext };\nexport { oscillatorNodeConstructor as OscillatorNode };\nexport { pannerNodeConstructor as PannerNode };\nexport { periodicWaveConstructor as PeriodicWave };\nexport { stereoPannerNodeConstructor as StereoPannerNode };\nexport { waveShaperNodeConstructor as WaveShaperNode };\nexport const isAnyAudioContext = createIsAnyAudioContext(CONTEXT_STORE, isNativeAudioContext);\nexport const isAnyAudioNode = createIsAnyAudioNode(AUDIO_NODE_STORE, isNativeAudioNode);\nexport const isAnyAudioParam = createIsAnyAudioParam(AUDIO_PARAM_STORE, isNativeAudioParam);\nexport const isAnyOfflineAudioContext = createIsAnyOfflineAudioContext(CONTEXT_STORE, isNativeOfflineAudioContext);\nexport const isSupported = () => createIsSupportedPromise(cacheTestResult, createTestAudioBufferCopyChannelMethodsSubarraySupport(nativeOfflineAudioContextConstructor), createTestAudioContextCloseMethodSupport(nativeAudioContextConstructor), createTestAudioContextDecodeAudioDataMethodTypeErrorSupport(nativeOfflineAudioContextConstructor), createTestAudioContextOptionsSupport(nativeAudioContextConstructor), createTestAudioNodeConnectMethodSupport(nativeOfflineAudioContextConstructor), createTestAudioWorkletProcessorNoOutputsSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor), createTestChannelMergerNodeChannelCountSupport(createNativeAudioNode, nativeOfflineAudioContextConstructor), createTestConstantSourceNodeAccurateSchedulingSupport(createNativeAudioNode, nativeOfflineAudioContextConstructor), createTestConvolverNodeBufferReassignabilitySupport(nativeOfflineAudioContextConstructor), createTestIsSecureContextSupport(window), createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport(nativeAudioContextConstructor), createTestStereoPannerNodeDefaultValueSupport(nativeOfflineAudioContextConstructor), testTransferablesSupport);","export const testPromiseSupport = nativeContext => {\n  // This 12 numbers represent the 48 bytes of an empty WAVE file with a single sample.\n  const uint32Array = new Uint32Array([1179011410, 40, 1163280727, 544501094, 16, 131073, 44100, 176400, 1048580, 1635017060, 4, 0]);\n\n  try {\n    // Bug #1: Safari requires a successCallback.\n    const promise = nativeContext.decodeAudioData(uint32Array.buffer, () => {// Ignore the success callback.\n    });\n\n    if (promise === undefined) {\n      return false;\n    }\n\n    promise.catch(() => {// Ignore rejected errors.\n    });\n    return true;\n  } catch {// Ignore errors.\n  }\n\n  return false;\n};","export const createIndexSizeError = () => {\n  try {\n    return new DOMException('', 'IndexSizeError');\n  } catch (err) {\n    // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n    err.code = 1;\n    err.name = 'IndexSizeError';\n    return err;\n  }\n};","export const insertElementInSet = (set, element, predicate, ignoreDuplicates) => {\n  for (const lmnt of set) {\n    if (predicate(lmnt)) {\n      if (ignoreDuplicates) {\n        return false;\n      }\n\n      throw Error('The set contains at least one similar element.');\n    }\n  }\n\n  set.add(element);\n  return true;\n};","import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nimport { getEventListenersOfAudioNode } from './get-event-listeners-of-audio-node';\nexport const setInternalStateToActive = audioNode => {\n  if (ACTIVE_AUDIO_NODE_STORE.has(audioNode)) {\n    throw new Error('The AudioNode is already stored.');\n  }\n\n  ACTIVE_AUDIO_NODE_STORE.add(audioNode);\n  getEventListenersOfAudioNode(audioNode).forEach(eventListener => eventListener(true));\n};","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@babel/runtime/helpers/slicedToArray'), require('@babel/runtime/helpers/classCallCheck'), require('@babel/runtime/helpers/createClass')) : typeof define === 'function' && define.amd ? define(['exports', '@babel/runtime/helpers/slicedToArray', '@babel/runtime/helpers/classCallCheck', '@babel/runtime/helpers/createClass'], factory) : (global = global || self, factory(global.automationEvents = {}, global._slicedToArray, global._classCallCheck, global._createClass));\n})(this, function (exports, _slicedToArray, _classCallCheck, _createClass) {\n  'use strict';\n\n  _slicedToArray = _slicedToArray && Object.prototype.hasOwnProperty.call(_slicedToArray, 'default') ? _slicedToArray['default'] : _slicedToArray;\n  _classCallCheck = _classCallCheck && Object.prototype.hasOwnProperty.call(_classCallCheck, 'default') ? _classCallCheck['default'] : _classCallCheck;\n  _createClass = _createClass && Object.prototype.hasOwnProperty.call(_createClass, 'default') ? _createClass['default'] : _createClass;\n\n  var createExtendedExponentialRampToValueAutomationEvent = function createExtendedExponentialRampToValueAutomationEvent(value, endTime, insertTime) {\n    return {\n      endTime: endTime,\n      insertTime: insertTime,\n      type: 'exponentialRampToValue',\n      value: value\n    };\n  };\n\n  var createExtendedLinearRampToValueAutomationEvent = function createExtendedLinearRampToValueAutomationEvent(value, endTime, insertTime) {\n    return {\n      endTime: endTime,\n      insertTime: insertTime,\n      type: 'linearRampToValue',\n      value: value\n    };\n  };\n\n  var createSetValueAutomationEvent = function createSetValueAutomationEvent(value, startTime) {\n    return {\n      startTime: startTime,\n      type: 'setValue',\n      value: value\n    };\n  };\n\n  var createSetValueCurveAutomationEvent = function createSetValueCurveAutomationEvent(values, startTime, duration) {\n    return {\n      duration: duration,\n      startTime: startTime,\n      type: 'setValueCurve',\n      values: values\n    };\n  };\n\n  var getTargetValueAtTime = function getTargetValueAtTime(time, valueAtStartTime, _ref) {\n    var startTime = _ref.startTime,\n        target = _ref.target,\n        timeConstant = _ref.timeConstant;\n    return target + (valueAtStartTime - target) * Math.exp((startTime - time) / timeConstant);\n  };\n\n  var isExponentialRampToValueAutomationEvent = function isExponentialRampToValueAutomationEvent(automationEvent) {\n    return automationEvent.type === 'exponentialRampToValue';\n  };\n\n  var isLinearRampToValueAutomationEvent = function isLinearRampToValueAutomationEvent(automationEvent) {\n    return automationEvent.type === 'linearRampToValue';\n  };\n\n  var isAnyRampToValueAutomationEvent = function isAnyRampToValueAutomationEvent(automationEvent) {\n    return isExponentialRampToValueAutomationEvent(automationEvent) || isLinearRampToValueAutomationEvent(automationEvent);\n  };\n\n  var isSetValueAutomationEvent = function isSetValueAutomationEvent(automationEvent) {\n    return automationEvent.type === 'setValue';\n  };\n\n  var isSetValueCurveAutomationEvent = function isSetValueCurveAutomationEvent(automationEvent) {\n    return automationEvent.type === 'setValueCurve';\n  };\n\n  var getValueOfAutomationEventAtIndexAtTime = function getValueOfAutomationEventAtIndexAtTime(automationEvents, index, time, defaultValue) {\n    var automationEvent = automationEvents[index];\n    return automationEvent === undefined ? defaultValue : isAnyRampToValueAutomationEvent(automationEvent) || isSetValueAutomationEvent(automationEvent) ? automationEvent.value : isSetValueCurveAutomationEvent(automationEvent) ? automationEvent.values[automationEvent.values.length - 1] : getTargetValueAtTime(time, getValueOfAutomationEventAtIndexAtTime(automationEvents, index - 1, automationEvent.startTime, defaultValue), automationEvent);\n  };\n\n  var getEndTimeAndValueOfPreviousAutomationEvent = function getEndTimeAndValueOfPreviousAutomationEvent(automationEvents, index, currentAutomationEvent, nextAutomationEvent, defaultValue) {\n    return currentAutomationEvent === undefined ? [nextAutomationEvent.insertTime, defaultValue] : isAnyRampToValueAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.endTime, currentAutomationEvent.value] : isSetValueAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.startTime, currentAutomationEvent.value] : isSetValueCurveAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.startTime + currentAutomationEvent.duration, currentAutomationEvent.values[currentAutomationEvent.values.length - 1]] : [currentAutomationEvent.startTime, getValueOfAutomationEventAtIndexAtTime(automationEvents, index - 1, currentAutomationEvent.startTime, defaultValue)];\n  };\n\n  var isCancelAndHoldAutomationEvent = function isCancelAndHoldAutomationEvent(automationEvent) {\n    return automationEvent.type === 'cancelAndHold';\n  };\n\n  var isCancelScheduledValuesAutomationEvent = function isCancelScheduledValuesAutomationEvent(automationEvent) {\n    return automationEvent.type === 'cancelScheduledValues';\n  };\n\n  var getEventTime = function getEventTime(automationEvent) {\n    if (isCancelAndHoldAutomationEvent(automationEvent) || isCancelScheduledValuesAutomationEvent(automationEvent)) {\n      return automationEvent.cancelTime;\n    }\n\n    if (isExponentialRampToValueAutomationEvent(automationEvent) || isLinearRampToValueAutomationEvent(automationEvent)) {\n      return automationEvent.endTime;\n    }\n\n    return automationEvent.startTime;\n  };\n\n  var getExponentialRampValueAtTime = function getExponentialRampValueAtTime(time, startTime, valueAtStartTime, _ref) {\n    var endTime = _ref.endTime,\n        value = _ref.value;\n\n    if (valueAtStartTime === value) {\n      return value;\n    }\n\n    if (0 < valueAtStartTime && 0 < value || valueAtStartTime < 0 && value < 0) {\n      return valueAtStartTime * Math.pow(value / valueAtStartTime, (time - startTime) / (endTime - startTime));\n    }\n\n    return 0;\n  };\n\n  var getLinearRampValueAtTime = function getLinearRampValueAtTime(time, startTime, valueAtStartTime, _ref) {\n    var endTime = _ref.endTime,\n        value = _ref.value;\n    return valueAtStartTime + (time - startTime) / (endTime - startTime) * (value - valueAtStartTime);\n  };\n\n  var interpolateValue = function interpolateValue(values, theoreticIndex) {\n    var lowerIndex = Math.floor(theoreticIndex);\n    var upperIndex = Math.ceil(theoreticIndex);\n\n    if (lowerIndex === upperIndex) {\n      return values[lowerIndex];\n    }\n\n    return (1 - (theoreticIndex - lowerIndex)) * values[lowerIndex] + (1 - (upperIndex - theoreticIndex)) * values[upperIndex];\n  };\n\n  var getValueCurveValueAtTime = function getValueCurveValueAtTime(time, _ref) {\n    var duration = _ref.duration,\n        startTime = _ref.startTime,\n        values = _ref.values;\n    var theoreticIndex = (time - startTime) / duration * (values.length - 1);\n    return interpolateValue(values, theoreticIndex);\n  };\n\n  var isSetTargetAutomationEvent = function isSetTargetAutomationEvent(automationEvent) {\n    return automationEvent.type === 'setTarget';\n  };\n\n  var AutomationEventList = /*#__PURE__*/function () {\n    function AutomationEventList(defaultValue) {\n      _classCallCheck(this, AutomationEventList);\n\n      this._automationEvents = [];\n      this._currenTime = 0;\n      this._defaultValue = defaultValue;\n    }\n\n    _createClass(AutomationEventList, [{\n      key: Symbol.iterator,\n      value: function value() {\n        return this._automationEvents[Symbol.iterator]();\n      }\n    }, {\n      key: \"add\",\n      value: function add(automationEvent) {\n        var eventTime = getEventTime(automationEvent);\n\n        if (isCancelAndHoldAutomationEvent(automationEvent) || isCancelScheduledValuesAutomationEvent(automationEvent)) {\n          var index = this._automationEvents.findIndex(function (currentAutomationEvent) {\n            return getEventTime(currentAutomationEvent) >= eventTime;\n          });\n\n          var removedAutomationEvent = this._automationEvents[index];\n\n          if (index !== -1) {\n            this._automationEvents = this._automationEvents.slice(0, index);\n          }\n\n          if (isCancelAndHoldAutomationEvent(automationEvent)) {\n            var lastAutomationEvent = this._automationEvents[this._automationEvents.length - 1];\n\n            if (removedAutomationEvent !== undefined && isAnyRampToValueAutomationEvent(removedAutomationEvent)) {\n              if (isSetTargetAutomationEvent(lastAutomationEvent)) {\n                throw new Error('The internal list is malformed.');\n              }\n\n              var startTime = isSetValueCurveAutomationEvent(lastAutomationEvent) ? lastAutomationEvent.startTime + lastAutomationEvent.duration : getEventTime(lastAutomationEvent);\n              var startValue = isSetValueCurveAutomationEvent(lastAutomationEvent) ? lastAutomationEvent.values[lastAutomationEvent.values.length - 1] : lastAutomationEvent.value;\n              var value = isExponentialRampToValueAutomationEvent(removedAutomationEvent) ? getExponentialRampValueAtTime(eventTime, startTime, startValue, removedAutomationEvent) : getLinearRampValueAtTime(eventTime, startTime, startValue, removedAutomationEvent);\n              var truncatedAutomationEvent = isExponentialRampToValueAutomationEvent(removedAutomationEvent) ? createExtendedExponentialRampToValueAutomationEvent(value, eventTime, this._currenTime) : createExtendedLinearRampToValueAutomationEvent(value, eventTime, this._currenTime);\n\n              this._automationEvents.push(truncatedAutomationEvent);\n            }\n\n            if (lastAutomationEvent !== undefined && isSetTargetAutomationEvent(lastAutomationEvent)) {\n              this._automationEvents.push(createSetValueAutomationEvent(this.getValue(eventTime), eventTime));\n            }\n\n            if (lastAutomationEvent !== undefined && isSetValueCurveAutomationEvent(lastAutomationEvent) && lastAutomationEvent.startTime + lastAutomationEvent.duration > eventTime) {\n              this._automationEvents[this._automationEvents.length - 1] = createSetValueCurveAutomationEvent(new Float32Array([6, 7]), lastAutomationEvent.startTime, eventTime - lastAutomationEvent.startTime);\n            }\n          }\n        } else {\n          var _index = this._automationEvents.findIndex(function (currentAutomationEvent) {\n            return getEventTime(currentAutomationEvent) > eventTime;\n          });\n\n          var previousAutomationEvent = _index === -1 ? this._automationEvents[this._automationEvents.length - 1] : this._automationEvents[_index - 1];\n\n          if (previousAutomationEvent !== undefined && isSetValueCurveAutomationEvent(previousAutomationEvent) && getEventTime(previousAutomationEvent) + previousAutomationEvent.duration > eventTime) {\n            return false;\n          }\n\n          var persistentAutomationEvent = isExponentialRampToValueAutomationEvent(automationEvent) ? createExtendedExponentialRampToValueAutomationEvent(automationEvent.value, automationEvent.endTime, this._currenTime) : isLinearRampToValueAutomationEvent(automationEvent) ? createExtendedLinearRampToValueAutomationEvent(automationEvent.value, eventTime, this._currenTime) : automationEvent;\n\n          if (_index === -1) {\n            this._automationEvents.push(persistentAutomationEvent);\n          } else {\n            if (isSetValueCurveAutomationEvent(automationEvent) && eventTime + automationEvent.duration > getEventTime(this._automationEvents[_index])) {\n              return false;\n            }\n\n            this._automationEvents.splice(_index, 0, persistentAutomationEvent);\n          }\n        }\n\n        return true;\n      }\n    }, {\n      key: \"flush\",\n      value: function flush(time) {\n        var index = this._automationEvents.findIndex(function (currentAutomationEvent) {\n          return getEventTime(currentAutomationEvent) > time;\n        });\n\n        if (index > 1) {\n          var remainingAutomationEvents = this._automationEvents.slice(index - 1);\n\n          var firstRemainingAutomationEvent = remainingAutomationEvents[0];\n\n          if (isSetTargetAutomationEvent(firstRemainingAutomationEvent)) {\n            remainingAutomationEvents.unshift(createSetValueAutomationEvent(getValueOfAutomationEventAtIndexAtTime(this._automationEvents, index - 2, firstRemainingAutomationEvent.startTime, this._defaultValue), firstRemainingAutomationEvent.startTime));\n          }\n\n          this._automationEvents = remainingAutomationEvents;\n        }\n      }\n    }, {\n      key: \"getValue\",\n      value: function getValue(time) {\n        if (this._automationEvents.length === 0) {\n          return this._defaultValue;\n        }\n\n        var lastAutomationEvent = this._automationEvents[this._automationEvents.length - 1];\n\n        var index = this._automationEvents.findIndex(function (automationEvent) {\n          return getEventTime(automationEvent) > time;\n        });\n\n        var nextAutomationEvent = this._automationEvents[index];\n        var currentAutomationEvent = getEventTime(lastAutomationEvent) <= time ? lastAutomationEvent : this._automationEvents[index - 1];\n\n        if (currentAutomationEvent !== undefined && isSetTargetAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent) || nextAutomationEvent.insertTime > time)) {\n          return getTargetValueAtTime(time, getValueOfAutomationEventAtIndexAtTime(this._automationEvents, index - 2, currentAutomationEvent.startTime, this._defaultValue), currentAutomationEvent);\n        }\n\n        if (currentAutomationEvent !== undefined && isSetValueAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent))) {\n          return currentAutomationEvent.value;\n        }\n\n        if (currentAutomationEvent !== undefined && isSetValueCurveAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent) || currentAutomationEvent.startTime + currentAutomationEvent.duration > time)) {\n          if (time < currentAutomationEvent.startTime + currentAutomationEvent.duration) {\n            return getValueCurveValueAtTime(time, currentAutomationEvent);\n          }\n\n          return currentAutomationEvent.values[currentAutomationEvent.values.length - 1];\n        }\n\n        if (currentAutomationEvent !== undefined && isAnyRampToValueAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent))) {\n          return currentAutomationEvent.value;\n        }\n\n        if (nextAutomationEvent !== undefined && isExponentialRampToValueAutomationEvent(nextAutomationEvent)) {\n          var _getEndTimeAndValueOf = getEndTimeAndValueOfPreviousAutomationEvent(this._automationEvents, index - 1, currentAutomationEvent, nextAutomationEvent, this._defaultValue),\n              _getEndTimeAndValueOf2 = _slicedToArray(_getEndTimeAndValueOf, 2),\n              startTime = _getEndTimeAndValueOf2[0],\n              value = _getEndTimeAndValueOf2[1];\n\n          return getExponentialRampValueAtTime(time, startTime, value, nextAutomationEvent);\n        }\n\n        if (nextAutomationEvent !== undefined && isLinearRampToValueAutomationEvent(nextAutomationEvent)) {\n          var _getEndTimeAndValueOf3 = getEndTimeAndValueOfPreviousAutomationEvent(this._automationEvents, index - 1, currentAutomationEvent, nextAutomationEvent, this._defaultValue),\n              _getEndTimeAndValueOf4 = _slicedToArray(_getEndTimeAndValueOf3, 2),\n              _startTime = _getEndTimeAndValueOf4[0],\n              _value = _getEndTimeAndValueOf4[1];\n\n          return getLinearRampValueAtTime(time, _startTime, _value, nextAutomationEvent);\n        }\n\n        return this._defaultValue;\n      }\n    }]);\n\n    return AutomationEventList;\n  }();\n\n  var createCancelAndHoldAutomationEvent = function createCancelAndHoldAutomationEvent(cancelTime) {\n    return {\n      cancelTime: cancelTime,\n      type: 'cancelAndHold'\n    };\n  };\n\n  var createCancelScheduledValuesAutomationEvent = function createCancelScheduledValuesAutomationEvent(cancelTime) {\n    return {\n      cancelTime: cancelTime,\n      type: 'cancelScheduledValues'\n    };\n  };\n\n  var createExponentialRampToValueAutomationEvent = function createExponentialRampToValueAutomationEvent(value, endTime) {\n    return {\n      endTime: endTime,\n      type: 'exponentialRampToValue',\n      value: value\n    };\n  };\n\n  var createLinearRampToValueAutomationEvent = function createLinearRampToValueAutomationEvent(value, endTime) {\n    return {\n      endTime: endTime,\n      type: 'linearRampToValue',\n      value: value\n    };\n  };\n\n  var createSetTargetAutomationEvent = function createSetTargetAutomationEvent(target, startTime, timeConstant) {\n    return {\n      startTime: startTime,\n      target: target,\n      timeConstant: timeConstant,\n      type: 'setTarget'\n    };\n  };\n\n  exports.AutomationEventList = AutomationEventList;\n  exports.createCancelAndHoldAutomationEvent = createCancelAndHoldAutomationEvent;\n  exports.createCancelScheduledValuesAutomationEvent = createCancelScheduledValuesAutomationEvent;\n  exports.createExponentialRampToValueAutomationEvent = createExponentialRampToValueAutomationEvent;\n  exports.createLinearRampToValueAutomationEvent = createLinearRampToValueAutomationEvent;\n  exports.createSetTargetAutomationEvent = createSetTargetAutomationEvent;\n  exports.createSetValueAutomationEvent = createSetValueAutomationEvent;\n  exports.createSetValueCurveAutomationEvent = createSetValueCurveAutomationEvent;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","import { CYCLE_COUNTERS } from '../globals';\nexport const isPartOfACycle = audioNode => {\n  return CYCLE_COUNTERS.has(audioNode);\n};","import { EVENT_LISTENERS } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getEventListenersOfAudioNode = audioNode => {\n  return getValueForKey(EVENT_LISTENERS, audioNode);\n};","import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nimport { getEventListenersOfAudioNode } from './get-event-listeners-of-audio-node';\nexport const setInternalStateToPassive = audioNode => {\n  if (!ACTIVE_AUDIO_NODE_STORE.has(audioNode)) {\n    throw new Error('The AudioNode is not stored.');\n  }\n\n  ACTIVE_AUDIO_NODE_STORE.delete(audioNode);\n  getEventListenersOfAudioNode(audioNode).forEach(eventListener => eventListener(false));\n};","import { isAudioNode } from './audio-node';\nexport const isAudioNodeOutputConnection = outputConnection => {\n  return isAudioNode(outputConnection[0]);\n};","import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nexport const isActiveAudioNode = audioNode => ACTIVE_AUDIO_NODE_STORE.has(audioNode);","export const isAudioNode = audioNodeOrAudioParam => {\n  return 'context' in audioNodeOrAudioParam;\n};","export const isNativeAudioNode = nativeAudioNodeOrAudioParam => {\n  return 'context' in nativeAudioNodeOrAudioParam;\n};","import { AUDIO_PARAM_CONNECTIONS_STORE } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getAudioParamConnections = audioParam => {\n  return getValueForKey(AUDIO_PARAM_CONNECTIONS_STORE, audioParam);\n};","import { AUDIO_PARAM_STORE } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getNativeAudioParam = audioParam => {\n  return getValueForKey(AUDIO_PARAM_STORE, audioParam);\n};","export const wrapEventListener = (target, eventListener) => {\n  return event => {\n    const descriptor = {\n      value: target\n    };\n    Object.defineProperties(event, {\n      currentTarget: descriptor,\n      target: descriptor\n    });\n\n    if (typeof eventListener === 'function') {\n      return eventListener.call(target, event);\n    }\n\n    return eventListener.handleEvent.call(target, event);\n  };\n};","import { createIndexSizeError } from '../factories/index-size-error';\nexport const wrapAudioBufferGetChannelDataMethod = audioBuffer => {\n  audioBuffer.getChannelData = (getChannelData => {\n    return channel => {\n      try {\n        return getChannelData.call(audioBuffer, channel);\n      } catch (err) {\n        if (err.code === 12) {\n          throw createIndexSizeError();\n        }\n\n        throw err;\n      }\n    };\n  })(audioBuffer.getChannelData);\n};","export const wrapAudioScheduledSourceNodeStartMethodNegativeParameters = nativeAudioScheduledSourceNode => {\n  nativeAudioScheduledSourceNode.start = (start => {\n    return (when = 0, offset = 0, duration) => {\n      if (typeof duration === 'number' && duration < 0 || offset < 0 || when < 0) {\n        throw new RangeError(\"The parameters can't be negative.\");\n      } // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n\n\n      start.call(nativeAudioScheduledSourceNode, when, offset, duration);\n    };\n  })(nativeAudioScheduledSourceNode.start);\n};","export const wrapAudioScheduledSourceNodeStopMethodNegativeParameters = nativeAudioScheduledSourceNode => {\n  nativeAudioScheduledSourceNode.stop = (stop => {\n    return (when = 0) => {\n      if (when < 0) {\n        throw new RangeError(\"The parameter can't be negative.\");\n      }\n\n      stop.call(nativeAudioScheduledSourceNode, when);\n    };\n  })(nativeAudioScheduledSourceNode.stop);\n};","export const testAudioBufferCopyChannelMethodsOutOfBoundsSupport = nativeAudioBuffer => {\n  try {\n    nativeAudioBuffer.copyToChannel(new Float32Array(1), 0, -1);\n  } catch {\n    return false;\n  }\n\n  return true;\n};","import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nexport const connectNativeAudioNodeToNativeAudioNode = (nativeSourceAudioNode, nativeDestinationAudioNode, output, input) => {\n  if (isNativeAudioNodeFaker(nativeDestinationAudioNode)) {\n    const fakeNativeDestinationAudioNode = nativeDestinationAudioNode.inputs[input];\n    nativeSourceAudioNode.connect(fakeNativeDestinationAudioNode, output, 0);\n    return [fakeNativeDestinationAudioNode, output, 0];\n  }\n\n  nativeSourceAudioNode.connect(nativeDestinationAudioNode, output, input);\n  return [nativeDestinationAudioNode, output, input];\n};","import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nexport const disconnectNativeAudioNodeFromNativeAudioNode = (nativeSourceAudioNode, nativeDestinationAudioNode, output, input) => {\n  if (isNativeAudioNodeFaker(nativeDestinationAudioNode)) {\n    nativeSourceAudioNode.disconnect(nativeDestinationAudioNode.inputs[input], output, 0);\n  } else {\n    nativeSourceAudioNode.disconnect(nativeDestinationAudioNode, output, input);\n  }\n};","export function copyFromChannel(audioBuffer, // @todo There is currently no way to define something like { [ key: number | string ]: Float32Array }\nparent, key, channelNumber, bufferOffset) {\n  if (typeof audioBuffer.copyFromChannel === 'function') {\n    // The byteLength will be 0 when the ArrayBuffer was transferred.\n    if (parent[key].byteLength === 0) {\n      parent[key] = new Float32Array(128);\n    }\n\n    audioBuffer.copyFromChannel(parent[key], channelNumber, bufferOffset); // Bug #5: Safari does not support copyFromChannel().\n  } else {\n    const channelData = audioBuffer.getChannelData(channelNumber); // The byteLength will be 0 when the ArrayBuffer was transferred.\n\n    if (parent[key].byteLength === 0) {\n      parent[key] = channelData.slice(bufferOffset, bufferOffset + 128);\n    } else {\n      const slicedInput = new Float32Array(channelData.buffer, bufferOffset * Float32Array.BYTES_PER_ELEMENT, 128);\n      parent[key].set(slicedInput);\n    }\n  }\n}","export const createNestedArrays = (x, y) => {\n  const arrays = [];\n\n  for (let i = 0; i < x; i += 1) {\n    const array = [];\n    const length = typeof y === 'number' ? y : y[i];\n\n    for (let j = 0; j < length; j += 1) {\n      array.push(new Float32Array(128));\n    }\n\n    arrays.push(array);\n  }\n\n  return arrays;\n};","export const createInvalidAccessError = () => {\n  try {\n    return new DOMException('', 'InvalidAccessError');\n  } catch (err) {\n    // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n    err.code = 15;\n    err.name = 'InvalidAccessError';\n    return err;\n  }\n};","export const overwriteAccessors = (object, property, createGetter, createSetter) => {\n  let prototype = Object.getPrototypeOf(object);\n\n  while (!prototype.hasOwnProperty(property)) {\n    prototype = Object.getPrototypeOf(prototype);\n  }\n\n  const {\n    get,\n    set\n  } = Object.getOwnPropertyDescriptor(prototype, property);\n  Object.defineProperty(object, property, {\n    get: createGetter(get),\n    set: createSetter(set)\n  });\n};","export const isValidLatencyHint = latencyHint => {\n  return latencyHint === undefined || typeof latencyHint === 'number' || typeof latencyHint === 'string' && (latencyHint === 'balanced' || latencyHint === 'interactive' || latencyHint === 'playback');\n};","export class ReadOnlyMap {\n  constructor(parameters) {\n    this._map = new Map(parameters);\n  }\n\n  get size() {\n    return this._map.size;\n  }\n\n  entries() {\n    return this._map.entries();\n  }\n\n  forEach(callback, thisArg = null) {\n    return this._map.forEach((value, key) => callback.call(thisArg, value, key, this));\n  }\n\n  get(name) {\n    return this._map.get(name);\n  }\n\n  has(name) {\n    return this._map.has(name);\n  }\n\n  keys() {\n    return this._map.keys();\n  }\n\n  values() {\n    return this._map.values();\n  }\n\n}","export const copyToChannel = (audioBuffer, parent, key, channelNumber, bufferOffset) => {\n  if (typeof audioBuffer.copyToChannel === 'function') {\n    // The byteLength will be 0 when the ArrayBuffer was transferred.\n    if (parent[key].byteLength !== 0) {\n      audioBuffer.copyToChannel(parent[key], channelNumber, bufferOffset);\n    } // Bug #5: Safari does not support copyToChannel().\n\n  } else {\n    // The byteLength will be 0 when the ArrayBuffer was transferred.\n    if (parent[key].byteLength !== 0) {\n      audioBuffer.getChannelData(channelNumber).set(parent[key], bufferOffset);\n    }\n  }\n};","// This implementation as shamelessly inspired by source code of\n// tslint:disable-next-line:max-line-length\n// {@link https://chromium.googlesource.com/chromium/src.git/+/master/third_party/WebKit/Source/platform/audio/IIRFilter.cpp|Chromium's IIRFilter}.\nexport const filterBuffer = (feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffer, yBuffer, bufferIndex, bufferLength, input, output) => {\n  const inputLength = input.length;\n  let i = bufferIndex;\n\n  for (let j = 0; j < inputLength; j += 1) {\n    let y = feedforward[0] * input[j];\n\n    for (let k = 1; k < minLength; k += 1) {\n      const x = i - k & bufferLength - 1; // tslint:disable-line:no-bitwise\n\n      y += feedforward[k] * xBuffer[x];\n      y -= feedback[k] * yBuffer[x];\n    }\n\n    for (let k = minLength; k < feedforwardLength; k += 1) {\n      y += feedforward[k] * xBuffer[i - k & bufferLength - 1]; // tslint:disable-line:no-bitwise\n    }\n\n    for (let k = minLength; k < feedbackLength; k += 1) {\n      y -= feedback[k] * yBuffer[i - k & bufferLength - 1]; // tslint:disable-line:no-bitwise\n    }\n\n    xBuffer[i] = input[j];\n    yBuffer[i] = y;\n    i = i + 1 & bufferLength - 1; // tslint:disable-line:no-bitwise\n\n    output[j] = y;\n  }\n\n  return i;\n};","export const computeBufferSize = (baseLatency, sampleRate) => {\n  if (baseLatency === null) {\n    return 512;\n  }\n\n  return Math.max(512, Math.min(16384, Math.pow(2, Math.round(Math.log2(baseLatency * sampleRate)))));\n};","export const createUnknownError = () => {\n  try {\n    return new DOMException('', 'UnknownError');\n  } catch (err) {\n    // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n    err.name = 'UnknownError';\n    return err;\n  }\n};","export const isDCCurve = curve => {\n  if (curve === null) {\n    return false;\n  }\n\n  const length = curve.length;\n\n  if (length % 2 !== 0) {\n    return curve[Math.floor(length / 2)] !== 0;\n  }\n\n  return curve[length / 2 - 1] + curve[length / 2] !== 0;\n};","export * from './analyser-node';\nexport * from './analyser-options';\nexport * from './audio-buffer';\nexport * from './audio-buffer-options';\nexport * from './audio-buffer-source-node';\nexport * from './audio-buffer-source-node-renderer';\nexport * from './audio-buffer-source-options';\nexport * from './audio-context';\nexport * from './audio-context-options';\nexport * from './audio-destination-node';\nexport * from './audio-listener';\nexport * from './audio-node';\nexport * from './audio-node-options';\nexport * from './audio-node-renderer';\nexport * from './audio-param';\nexport * from './audio-param-descriptor';\nexport * from './audio-param-renderer';\nexport * from './audio-scheduled-source-node';\nexport * from './audio-scheduled-source-node-event-map';\nexport * from './audio-worklet';\nexport * from './audio-worklet-node';\nexport * from './audio-worklet-node-event-map';\nexport * from './audio-worklet-node-options';\nexport * from './audio-worklet-processor';\nexport * from './audio-worklet-processor-constructor';\nexport * from './automation';\nexport * from './base-audio-context';\nexport * from './biquad-filter-node';\nexport * from './biquad-filter-options';\nexport * from './channel-merger-options';\nexport * from './channel-splitter-options';\nexport * from './common-audio-context';\nexport * from './common-offline-audio-context';\nexport * from './constant-source-node';\nexport * from './constant-source-node-renderer';\nexport * from './constant-source-options';\nexport * from './convolver-node';\nexport * from './convolver-options';\nexport * from './delay-node';\nexport * from './delay-options';\nexport * from './dynamics-compressor-node';\nexport * from './dynamics-compressor-options';\nexport * from './gain-node';\nexport * from './gain-options';\nexport * from './iir-filter-node';\nexport * from './iir-filter-options';\nexport * from './media-element-audio-source-node';\nexport * from './media-element-audio-source-options';\nexport * from './media-stream-audio-destination-node';\nexport * from './media-stream-audio-source-node';\nexport * from './media-stream-audio-source-options';\nexport * from './media-stream-track-audio-source-node';\nexport * from './media-stream-track-audio-source-options';\nexport * from './minimal-audio-context';\nexport * from './minimal-base-audio-context';\nexport * from './minimal-base-audio-context-event-map';\nexport * from './minimal-offline-audio-context';\nexport * from './native-audio-node-faker';\nexport * from './native-audio-worklet-node-faker';\nexport * from './native-constant-source-node-faker';\nexport * from './native-convolver-node-faker';\nexport * from './native-iir-filter-node-faker';\nexport * from './native-panner-node-faker';\nexport * from './native-stereo-panner-node-faker';\nexport * from './native-wave-shaper-node-faker';\nexport * from './offline-audio-completion-event';\nexport * from './offline-audio-context';\nexport * from './offline-audio-context-constructor';\nexport * from './offline-audio-context-options';\nexport * from './oscillator-node';\nexport * from './oscillator-node-renderer';\nexport * from './oscillator-options';\nexport * from './panner-node';\nexport * from './panner-options';\nexport * from './periodic-wave';\nexport * from './periodic-wave-constraints';\nexport * from './periodic-wave-options';\nexport * from './read-only-map';\nexport * from './stereo-panner-node';\nexport * from './stereo-panner-options';\nexport * from './wave-shaper-node';\nexport * from './wave-shaper-options';\nexport * from './worklet-options';","export * from './abort-error-factory';\nexport * from './active-input-connection';\nexport * from './add-audio-node-connections-factory';\nexport * from './add-audio-node-connections-function';\nexport * from './add-audio-param-connections-factory';\nexport * from './add-audio-param-connections-function';\nexport * from './add-audio-worklet-module-factory';\nexport * from './add-audio-worklet-module-function';\nexport * from './add-silent-connection-factory';\nexport * from './add-silent-connection-function';\nexport * from './add-unrendered-audio-worklet-node-factory';\nexport * from './add-unrendered-audio-worklet-node-function';\nexport * from './analyser-node-constructor';\nexport * from './analyser-node-constructor-factory';\nexport * from './analyser-node-renderer-factory';\nexport * from './analyser-node-renderer-factory-factory';\nexport * from './any-audio-buffer';\nexport * from './any-context';\nexport * from './audio-buffer-constructor';\nexport * from './audio-buffer-constructor-factory';\nexport * from './audio-buffer-source-node-constructor';\nexport * from './audio-buffer-source-node-constructor-factory';\nexport * from './audio-buffer-source-node-renderer';\nexport * from './audio-buffer-source-node-renderer-factory';\nexport * from './audio-buffer-source-node-renderer-factory-factory';\nexport * from './audio-buffer-store';\nexport * from './audio-context-constructor';\nexport * from './audio-context-constructor-factory';\nexport * from './audio-context-latency-category';\nexport * from './audio-context-state';\nexport * from './audio-destination-node-constructor';\nexport * from './audio-destination-node-constructor-factory';\nexport * from './audio-destination-node-renderer-factory';\nexport * from './audio-listener-factory';\nexport * from './audio-listener-factory-factory';\nexport * from './audio-node-connections';\nexport * from './audio-node-connections-store';\nexport * from './audio-node-constructor';\nexport * from './audio-node-constructor-factory';\nexport * from './audio-node-output-connection';\nexport * from './audio-node-renderer';\nexport * from './audio-node-store';\nexport * from './audio-param-audio-node-store';\nexport * from './audio-param-connections';\nexport * from './audio-param-connections-store';\nexport * from './audio-param-factory';\nexport * from './audio-param-factory-factory';\nexport * from './audio-param-map';\nexport * from './audio-param-output-connection';\nexport * from './audio-param-renderer-factory';\nexport * from './audio-param-store';\nexport * from './audio-worklet-node-constructor';\nexport * from './audio-worklet-node-constructor-factory';\nexport * from './audio-worklet-node-renderer-factory';\nexport * from './audio-worklet-node-renderer-factory-factory';\nexport * from './auxiliary-gain-node-store';\nexport * from './base-audio-context-constructor';\nexport * from './base-audio-context-constructor-factory';\nexport * from './biquad-filter-node-constructor';\nexport * from './biquad-filter-node-constructor-factory';\nexport * from './biquad-filter-node-renderer-factory';\nexport * from './biquad-filter-node-renderer-factory-factory';\nexport * from './biquad-filter-type';\nexport * from './channel-count-mode';\nexport * from './channel-interpretation';\nexport * from './channel-merger-node-constructor';\nexport * from './channel-merger-node-constructor-factory';\nexport * from './channel-merger-node-renderer-factory';\nexport * from './channel-merger-node-renderer-factory-factory';\nexport * from './channel-splitter-node-constructor';\nexport * from './channel-splitter-node-constructor-factory';\nexport * from './channel-splitter-node-renderer-factory';\nexport * from './channel-splitter-node-renderer-factory-factory';\nexport * from './cache-test-result-factory';\nexport * from './cache-test-result-function';\nexport * from './connect-audio-param-factory';\nexport * from './connect-audio-param-function';\nexport * from './connect-multiple-outputs-factory';\nexport * from './connect-multiple-outputs-function';\nexport * from './connect-native-audio-node-to-native-audio-node-function';\nexport * from './connected-native-audio-buffer-source-node-factory';\nexport * from './connected-native-audio-buffer-source-node-factory-factory';\nexport * from './constant-source-node-constructor';\nexport * from './constant-source-node-constructor-factory';\nexport * from './constant-source-node-renderer';\nexport * from './constant-source-node-renderer-factory';\nexport * from './constant-source-node-renderer-factory-factory';\nexport * from './constructor';\nexport * from './context';\nexport * from './context-store';\nexport * from './convert-number-to-unsigned-long-factory';\nexport * from './convert-number-to-unsigned-long-function';\nexport * from './convolver-node-constructor';\nexport * from './convolver-node-constructor-factory';\nexport * from './convolver-node-renderer-factory';\nexport * from './convolver-node-renderer-factory-factory';\nexport * from './create-native-offline-audio-context-factory';\nexport * from './create-native-offline-audio-context-function';\nexport * from './cycle-counters';\nexport * from './data-clone-error-factory';\nexport * from './decode-audio-data-factory';\nexport * from './decode-audio-data-function';\nexport * from './decode-error-callback';\nexport * from './decode-success-callback';\nexport * from './decrement-cycle-counter-factory';\nexport * from './decrement-cycle-counter-function';\nexport * from './delay-node-constructor';\nexport * from './delay-node-constructor-factory';\nexport * from './delay-node-renderer-factory';\nexport * from './delay-node-renderer-factory-factory';\nexport * from './delete-unrendered-audio-worklet-node-factory';\nexport * from './delete-unrendered-audio-worklet-node-function';\nexport * from './detect-cycles-factory';\nexport * from './detect-cycles-function';\nexport * from './disconnect-multiple-outputs-factory';\nexport * from './disconnect-multiple-outputs-function';\nexport * from './disconnect-native-audio-node-from-native-audio-node-function';\nexport * from './distance-model-type';\nexport * from './dynamics-compressor-node-constructor';\nexport * from './dynamics-compressor-node-constructor-factory';\nexport * from './dynamics-compressor-node-renderer-factory';\nexport * from './dynamics-compressor-node-renderer-factory-factory';\nexport * from './encoding-error-factory';\nexport * from './error-event-handler';\nexport * from './evaluate-audio-worklet-global-scope-function';\nexport * from './evaluate-source-factory';\nexport * from './evaluate-source-function';\nexport * from './event-handler';\nexport * from './event-target-constructor';\nexport * from './event-target-constructor-factory';\nexport * from './expose-current-frame-and-current-time-factory';\nexport * from './expose-current-frame-and-current-time-function';\nexport * from './fetch-source-factory';\nexport * from './fetch-source-function';\nexport * from './gain-node-constructor';\nexport * from './gain-node-constructor-factory';\nexport * from './gain-node-renderer-factory';\nexport * from './gain-node-renderer-factory-factory';\nexport * from './get-audio-node-connections-function';\nexport * from './get-audio-node-renderer-factory';\nexport * from './get-audio-node-renderer-function';\nexport * from './get-audio-param-connections-function';\nexport * from './get-audio-param-renderer-factory';\nexport * from './get-audio-param-renderer-function';\nexport * from './get-backup-native-context-factory';\nexport * from './get-backup-native-context-function';\nexport * from './get-native-audio-node-function';\nexport * from './get-native-audio-param-function';\nexport * from './get-native-context-function';\nexport * from './get-native-context-factory';\nexport * from './get-unrendered-audio-worklet-nodes-factory';\nexport * from './get-unrendered-audio-worklet-nodes-function';\nexport * from './get-value-for-key-function';\nexport * from './iir-filter-node-constructor';\nexport * from './iir-filter-node-constructor-factory';\nexport * from './iir-filter-node-renderer-factory';\nexport * from './iir-filter-node-renderer-factory-factory';\nexport * from './increment-cycle-counter-factory';\nexport * from './increment-cycle-counter-factory-factory';\nexport * from './increment-cycle-counter-function';\nexport * from './index-size-error-factory';\nexport * from './insert-element-in-set-function';\nexport * from './internal-state-event-listener';\nexport * from './invalid-access-error-factory';\nexport * from './invalid-state-error-factory';\nexport * from './is-active-audio-node-function';\nexport * from './is-any-audio-context-factory';\nexport * from './is-any-audio-context-function';\nexport * from './is-any-audio-node-factory';\nexport * from './is-any-audio-node-function';\nexport * from './is-any-audio-param-factory';\nexport * from './is-any-audio-param-function';\nexport * from './is-any-offline-audio-context-factory';\nexport * from './is-any-offline-audio-context-function';\nexport * from './is-dc-curve-function';\nexport * from './is-native-audio-context-factory';\nexport * from './is-native-audio-context-function';\nexport * from './is-native-audio-node-factory';\nexport * from './is-native-audio-node-function';\nexport * from './is-native-audio-param-factory';\nexport * from './is-native-audio-param-function';\nexport * from './is-native-context-factory';\nexport * from './is-native-context-function';\nexport * from './is-native-offline-audio-context-factory';\nexport * from './is-native-offline-audio-context-function';\nexport * from './is-part-of-a-cycle-function';\nexport * from './is-secure-context-factory';\nexport * from './is-supported-promise-factory';\nexport * from './media-element-audio-source-node-constructor';\nexport * from './media-element-audio-source-node-constructor-factory';\nexport * from './media-stream-audio-destination-node-constructor';\nexport * from './media-stream-audio-destination-node-constructor-factory';\nexport * from './media-stream-audio-source-node-constructor';\nexport * from './media-stream-audio-source-node-constructor-factory';\nexport * from './media-stream-track-audio-source-node-constructor';\nexport * from './media-stream-track-audio-source-node-constructor-factory';\nexport * from './minimal-audio-context-constructor';\nexport * from './minimal-audio-context-constructor-factory';\nexport * from './minimal-base-audio-context-constructor';\nexport * from './minimal-base-audio-context-constructor-factory';\nexport * from './minimal-offline-audio-context-constructor';\nexport * from './minimal-offline-audio-context-constructor-factory';\nexport * from './monitor-connections-factory';\nexport * from './monitor-connections-function';\nexport * from './native-analyser-node';\nexport * from './native-analyser-node-factory';\nexport * from './native-analyser-node-factory-factory';\nexport * from './native-audio-buffer';\nexport * from './native-audio-buffer-constructor';\nexport * from './native-audio-buffer-constructor-factory';\nexport * from './native-audio-buffer-source-node';\nexport * from './native-audio-buffer-source-node-factory';\nexport * from './native-audio-buffer-source-node-factory-factory';\nexport * from './native-audio-context';\nexport * from './native-audio-context-constructor';\nexport * from './native-audio-context-constructor-factory';\nexport * from './native-audio-destination-node';\nexport * from './native-audio-destination-node-factory';\nexport * from './native-audio-destination-node-factory-factory';\nexport * from './native-audio-listener';\nexport * from './native-audio-node';\nexport * from './native-audio-node-factory';\nexport * from './native-audio-node-factory-factory';\nexport * from './native-audio-param';\nexport * from './native-audio-param-map';\nexport * from './native-audio-worklet';\nexport * from './native-audio-worklet-node';\nexport * from './native-audio-worklet-node-constructor';\nexport * from './native-audio-worklet-node-constructor-factory';\nexport * from './native-audio-worklet-node-factory';\nexport * from './native-audio-worklet-node-factory-factory';\nexport * from './native-audio-worklet-node-faker-factory';\nexport * from './native-audio-worklet-node-faker-factory-factory';\nexport * from './native-audio-worklet-node-options';\nexport * from './native-biquad-filter-node';\nexport * from './native-biquad-filter-node-factory';\nexport * from './native-biquad-filter-node-factory-factory';\nexport * from './native-channel-merger-node';\nexport * from './native-channel-merger-node-factory';\nexport * from './native-channel-merger-node-factory-factory';\nexport * from './native-channel-splitter-node';\nexport * from './native-channel-splitter-node-factory';\nexport * from './native-channel-splitter-node-factory-factory';\nexport * from './native-constant-source-node';\nexport * from './native-constant-source-node-factory';\nexport * from './native-constant-source-node-factory-factory';\nexport * from './native-constant-source-node-faker-factory';\nexport * from './native-constant-source-node-faker-factory-factory';\nexport * from './native-context';\nexport * from './native-convolver-node';\nexport * from './native-convolver-node-factory';\nexport * from './native-convolver-node-factory-factory';\nexport * from './native-convolver-node-faker-factory';\nexport * from './native-convolver-node-faker-factory-factory';\nexport * from './native-delay-node-factory';\nexport * from './native-delay-node-factory-factory';\nexport * from './native-delay-node';\nexport * from './native-dynamics-compressor-node';\nexport * from './native-dynamics-compressor-node-factory';\nexport * from './native-dynamics-compressor-node-factory-factory';\nexport * from './native-event-target';\nexport * from './native-gain-node';\nexport * from './native-gain-node-factory';\nexport * from './native-gain-node-factory-factory';\nexport * from './native-iir-filter-node';\nexport * from './native-iir-filter-node-factory';\nexport * from './native-iir-filter-node-factory-factory';\nexport * from './native-iir-filter-node-faker-factory';\nexport * from './native-iir-filter-node-faker-factory-factory';\nexport * from './native-media-element-audio-source-node';\nexport * from './native-media-element-audio-source-node-factory';\nexport * from './native-media-element-audio-source-node-factory-factory';\nexport * from './native-media-stream-audio-destination-node';\nexport * from './native-media-stream-audio-destination-node-factory';\nexport * from './native-media-stream-audio-destination-node-factory-factory';\nexport * from './native-media-stream-audio-source-node';\nexport * from './native-media-stream-audio-source-node-factory';\nexport * from './native-media-stream-audio-source-node-factory-factory';\nexport * from './native-media-stream-track-audio-source-node';\nexport * from './native-media-stream-track-audio-source-node-factory';\nexport * from './native-media-stream-track-audio-source-node-factory-factory';\nexport * from './native-offline-audio-context';\nexport * from './native-offline-audio-context-constructor';\nexport * from './native-offline-audio-context-constructor-factory';\nexport * from './native-oscillator-node';\nexport * from './native-oscillator-node-factory';\nexport * from './native-oscillator-node-factory-factory';\nexport * from './native-panner-node';\nexport * from './native-panner-node-factory';\nexport * from './native-panner-node-factory-factory';\nexport * from './native-panner-node-faker-factory';\nexport * from './native-panner-node-faker-factory-factory';\nexport * from './native-periodic-wave';\nexport * from './native-periodic-wave-factory';\nexport * from './native-periodic-wave-factory-factory';\nexport * from './native-script-processor-node';\nexport * from './native-script-processor-node-factory';\nexport * from './native-script-processor-node-factory-factory';\nexport * from './native-stereo-panner-node';\nexport * from './native-stereo-panner-node-factory';\nexport * from './native-stereo-panner-node-factory-factory';\nexport * from './native-stereo-panner-node-faker-factory';\nexport * from './native-stereo-panner-node-faker-factory-factory';\nexport * from './native-wave-shaper-node';\nexport * from './native-wave-shaper-node-factory';\nexport * from './native-wave-shaper-node-factory-factory';\nexport * from './native-wave-shaper-node-faker-factory';\nexport * from './native-wave-shaper-node-faker-factory-factory';\nexport * from './not-supported-error-factory';\nexport * from './offline-audio-context-constructor-factory';\nexport * from './oscillator-node-constructor';\nexport * from './oscillator-node-constructor-factory';\nexport * from './oscillator-node-renderer';\nexport * from './oscillator-node-renderer-factory';\nexport * from './oscillator-node-renderer-factory-factory';\nexport * from './oscillator-type';\nexport * from './output-connection';\nexport * from './over-sample-type';\nexport * from './overwrite-accessors-function';\nexport * from './panner-node-constructor';\nexport * from './panner-node-constructor-factory';\nexport * from './panner-node-renderer-factory';\nexport * from './panner-node-renderer-factory-factory';\nexport * from './panning-model-type';\nexport * from './passive-audio-node-input-connection';\nexport * from './passive-audio-param-input-connection';\nexport * from './periodic-wave-constructor';\nexport * from './periodic-wave-constructor-factory';\nexport * from './render-automation-factory';\nexport * from './render-automation-function';\nexport * from './render-inputs-of-audio-node-factory';\nexport * from './render-inputs-of-audio-node-function';\nexport * from './render-inputs-of-audio-param-factory';\nexport * from './render-inputs-of-audio-param-function';\nexport * from './render-native-offline-audio-context-factory';\nexport * from './render-native-offline-audio-context-function';\nexport * from './start-rendering-factory';\nexport * from './start-rendering-function';\nexport * from './stereo-panner-node-constructor';\nexport * from './stereo-panner-node-constructor-factory';\nexport * from './stereo-panner-node-renderer-factory-factory';\nexport * from './stereo-panner-node-renderer-factory';\nexport * from './test-audio-buffer-copy-channel-methods-subarray-support-factory';\nexport * from './test-audio-buffer-constructor-support-factory';\nexport * from './test-audio-buffer-source-node-start-method-consecutive-calls-support-factory';\nexport * from './test-audio-buffer-source-node-start-method-duration-parameter-support-factory';\nexport * from './test-audio-buffer-source-node-start-method-offset-clamping-support-factory';\nexport * from './test-audio-buffer-source-node-stop-method-nullified-buffer-support-factory';\nexport * from './test-audio-context-close-method-support-factory';\nexport * from './test-audio-context-decode-audio-data-method-type-error-support-factory';\nexport * from './test-audio-context-options-support-factory';\nexport * from './test-audio-node-connect-method-support-factory';\nexport * from './test-audio-scheduled-source-node-start-method-consecutive-calls-support-factory';\nexport * from './test-audio-scheduled-source-node-stop-method-consecutive-calls-support-factory';\nexport * from './test-audio-scheduled-source-node-stop-method-negative-parameters-support-factory';\nexport * from './test-audio-worklet-processor-no-outputs-support-factory';\nexport * from './test-channel-merger-node-channel-count-support-factory';\nexport * from './test-constant-source-node-accurate-scheduling-support-factory';\nexport * from './test-convolver-node-buffer-reassignability-support-factory';\nexport * from './test-is-secure-context-support-factory';\nexport * from './test-media-stream-audio-source-node-media-stream-without-audio-track-support';\nexport * from './test-offline-audio-context-current-time-support-factory';\nexport * from './test-stereo-panner-node-default-value-support-factory';\nexport * from './typed-array';\nexport * from './unknown-error-factory';\nexport * from './unrendered-audio-worklet-node-store';\nexport * from './unrendered-audio-worklet-nodes';\nexport * from './wave-shaper-node-constructor';\nexport * from './wave-shaper-node-constructor-factory';\nexport * from './wave-shaper-node-renderer-factory-factory';\nexport * from './wave-shaper-node-renderer-factory';\nexport * from './window-factory';\nexport * from './wrap-audio-buffer-copy-channel-methods-factory';\nexport * from './wrap-audio-buffer-copy-channel-methods-function';\nexport * from './wrap-audio-buffer-copy-channel-methods-out-of-bounds-factory';\nexport * from './wrap-audio-buffer-copy-channel-methods-out-of-bounds-function';\nexport * from './wrap-audio-buffer-source-node-start-method-offset-clamping-function';\nexport * from './wrap-audio-buffer-source-node-stop-method-nullified-buffer-factory';\nexport * from './wrap-audio-buffer-source-node-stop-method-nullified-buffer-function';\nexport * from './wrap-audio-scheduled-source-node-stop-method-consecutive-calls-factory';\nexport * from './wrap-audio-scheduled-source-node-stop-method-consecutive-calls-function';\nexport * from './wrap-channel-merger-node-factory';\nexport * from './wrap-channel-merger-node-function';\nexport * from './wrap-event-listener-function';","export const createAbortError = () => {\n  try {\n    return new DOMException('', 'AbortError');\n  } catch (err) {\n    // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n    err.code = 20;\n    err.name = 'AbortError';\n    return err;\n  }\n};","export const createAddAudioNodeConnections = audioNodeConnectionsStore => {\n  return (audioNode, audioNodeRenderer, nativeAudioNode) => {\n    const activeInputs = [];\n\n    for (let i = 0; i < nativeAudioNode.numberOfInputs; i += 1) {\n      activeInputs.push(new Set());\n    }\n\n    audioNodeConnectionsStore.set(audioNode, {\n      activeInputs,\n      outputs: new Set(),\n      passiveInputs: new WeakMap(),\n      renderer: audioNodeRenderer\n    });\n  };\n};","export const createAddAudioParamConnections = audioParamConnectionsStore => {\n  return (audioParam, audioParamRenderer) => {\n    audioParamConnectionsStore.set(audioParam, {\n      activeInputs: new Set(),\n      passiveInputs: new WeakMap(),\n      renderer: audioParamRenderer\n    });\n  };\n};","export const createAddSilentConnection = createNativeGainNode => {\n  return (nativeContext, nativeAudioScheduledSourceNode) => {\n    const nativeGainNode = createNativeGainNode(nativeContext, {\n      channelCount: 1,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete',\n      gain: 0\n    });\n    nativeAudioScheduledSourceNode.connect(nativeGainNode)\n    /*\n     * Bug #50: Edge does not yet allow to create AudioNodes on a closed AudioContext. Therefore the context property is\n     * used here to make sure to connect the right destination.\n     */\n    .connect(nativeGainNode.context.destination);\n\n    const disconnect = () => {\n      nativeAudioScheduledSourceNode.removeEventListener('ended', disconnect);\n      nativeAudioScheduledSourceNode.disconnect(nativeGainNode);\n      nativeGainNode.disconnect();\n    };\n\n    nativeAudioScheduledSourceNode.addEventListener('ended', disconnect);\n  };\n};","export const createAddUnrenderedAudioWorkletNode = getUnrenderedAudioWorkletNodes => {\n  return (nativeContext, audioWorkletNode) => {\n    getUnrenderedAudioWorkletNodes(nativeContext).add(audioWorkletNode);\n  };\n};","const DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  fftSize: 2048,\n  maxDecibels: -30,\n  minDecibels: -100,\n  smoothingTimeConstant: 0.8\n};\nexport const createAnalyserNodeConstructor = (audionNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext) => {\n  return class AnalyserNode extends audionNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeAnalyserNode = createNativeAnalyserNode(nativeContext, mergedOptions);\n      const analyserNodeRenderer = isNativeOfflineAudioContext(nativeContext) ? createAnalyserNodeRenderer() : null;\n      super(context, false, nativeAnalyserNode, analyserNodeRenderer);\n      this._nativeAnalyserNode = nativeAnalyserNode;\n    }\n\n    get fftSize() {\n      return this._nativeAnalyserNode.fftSize;\n    }\n\n    set fftSize(value) {\n      this._nativeAnalyserNode.fftSize = value;\n    }\n\n    get frequencyBinCount() {\n      return this._nativeAnalyserNode.frequencyBinCount;\n    }\n\n    get maxDecibels() {\n      return this._nativeAnalyserNode.maxDecibels;\n    }\n\n    set maxDecibels(value) {\n      // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n      const maxDecibels = this._nativeAnalyserNode.maxDecibels;\n      this._nativeAnalyserNode.maxDecibels = value;\n\n      if (!(value > this._nativeAnalyserNode.minDecibels)) {\n        this._nativeAnalyserNode.maxDecibels = maxDecibels;\n        throw createIndexSizeError();\n      }\n    }\n\n    get minDecibels() {\n      return this._nativeAnalyserNode.minDecibels;\n    }\n\n    set minDecibels(value) {\n      // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n      const minDecibels = this._nativeAnalyserNode.minDecibels;\n      this._nativeAnalyserNode.minDecibels = value;\n\n      if (!(this._nativeAnalyserNode.maxDecibels > value)) {\n        this._nativeAnalyserNode.minDecibels = minDecibels;\n        throw createIndexSizeError();\n      }\n    }\n\n    get smoothingTimeConstant() {\n      return this._nativeAnalyserNode.smoothingTimeConstant;\n    }\n\n    set smoothingTimeConstant(value) {\n      this._nativeAnalyserNode.smoothingTimeConstant = value;\n    }\n\n    getByteFrequencyData(array) {\n      this._nativeAnalyserNode.getByteFrequencyData(array);\n    }\n\n    getByteTimeDomainData(array) {\n      this._nativeAnalyserNode.getByteTimeDomainData(array);\n    }\n\n    getFloatFrequencyData(array) {\n      this._nativeAnalyserNode.getFloatFrequencyData(array);\n    }\n\n    getFloatTimeDomainData(array) {\n      this._nativeAnalyserNode.getFloatTimeDomainData(array);\n    }\n\n  };\n};","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createAnalyserNodeRendererFactory = (createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeAnalyserNodes = new WeakMap();\n\n    const createAnalyserNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeAnalyserNode = getNativeAudioNode(proxy); // If the initially used nativeAnalyserNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeAnalyserNodeIsOwnedByContext = isOwnedByContext(nativeAnalyserNode, nativeOfflineAudioContext);\n\n      if (!nativeAnalyserNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeAnalyserNode.channelCount,\n          channelCountMode: nativeAnalyserNode.channelCountMode,\n          channelInterpretation: nativeAnalyserNode.channelInterpretation,\n          fftSize: nativeAnalyserNode.fftSize,\n          maxDecibels: nativeAnalyserNode.maxDecibels,\n          minDecibels: nativeAnalyserNode.minDecibels,\n          smoothingTimeConstant: nativeAnalyserNode.smoothingTimeConstant\n        };\n        nativeAnalyserNode = createNativeAnalyserNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeAnalyserNodes.set(nativeOfflineAudioContext, nativeAnalyserNode);\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAnalyserNode, trace);\n      return nativeAnalyserNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeAnalyserNode = renderedNativeAnalyserNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAnalyserNode !== undefined) {\n          return Promise.resolve(renderedNativeAnalyserNode);\n        }\n\n        return createAnalyserNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","import { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from '../helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nconst DEFAULT_OPTIONS = {\n  numberOfChannels: 1\n};\nexport const createAudioBufferConstructor = (audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, testNativeAudioBufferConstructorSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {\n  let nativeOfflineAudioContext = null;\n  return class AudioBuffer {\n    constructor(options) {\n      if (nativeOfflineAudioContextConstructor === null) {\n        throw new Error('Missing the native OfflineAudioContext constructor.');\n      }\n\n      const {\n        length,\n        numberOfChannels,\n        sampleRate\n      } = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n\n      if (nativeOfflineAudioContext === null) {\n        nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n      }\n      /*\n       * Bug #99: Firefox does not throw a NotSupportedError when the numberOfChannels is zero. But it only does it when using the\n       * factory function. But since Firefox also supports the constructor everything should be fine.\n       */\n\n\n      const audioBuffer = nativeAudioBufferConstructor !== null && cacheTestResult(testNativeAudioBufferConstructorSupport, testNativeAudioBufferConstructorSupport) ? new nativeAudioBufferConstructor({\n        length,\n        numberOfChannels,\n        sampleRate\n      }) : nativeOfflineAudioContext.createBuffer(numberOfChannels, length, sampleRate); // Bug #99: Safari does not throw an error when the numberOfChannels is zero.\n\n      if (audioBuffer.numberOfChannels === 0) {\n        throw createNotSupportedError();\n      } // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n      // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n\n\n      if (typeof audioBuffer.copyFromChannel !== 'function') {\n        wrapAudioBufferCopyChannelMethods(audioBuffer);\n        wrapAudioBufferGetChannelDataMethod(audioBuffer); // Bug #157: Only Chrome & Opera do allow the bufferOffset to be out-of-bounds.\n      } else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n        wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n      }\n\n      audioBufferStore.add(audioBuffer);\n      /*\n       * This does violate all good pratices but it is necessary to allow this AudioBuffer to be used with native\n       * (Offline)AudioContexts.\n       */\n\n      return audioBuffer;\n    }\n\n    static [Symbol.hasInstance](instance) {\n      return instance !== null && typeof instance === 'object' && Object.getPrototypeOf(instance) === AudioBuffer.prototype || audioBufferStore.has(instance);\n    }\n\n  };\n};","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nconst DEFAULT_OPTIONS = {\n  buffer: null,\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  // Bug #149: Safari does not yet support the detune AudioParam.\n  loop: false,\n  loopEnd: 0,\n  loopStart: 0,\n  playbackRate: 1\n};\nexport const createAudioBufferSourceNodeConstructor = (audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {\n  return class AudioBufferSourceNode extends audioNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const audioBufferSourceNodeRenderer = isOffline ? createAudioBufferSourceNodeRenderer() : null;\n      super(context, false, nativeAudioBufferSourceNode, audioBufferSourceNodeRenderer);\n      this._audioBufferSourceNodeRenderer = audioBufferSourceNodeRenderer;\n      this._isBufferNullified = false;\n      this._isBufferSet = options.buffer !== null && options.buffer !== undefined;\n      this._nativeAudioBufferSourceNode = nativeAudioBufferSourceNode;\n      this._onended = null; // Bug #73: Edge & Safari do not export the correct values for maxValue and minValue.\n\n      this._playbackRate = createAudioParam(this, isOffline, nativeAudioBufferSourceNode.playbackRate, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n    }\n\n    get buffer() {\n      if (this._isBufferNullified) {\n        return null;\n      }\n\n      return this._nativeAudioBufferSourceNode.buffer;\n    }\n\n    set buffer(value) {\n      // Bug #71: Edge does not allow to set the buffer to null.\n      try {\n        this._nativeAudioBufferSourceNode.buffer = value;\n      } catch (err) {\n        if (value !== null || err.code !== 17) {\n          throw err;\n        } // This will modify the buffer in place. Luckily that works in Edge and has the same effect as setting the buffer to null.\n\n\n        if (this._nativeAudioBufferSourceNode.buffer !== null) {\n          const buffer = this._nativeAudioBufferSourceNode.buffer;\n          const numberOfChannels = buffer.numberOfChannels;\n\n          for (let i = 0; i < numberOfChannels; i += 1) {\n            buffer.getChannelData(i).fill(0);\n          }\n\n          this._isBufferNullified = true;\n        }\n      } // Bug #72: Only Chrome, Edge & Opera do not allow to reassign the buffer yet.\n\n\n      if (value !== null) {\n        if (this._isBufferSet) {\n          throw createInvalidStateError();\n        }\n\n        this._isBufferSet = true;\n      }\n    }\n\n    get loop() {\n      return this._nativeAudioBufferSourceNode.loop;\n    }\n\n    set loop(value) {\n      this._nativeAudioBufferSourceNode.loop = value;\n    }\n\n    get loopEnd() {\n      return this._nativeAudioBufferSourceNode.loopEnd;\n    }\n\n    set loopEnd(value) {\n      this._nativeAudioBufferSourceNode.loopEnd = value;\n    }\n\n    get loopStart() {\n      return this._nativeAudioBufferSourceNode.loopStart;\n    }\n\n    set loopStart(value) {\n      this._nativeAudioBufferSourceNode.loopStart = value;\n    }\n\n    get onended() {\n      return this._onended;\n    }\n\n    set onended(value) {\n      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n      this._nativeAudioBufferSourceNode.onended = wrappedListener;\n      const nativeOnEnded = this._nativeAudioBufferSourceNode.onended;\n      this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n    }\n\n    get playbackRate() {\n      return this._playbackRate;\n    }\n\n    start(when = 0, offset = 0, duration) {\n      this._nativeAudioBufferSourceNode.start(when, offset, duration);\n\n      if (this._audioBufferSourceNodeRenderer !== null) {\n        this._audioBufferSourceNodeRenderer.start = duration === undefined ? [when, offset] : [when, offset, duration];\n      } else {\n        setInternalStateToActive(this);\n\n        const resetInternalStateToPassive = () => {\n          this._nativeAudioBufferSourceNode.removeEventListener('ended', resetInternalStateToPassive); // @todo Determine a meaningful delay instead of just using one second.\n\n\n          setTimeout(() => setInternalStateToPassive(this), 1000);\n        };\n\n        this._nativeAudioBufferSourceNode.addEventListener('ended', resetInternalStateToPassive);\n      }\n    }\n\n    stop(when = 0) {\n      this._nativeAudioBufferSourceNode.stop(when);\n\n      if (this._audioBufferSourceNodeRenderer !== null) {\n        this._audioBufferSourceNodeRenderer.stop = when;\n      }\n    }\n\n  };\n};","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createAudioBufferSourceNodeRendererFactory = (connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeAudioBufferSourceNodes = new WeakMap();\n    let start = null;\n    let stop = null;\n\n    const createAudioBufferSourceNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeAudioBufferSourceNode = getNativeAudioNode(proxy);\n      /*\n       * If the initially used nativeAudioBufferSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n       * again.\n       */\n\n      const nativeAudioBufferSourceNodeIsOwnedByContext = isOwnedByContext(nativeAudioBufferSourceNode, nativeOfflineAudioContext);\n\n      if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n        const options = {\n          buffer: nativeAudioBufferSourceNode.buffer,\n          channelCount: nativeAudioBufferSourceNode.channelCount,\n          channelCountMode: nativeAudioBufferSourceNode.channelCountMode,\n          channelInterpretation: nativeAudioBufferSourceNode.channelInterpretation,\n          // Bug #149: Safari does not yet support the detune AudioParam.\n          loop: nativeAudioBufferSourceNode.loop,\n          loopEnd: nativeAudioBufferSourceNode.loopEnd,\n          loopStart: nativeAudioBufferSourceNode.loopStart,\n          playbackRate: nativeAudioBufferSourceNode.playbackRate.value\n        };\n        nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, options);\n\n        if (start !== null) {\n          nativeAudioBufferSourceNode.start(...start);\n        }\n\n        if (stop !== null) {\n          nativeAudioBufferSourceNode.stop(stop);\n        }\n      }\n\n      renderedNativeAudioBufferSourceNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n\n      if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n        // Bug #149: Safari does not yet support the detune AudioParam.\n        await renderAutomation(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate, trace);\n      } else {\n        // Bug #149: Safari does not yet support the detune AudioParam.\n        await connectAudioParam(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate, trace);\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioBufferSourceNode, trace);\n      return nativeAudioBufferSourceNode;\n    };\n\n    return {\n      set start(value) {\n        start = value;\n      },\n\n      set stop(value) {\n        stop = value;\n      },\n\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeAudioBufferSourceNode = renderedNativeAudioBufferSourceNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAudioBufferSourceNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioBufferSourceNode);\n        }\n\n        return createAudioBufferSourceNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","import { isValidLatencyHint } from '../helpers/is-valid-latency-hint';\nexport const createAudioContextConstructor = (baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioDestinationNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor) => {\n  return class AudioContext extends baseAudioContextConstructor {\n    constructor(options = {}) {\n      if (nativeAudioContextConstructor === null) {\n        throw new Error('Missing the native AudioContext constructor.');\n      }\n\n      const nativeAudioContext = new nativeAudioContextConstructor(options); // Bug #131 Safari returns null when there are four other AudioContexts running already.\n\n      if (nativeAudioContext === null) {\n        throw createUnknownError();\n      } // Bug #51 Only Chrome and Opera throw an error if the given latencyHint is invalid.\n\n\n      if (!isValidLatencyHint(options.latencyHint)) {\n        throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);\n      } // Bug #150 Only Chrome, Firefox and Opera support setting the sampleRate.\n\n\n      if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n        throw createNotSupportedError();\n      }\n\n      super(nativeAudioContext, 2);\n      const {\n        latencyHint\n      } = options;\n      const {\n        sampleRate\n      } = nativeAudioContext; // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n\n      this._baseLatency = typeof nativeAudioContext.baseLatency === 'number' ? nativeAudioContext.baseLatency : latencyHint === 'balanced' ? 512 / sampleRate : latencyHint === 'interactive' || latencyHint === undefined ? 256 / sampleRate : latencyHint === 'playback' ? 1024 / sampleRate :\n      /*\n       * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n       * ScriptProcessorNode.\n       */\n      Math.max(2, Math.min(128, Math.round(latencyHint * sampleRate / 128))) * 128 / sampleRate;\n      this._nativeAudioContext = nativeAudioContext;\n      this._state = null;\n      /*\n       * Bug #34: Chrome and Opera pretend to be running right away, but fire an onstatechange event when the state actually changes\n       * to 'running'.\n       */\n\n      if (nativeAudioContext.state === 'running') {\n        this._state = 'suspended';\n\n        const revokeState = () => {\n          if (this._state === 'suspended') {\n            this._state = null;\n          }\n\n          nativeAudioContext.removeEventListener('statechange', revokeState);\n        };\n\n        nativeAudioContext.addEventListener('statechange', revokeState);\n      }\n    }\n\n    get baseLatency() {\n      return this._baseLatency;\n    }\n\n    get state() {\n      return this._state !== null ? this._state : this._nativeAudioContext.state;\n    }\n\n    close() {\n      // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n      if (this.state === 'closed') {\n        return this._nativeAudioContext.close().then(() => {\n          throw createInvalidStateError();\n        });\n      } // Bug #34: If the state was set to suspended before it should be revoked now.\n\n\n      if (this._state === 'suspended') {\n        this._state = null;\n      }\n\n      return this._nativeAudioContext.close();\n      /*\n       * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n       * ...then(() => deleteAudioGraph(this, this._nativeAudioContext));\n       */\n    }\n\n    createMediaElementSource(mediaElement) {\n      return new mediaElementAudioSourceNodeConstructor(this, {\n        mediaElement\n      });\n    }\n\n    createMediaStreamDestination() {\n      return new mediaStreamAudioDestinationNodeConstructor(this);\n    }\n\n    createMediaStreamSource(mediaStream) {\n      return new mediaStreamAudioSourceNodeConstructor(this, {\n        mediaStream\n      });\n    }\n\n    createMediaStreamTrackSource(mediaStreamTrack) {\n      return new mediaStreamTrackAudioSourceNodeConstructor(this, {\n        mediaStreamTrack\n      });\n    }\n\n    resume() {\n      if (this._state === 'suspended') {\n        return new Promise((resolve, reject) => {\n          const resolvePromise = () => {\n            this._nativeAudioContext.removeEventListener('statechange', resolvePromise);\n\n            if (this._nativeAudioContext.state === 'running') {\n              resolve();\n            } else {\n              this.resume().then(resolve, reject);\n            }\n          };\n\n          this._nativeAudioContext.addEventListener('statechange', resolvePromise);\n        });\n      }\n\n      return this._nativeAudioContext.resume().catch(err => {\n        // Bug #55: Chrome, Edge and Opera do throw an InvalidAccessError instead of an InvalidStateError.\n        // Bug #56: Safari invokes the catch handler but without an error.\n        if (err === undefined || err.code === 15) {\n          throw createInvalidStateError();\n        }\n\n        throw err;\n      });\n    }\n\n    suspend() {\n      return this._nativeAudioContext.suspend().catch(err => {\n        // Bug #56: Safari invokes the catch handler but without an error.\n        if (err === undefined) {\n          throw createInvalidStateError();\n        }\n\n        throw err;\n      });\n    }\n\n  };\n};","export const createAudioDestinationNodeConstructor = (audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode) => {\n  return class AudioDestinationNode extends audioNodeConstructor {\n    constructor(context, channelCount) {\n      const nativeContext = getNativeContext(context);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const nativeAudioDestinationNode = createNativeAudioDestinationNode(nativeContext, channelCount, isOffline);\n      const audioDestinationNodeRenderer = isOffline ? createAudioDestinationNodeRenderer(renderInputsOfAudioNode) : null;\n      super(context, false, nativeAudioDestinationNode, audioDestinationNodeRenderer);\n      this._isNodeOfNativeOfflineAudioContext = isOffline;\n      this._nativeAudioDestinationNode = nativeAudioDestinationNode;\n    }\n\n    get channelCount() {\n      return this._nativeAudioDestinationNode.channelCount;\n    }\n\n    set channelCount(value) {\n      // Bug #52: Chrome, Edge, Opera & Safari do not throw an exception at all.\n      // Bug #54: Firefox does throw an IndexSizeError.\n      if (this._isNodeOfNativeOfflineAudioContext) {\n        throw createInvalidStateError();\n      } // Bug #47: The AudioDestinationNode in Edge and Safari do not initialize the maxChannelCount property correctly.\n\n\n      if (value > this._nativeAudioDestinationNode.maxChannelCount) {\n        throw createIndexSizeError();\n      }\n\n      this._nativeAudioDestinationNode.channelCount = value;\n    }\n\n    get channelCountMode() {\n      return this._nativeAudioDestinationNode.channelCountMode;\n    }\n\n    set channelCountMode(value) {\n      // Bug #53: No browser does throw an exception yet.\n      if (this._isNodeOfNativeOfflineAudioContext) {\n        throw createInvalidStateError();\n      }\n\n      this._nativeAudioDestinationNode.channelCountMode = value;\n    }\n\n    get maxChannelCount() {\n      return this._nativeAudioDestinationNode.maxChannelCount;\n    }\n\n  };\n};","export const createAudioDestinationNodeRenderer = renderInputsOfAudioNode => {\n  let nativeAudioDestinationNodePromise = null;\n\n  const createAudioDestinationNode = async (proxy, nativeOfflineAudioContext, trace) => {\n    const nativeAudioDestinationNode = nativeOfflineAudioContext.destination;\n    await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioDestinationNode, trace);\n    return nativeAudioDestinationNode;\n  };\n\n  return {\n    render(proxy, nativeOfflineAudioContext, trace) {\n      if (nativeAudioDestinationNodePromise === null) {\n        nativeAudioDestinationNodePromise = createAudioDestinationNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n      return nativeAudioDestinationNodePromise;\n    }\n\n  };\n};","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nexport const createAudioListenerFactory = (createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, isNativeOfflineAudioContext) => {\n  return (context, nativeContext) => {\n    const nativeListener = nativeContext.listener; // Bug #117: Only Chrome & Opera support the new interface already.\n\n    const createFakeAudioParams = () => {\n      const channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n        channelCount: 1,\n        channelCountMode: 'explicit',\n        channelInterpretation: 'speakers',\n        numberOfInputs: 9\n      });\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 9, 0);\n\n      const createFakeAudioParam = (input, value) => {\n        const constantSourceNode = createNativeConstantSourceNode(nativeContext, {\n          channelCount: 1,\n          channelCountMode: 'explicit',\n          channelInterpretation: 'discrete',\n          offset: value\n        });\n        constantSourceNode.connect(channelMergerNode, 0, input); // @todo This should be stopped when the context is closed.\n\n        constantSourceNode.start();\n        Object.defineProperty(constantSourceNode.offset, 'defaultValue', {\n          get() {\n            return value;\n          }\n\n        });\n        /*\n         * Bug #62 & #74: Edge & Safari do not support ConstantSourceNodes and do not export the correct values for maxValue and\n         * minValue for GainNodes.\n         */\n\n        return createAudioParam({\n          context\n        }, isOffline, constantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      };\n\n      let lastOrientation = [0, 0, -1, 0, 1, 0];\n      let lastPosition = [0, 0, 0];\n\n      scriptProcessorNode.onaudioprocess = ({\n        inputBuffer\n      }) => {\n        const orientation = [inputBuffer.getChannelData(0)[0], inputBuffer.getChannelData(1)[0], inputBuffer.getChannelData(2)[0], inputBuffer.getChannelData(3)[0], inputBuffer.getChannelData(4)[0], inputBuffer.getChannelData(5)[0]];\n\n        if (orientation.some((value, index) => value !== lastOrientation[index])) {\n          nativeListener.setOrientation(...orientation); // tslint:disable-line:deprecation\n\n          lastOrientation = orientation;\n        }\n\n        const positon = [inputBuffer.getChannelData(6)[0], inputBuffer.getChannelData(7)[0], inputBuffer.getChannelData(8)[0]];\n\n        if (positon.some((value, index) => value !== lastPosition[index])) {\n          nativeListener.setPosition(...positon); // tslint:disable-line:deprecation\n\n          lastPosition = positon;\n        }\n      };\n\n      channelMergerNode.connect(scriptProcessorNode);\n      return {\n        forwardX: createFakeAudioParam(0, 0),\n        forwardY: createFakeAudioParam(1, 0),\n        forwardZ: createFakeAudioParam(2, -1),\n        positionX: createFakeAudioParam(6, 0),\n        positionY: createFakeAudioParam(7, 0),\n        positionZ: createFakeAudioParam(8, 0),\n        upX: createFakeAudioParam(3, 0),\n        upY: createFakeAudioParam(4, 1),\n        upZ: createFakeAudioParam(5, 0)\n      };\n    };\n\n    const {\n      forwardX,\n      forwardY,\n      forwardZ,\n      positionX,\n      positionY,\n      positionZ,\n      upX,\n      upY,\n      upZ\n    } = nativeListener.forwardX === undefined ? createFakeAudioParams() : nativeListener;\n    return {\n      get forwardX() {\n        return forwardX;\n      },\n\n      get forwardY() {\n        return forwardY;\n      },\n\n      get forwardZ() {\n        return forwardZ;\n      },\n\n      get positionX() {\n        return positionX;\n      },\n\n      get positionY() {\n        return positionY;\n      },\n\n      get positionZ() {\n        return positionZ;\n      },\n\n      get upX() {\n        return upX;\n      },\n\n      get upY() {\n        return upY;\n      },\n\n      get upZ() {\n        return upZ;\n      }\n\n    };\n  };\n};","import { AutomationEventList } from 'automation-events';\nexport const createAudioParamFactory = (addAudioParamConnections, audioParamAudioNodeStore, audioParamStore, createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor) => {\n  return (audioNode, isAudioParamOfOfflineAudioContext, nativeAudioParam, maxValue = null, minValue = null) => {\n    const automationEventList = new AutomationEventList(nativeAudioParam.defaultValue);\n    const audioParamRenderer = isAudioParamOfOfflineAudioContext ? createAudioParamRenderer(automationEventList) : null;\n    const audioParam = {\n      get defaultValue() {\n        return nativeAudioParam.defaultValue;\n      },\n\n      get maxValue() {\n        return maxValue === null ? nativeAudioParam.maxValue : maxValue;\n      },\n\n      get minValue() {\n        return minValue === null ? nativeAudioParam.minValue : minValue;\n      },\n\n      get value() {\n        return nativeAudioParam.value;\n      },\n\n      set value(value) {\n        nativeAudioParam.value = value; // Bug #98: Edge, Firefox & Safari do not yet treat the value setter like a call to setValueAtTime().\n\n        audioParam.setValueAtTime(value, audioNode.context.currentTime);\n      },\n\n      cancelAndHoldAtTime(cancelTime) {\n        // Bug #28: Edge, Firefox & Safari do not yet implement cancelAndHoldAtTime().\n        if (typeof nativeAudioParam.cancelAndHoldAtTime === 'function') {\n          if (audioParamRenderer === null) {\n            automationEventList.flush(audioNode.context.currentTime);\n          }\n\n          automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));\n          nativeAudioParam.cancelAndHoldAtTime(cancelTime);\n        } else {\n          const previousLastEvent = Array.from(automationEventList).pop();\n\n          if (audioParamRenderer === null) {\n            automationEventList.flush(audioNode.context.currentTime);\n          }\n\n          automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));\n          const currentLastEvent = Array.from(automationEventList).pop();\n          nativeAudioParam.cancelScheduledValues(cancelTime);\n\n          if (previousLastEvent !== currentLastEvent && currentLastEvent !== undefined) {\n            if (currentLastEvent.type === 'exponentialRampToValue') {\n              nativeAudioParam.exponentialRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);\n            } else if (currentLastEvent.type === 'linearRampToValue') {\n              nativeAudioParam.linearRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);\n            } else if (currentLastEvent.type === 'setValue') {\n              nativeAudioParam.setValueAtTime(currentLastEvent.value, currentLastEvent.startTime);\n            } else if (currentLastEvent.type === 'setValueCurve') {\n              nativeAudioParam.setValueCurveAtTime(currentLastEvent.values, currentLastEvent.startTime, currentLastEvent.duration);\n            }\n          }\n        }\n\n        return audioParam;\n      },\n\n      cancelScheduledValues(cancelTime) {\n        if (audioParamRenderer === null) {\n          automationEventList.flush(audioNode.context.currentTime);\n        }\n\n        automationEventList.add(createCancelScheduledValuesAutomationEvent(cancelTime));\n        nativeAudioParam.cancelScheduledValues(cancelTime);\n        return audioParam;\n      },\n\n      exponentialRampToValueAtTime(value, endTime) {\n        if (audioParamRenderer === null) {\n          automationEventList.flush(audioNode.context.currentTime);\n        }\n\n        automationEventList.add(createExponentialRampToValueAutomationEvent(value, endTime));\n        nativeAudioParam.exponentialRampToValueAtTime(value, endTime);\n        return audioParam;\n      },\n\n      linearRampToValueAtTime(value, endTime) {\n        if (audioParamRenderer === null) {\n          automationEventList.flush(audioNode.context.currentTime);\n        }\n\n        automationEventList.add(createLinearRampToValueAutomationEvent(value, endTime));\n        nativeAudioParam.linearRampToValueAtTime(value, endTime);\n        return audioParam;\n      },\n\n      setTargetAtTime(target, startTime, timeConstant) {\n        if (audioParamRenderer === null) {\n          automationEventList.flush(audioNode.context.currentTime);\n        }\n\n        automationEventList.add(createSetTargetAutomationEvent(target, startTime, timeConstant));\n        nativeAudioParam.setTargetAtTime(target, startTime, timeConstant);\n        return audioParam;\n      },\n\n      setValueAtTime(value, startTime) {\n        if (audioParamRenderer === null) {\n          automationEventList.flush(audioNode.context.currentTime);\n        }\n\n        automationEventList.add(createSetValueAutomationEvent(value, startTime));\n        nativeAudioParam.setValueAtTime(value, startTime);\n        return audioParam;\n      },\n\n      setValueCurveAtTime(values, startTime, duration) {\n        /*\n         * Bug #152: Safari does not correctly interpolate the values of the curve.\n         * @todo Unfortunately there is no way to test for this behavior in synchronous fashion which is why testing for the\n         * existence of the webkitAudioContext is used as a workaround here.\n         */\n        if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext') {\n          const endTime = startTime + duration;\n          const sampleRate = audioNode.context.sampleRate;\n          const firstSample = Math.ceil(startTime * sampleRate);\n          const lastSample = Math.floor(endTime * sampleRate);\n          const numberOfInterpolatedValues = lastSample - firstSample;\n          const interpolatedValues = new Float32Array(numberOfInterpolatedValues);\n\n          for (let i = 0; i < numberOfInterpolatedValues; i += 1) {\n            const theoreticIndex = (values.length - 1) / duration * ((firstSample + i) / sampleRate - startTime);\n            const lowerIndex = Math.floor(theoreticIndex);\n            const upperIndex = Math.ceil(theoreticIndex);\n            interpolatedValues[i] = lowerIndex === upperIndex ? values[lowerIndex] : (1 - (theoreticIndex - lowerIndex)) * values[lowerIndex] + (1 - (upperIndex - theoreticIndex)) * values[upperIndex];\n          }\n\n          if (audioParamRenderer === null) {\n            automationEventList.flush(audioNode.context.currentTime);\n          }\n\n          automationEventList.add(createSetValueCurveAutomationEvent(interpolatedValues, startTime, duration));\n          nativeAudioParam.setValueCurveAtTime(interpolatedValues, startTime, duration);\n          const timeOfLastSample = lastSample / sampleRate;\n\n          if (timeOfLastSample < endTime) {\n            audioParam.setValueAtTime(interpolatedValues[interpolatedValues.length - 1], timeOfLastSample);\n          }\n\n          audioParam.setValueAtTime(values[values.length - 1], endTime);\n        } else {\n          if (audioParamRenderer === null) {\n            automationEventList.flush(audioNode.context.currentTime);\n          }\n\n          automationEventList.add(createSetValueCurveAutomationEvent(values, startTime, duration));\n          nativeAudioParam.setValueCurveAtTime(values, startTime, duration);\n        }\n\n        return audioParam;\n      }\n\n    };\n    audioParamStore.set(audioParam, nativeAudioParam);\n    audioParamAudioNodeStore.set(audioParam, audioNode);\n    addAudioParamConnections(audioParam, audioParamRenderer);\n    return audioParam;\n  };\n};","export const createAudioParamRenderer = automationEventList => {\n  return {\n    replay(audioParam) {\n      for (const automationEvent of automationEventList) {\n        if (automationEvent.type === 'exponentialRampToValue') {\n          const {\n            endTime,\n            value\n          } = automationEvent;\n          audioParam.exponentialRampToValueAtTime(value, endTime);\n        } else if (automationEvent.type === 'linearRampToValue') {\n          const {\n            endTime,\n            value\n          } = automationEvent;\n          audioParam.linearRampToValueAtTime(value, endTime);\n        } else if (automationEvent.type === 'setTarget') {\n          const {\n            startTime,\n            target,\n            timeConstant\n          } = automationEvent;\n          audioParam.setTargetAtTime(target, startTime, timeConstant);\n        } else if (automationEvent.type === 'setValue') {\n          const {\n            startTime,\n            value\n          } = automationEvent;\n          audioParam.setValueAtTime(value, startTime);\n        } else if (automationEvent.type === 'setValueCurve') {\n          const {\n            duration,\n            startTime,\n            values\n          } = automationEvent;\n          audioParam.setValueCurveAtTime(values, startTime, duration);\n        } else {\n          throw new Error(\"Can't apply an unknown automation.\");\n        }\n      }\n    }\n\n  };\n};","import { NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS } from '../globals';\nimport { ReadOnlyMap } from '../read-only-map';\nconst DEFAULT_OPTIONS = {\n  channelCount: 2,\n  // Bug #61: The channelCountMode should be 'max' according to the spec but is set to 'explicit' to achieve consistent behavior.\n  channelCountMode: 'explicit',\n  channelInterpretation: 'speakers',\n  numberOfInputs: 1,\n  numberOfOutputs: 1,\n  outputChannelCount: undefined,\n  parameterData: {},\n  processorOptions: {}\n};\n\nconst createChannelCount = length => {\n  const channelCount = [];\n\n  for (let i = 0; i < length; i += 1) {\n    channelCount.push(1);\n  }\n\n  return channelCount;\n};\n\nconst sanitizedOptions = options => {\n  return { ...options,\n    outputChannelCount: options.outputChannelCount !== undefined ? options.outputChannelCount : options.numberOfInputs === 1 && options.numberOfOutputs === 1 ?\n    /*\n     * Bug #61: This should be the computedNumberOfChannels, but unfortunately that is almost impossible to fake. That's why\n     * the channelCountMode is required to be 'explicit' as long as there is not a native implementation in every browser. That\n     * makes sure the computedNumberOfChannels is equivilant to the channelCount which makes it much easier to compute.\n     */\n    [options.channelCount] : createChannelCount(options.numberOfOutputs)\n  };\n};\n\nexport const createAudioWorkletNodeConstructor = (addUnrenderedAudioWorkletNode, audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, wrapEventListener) => {\n  return class AudioWorkletNode extends audioNodeConstructor {\n    constructor(context, name, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const mergedOptions = sanitizedOptions({ ...DEFAULT_OPTIONS,\n        ...options\n      });\n      const nodeNameToProcessorConstructorMap = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);\n      const processorConstructor = nodeNameToProcessorConstructorMap === undefined ? undefined : nodeNameToProcessorConstructorMap.get(name);\n      const nativeAudioWorkletNode = createNativeAudioWorkletNode(nativeContext, isOffline ? null : context.baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, mergedOptions);\n      const audioWorkletNodeRenderer = isOffline ? createAudioWorkletNodeRenderer(name, mergedOptions, processorConstructor) : null;\n      /*\n       * @todo Add a mechanism to switch an AudioWorkletNode to passive once the process() function of the AudioWorkletProcessor\n       * returns false.\n       */\n\n      super(context, true, nativeAudioWorkletNode, audioWorkletNodeRenderer);\n      const parameters = [];\n      nativeAudioWorkletNode.parameters.forEach((nativeAudioParam, nm) => {\n        const audioParam = createAudioParam(this, isOffline, nativeAudioParam);\n        parameters.push([nm, audioParam]);\n      });\n      this._nativeAudioWorkletNode = nativeAudioWorkletNode;\n      this._onprocessorerror = null;\n      this._parameters = new ReadOnlyMap(parameters);\n      /*\n       * Bug #86 & #87: Invoking the renderer of an AudioWorkletNode might be necessary if it has no direct or indirect connection to\n       * the destination.\n       */\n\n      if (isOffline) {\n        addUnrenderedAudioWorkletNode(nativeContext, this);\n      }\n    }\n\n    get onprocessorerror() {\n      return this._onprocessorerror;\n    }\n\n    set onprocessorerror(value) {\n      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n      this._nativeAudioWorkletNode.onprocessorerror = wrappedListener;\n      const nativeOnProcessorError = this._nativeAudioWorkletNode.onprocessorerror;\n      this._onprocessorerror = nativeOnProcessorError !== null && nativeOnProcessorError === wrappedListener ? value : nativeOnProcessorError;\n    }\n\n    get parameters() {\n      if (this._parameters === null) {\n        // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n        return this._nativeAudioWorkletNode.parameters;\n      }\n\n      return this._parameters;\n    }\n\n    get port() {\n      return this._nativeAudioWorkletNode.port;\n    }\n\n  };\n};","export const createBaseAudioContextConstructor = (addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor) => {\n  return class BaseAudioContext extends minimalBaseAudioContextConstructor {\n    constructor(_nativeContext, numberOfChannels) {\n      super(_nativeContext, numberOfChannels);\n      this._nativeContext = _nativeContext;\n      this._audioWorklet = addAudioWorkletModule === undefined ? undefined : {\n        addModule: (moduleURL, options) => {\n          return addAudioWorkletModule(this, moduleURL, options);\n        }\n      };\n    }\n\n    get audioWorklet() {\n      return this._audioWorklet;\n    }\n\n    createAnalyser() {\n      return new analyserNodeConstructor(this);\n    }\n\n    createBiquadFilter() {\n      return new biquadFilterNodeConstructor(this);\n    }\n\n    createBuffer(numberOfChannels, length, sampleRate) {\n      return new audioBufferConstructor({\n        length,\n        numberOfChannels,\n        sampleRate\n      });\n    }\n\n    createBufferSource() {\n      return new audioBufferSourceNodeConstructor(this);\n    }\n\n    createChannelMerger(numberOfInputs = 6) {\n      return new channelMergerNodeConstructor(this, {\n        numberOfInputs\n      });\n    }\n\n    createChannelSplitter(numberOfOutputs = 6) {\n      return new channelSplitterNodeConstructor(this, {\n        numberOfOutputs\n      });\n    }\n\n    createConstantSource() {\n      return new constantSourceNodeConstructor(this);\n    }\n\n    createConvolver() {\n      return new convolverNodeConstructor(this);\n    }\n\n    createDelay(maxDelayTime = 1) {\n      return new delayNodeConstructor(this, {\n        maxDelayTime\n      });\n    }\n\n    createDynamicsCompressor() {\n      return new dynamicsCompressorNodeConstructor(this);\n    }\n\n    createGain() {\n      return new gainNodeConstructor(this);\n    }\n\n    createIIRFilter(feedforward, feedback) {\n      return new iIRFilterNodeConstructor(this, {\n        feedback,\n        feedforward\n      });\n    }\n\n    createOscillator() {\n      return new oscillatorNodeConstructor(this);\n    }\n\n    createPanner() {\n      return new pannerNodeConstructor(this);\n    }\n\n    createPeriodicWave(real, imag, constraints = {\n      disableNormalization: false\n    }) {\n      return new periodicWaveConstructor(this, { ...constraints,\n        imag,\n        real\n      });\n    }\n\n    createStereoPanner() {\n      return new stereoPannerNodeConstructor(this);\n    }\n\n    createWaveShaper() {\n      return new waveShaperNodeConstructor(this);\n    }\n\n    decodeAudioData(audioData, successCallback, errorCallback) {\n      return decodeAudioData(this._nativeContext, audioData).then(audioBuffer => {\n        if (typeof successCallback === 'function') {\n          successCallback(audioBuffer);\n        }\n\n        return audioBuffer;\n      }).catch(err => {\n        if (typeof errorCallback === 'function') {\n          errorCallback(err);\n        }\n\n        throw err;\n      });\n    }\n\n  };\n};","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nconst DEFAULT_OPTIONS = {\n  Q: 1,\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  detune: 0,\n  frequency: 350,\n  gain: 0,\n  type: 'lowpass'\n};\nexport const createBiquadFilterNodeConstructor = (audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext) => {\n  return class BiquadFilterNode extends audioNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const biquadFilterNodeRenderer = isOffline ? createBiquadFilterNodeRenderer() : null;\n      super(context, false, nativeBiquadFilterNode, biquadFilterNodeRenderer); // Bug #80: Edge & Safari do not export the correct values for maxValue and minValue.\n\n      this._Q = createAudioParam(this, isOffline, nativeBiquadFilterNode.Q, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT); // Bug #78: Firefox & Safari do not export the correct values for maxValue and minValue.\n\n      this._detune = createAudioParam(this, isOffline, nativeBiquadFilterNode.detune, 1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT), -1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT));\n      /*\n       * Bug #77: Edge does not export the correct values for maxValue and minValue. Firefox & Safari do not export the correct value\n       * for minValue.\n       */\n\n      this._frequency = createAudioParam(this, isOffline, nativeBiquadFilterNode.frequency, context.sampleRate / 2, 0); // Bug #79: Firefox & Safari do not export the correct values for maxValue and minValue.\n\n      this._gain = createAudioParam(this, isOffline, nativeBiquadFilterNode.gain, 40 * Math.log10(MOST_POSITIVE_SINGLE_FLOAT), MOST_NEGATIVE_SINGLE_FLOAT);\n      this._nativeBiquadFilterNode = nativeBiquadFilterNode;\n    }\n\n    get detune() {\n      return this._detune;\n    }\n\n    get frequency() {\n      return this._frequency;\n    }\n\n    get gain() {\n      return this._gain;\n    }\n\n    get Q() {\n      return this._Q;\n    }\n\n    get type() {\n      return this._nativeBiquadFilterNode.type;\n    }\n\n    set type(value) {\n      this._nativeBiquadFilterNode.type = value;\n    }\n\n    getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n      this._nativeBiquadFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse); // Bug #68: Only Chrome, Firefox & Opera do throw an error if the parameters differ in their length.\n\n\n      if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n        throw createInvalidAccessError();\n      }\n    }\n\n  };\n};","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createBiquadFilterNodeRendererFactory = (connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeBiquadFilterNodes = new WeakMap();\n\n    const createBiquadFilterNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeBiquadFilterNode = getNativeAudioNode(proxy);\n      /*\n       * If the initially used nativeBiquadFilterNode was not constructed on the same OfflineAudioContext it needs to be created\n       * again.\n       */\n\n      const nativeBiquadFilterNodeIsOwnedByContext = isOwnedByContext(nativeBiquadFilterNode, nativeOfflineAudioContext);\n\n      if (!nativeBiquadFilterNodeIsOwnedByContext) {\n        const options = {\n          Q: nativeBiquadFilterNode.Q.value,\n          channelCount: nativeBiquadFilterNode.channelCount,\n          channelCountMode: nativeBiquadFilterNode.channelCountMode,\n          channelInterpretation: nativeBiquadFilterNode.channelInterpretation,\n          detune: nativeBiquadFilterNode.detune.value,\n          frequency: nativeBiquadFilterNode.frequency.value,\n          gain: nativeBiquadFilterNode.gain.value,\n          type: nativeBiquadFilterNode.type\n        };\n        nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext, nativeBiquadFilterNode);\n\n      if (!nativeBiquadFilterNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain, trace);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain, trace);\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode, trace);\n      return nativeBiquadFilterNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeBiquadFilterNode = renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeBiquadFilterNode !== undefined) {\n          return Promise.resolve(renderedNativeBiquadFilterNode);\n        }\n\n        return createBiquadFilterNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","export const createCacheTestResult = (ongoingTests, testResults) => {\n  return (tester, test) => {\n    const cachedTestResult = testResults.get(tester);\n\n    if (cachedTestResult !== undefined) {\n      return cachedTestResult;\n    }\n\n    const ongoingTest = ongoingTests.get(tester);\n\n    if (ongoingTest !== undefined) {\n      return ongoingTest;\n    }\n\n    try {\n      const synchronousTestResult = test();\n\n      if (synchronousTestResult instanceof Promise) {\n        ongoingTests.set(tester, synchronousTestResult);\n        return synchronousTestResult.catch(() => false).then(finalTestResult => {\n          ongoingTests.delete(tester);\n          testResults.set(tester, finalTestResult);\n          return finalTestResult;\n        });\n      }\n\n      testResults.set(tester, synchronousTestResult);\n      return synchronousTestResult;\n    } catch {\n      testResults.set(tester, false);\n      return false;\n    }\n  };\n};","const DEFAULT_OPTIONS = {\n  channelCount: 1,\n  channelCountMode: 'explicit',\n  channelInterpretation: 'speakers',\n  numberOfInputs: 6\n};\nexport const createChannelMergerNodeConstructor = (audioNodeConstructor, createChannelMergerNodeRenderer, createNativeChannelMergerNode, getNativeContext, isNativeOfflineAudioContext) => {\n  return class ChannelMergerNode extends audioNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeChannelMergerNode = createNativeChannelMergerNode(nativeContext, mergedOptions);\n      const channelMergerNodeRenderer = isNativeOfflineAudioContext(nativeContext) ? createChannelMergerNodeRenderer() : null;\n      super(context, false, nativeChannelMergerNode, channelMergerNodeRenderer);\n    }\n\n  };\n};","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createChannelMergerNodeRendererFactory = (createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeAudioNodes = new WeakMap();\n\n    const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeAudioNode = getNativeAudioNode(proxy); // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n\n      if (!nativeAudioNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeAudioNode.channelCount,\n          channelCountMode: nativeAudioNode.channelCountMode,\n          channelInterpretation: nativeAudioNode.channelInterpretation,\n          numberOfInputs: nativeAudioNode.numberOfInputs\n        };\n        nativeAudioNode = createNativeChannelMergerNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode, trace);\n      return nativeAudioNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAudioNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioNode);\n        }\n\n        return createAudioNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","const DEFAULT_OPTIONS = {\n  channelCount: 6,\n  channelCountMode: 'explicit',\n  channelInterpretation: 'discrete',\n  numberOfOutputs: 6\n};\n\nconst sanitizedOptions = options => {\n  return { ...options,\n    channelCount: options.numberOfOutputs\n  };\n};\n\nexport const createChannelSplitterNodeConstructor = (audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext) => {\n  return class ChannelSplitterNode extends audioNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = sanitizedOptions({ ...DEFAULT_OPTIONS,\n        ...options\n      });\n      const nativeChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, mergedOptions);\n      const channelSplitterNodeRenderer = isNativeOfflineAudioContext(nativeContext) ? createChannelSplitterNodeRenderer() : null;\n      super(context, false, nativeChannelSplitterNode, channelSplitterNodeRenderer);\n    }\n\n  };\n};","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createChannelSplitterNodeRendererFactory = (createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeAudioNodes = new WeakMap();\n\n    const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeAudioNode = getNativeAudioNode(proxy); // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n\n      if (!nativeAudioNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeAudioNode.channelCount,\n          channelCountMode: nativeAudioNode.channelCountMode,\n          channelInterpretation: nativeAudioNode.channelInterpretation,\n          numberOfOutputs: nativeAudioNode.numberOfOutputs\n        };\n        nativeAudioNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode, trace);\n      return nativeAudioNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAudioNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioNode);\n        }\n\n        return createAudioNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","export const createConnectAudioParam = renderInputsOfAudioParam => {\n  return (nativeOfflineAudioContext, audioParam, nativeAudioParam, trace) => {\n    return renderInputsOfAudioParam(audioParam, nativeOfflineAudioContext, nativeAudioParam, trace);\n  };\n};","import { isNativeAudioNode } from '../guards/native-audio-node';\nexport const createConnectMultipleOutputs = createIndexSizeError => {\n  return (outputAudioNodes, destination, output = 0, input = 0) => {\n    const outputAudioNode = outputAudioNodes[output];\n\n    if (outputAudioNode === undefined) {\n      throw createIndexSizeError();\n    }\n\n    if (isNativeAudioNode(destination)) {\n      return outputAudioNode.connect(destination, 0, input);\n    }\n\n    return outputAudioNode.connect(destination, 0);\n  };\n};","export const createConnectedNativeAudioBufferSourceNodeFactory = createNativeAudioBufferSourceNode => {\n  return (nativeContext, nativeAudioNode) => {\n    const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext);\n    const nativeAudioBuffer = nativeContext.createBuffer(1, 2, nativeContext.sampleRate);\n    nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;\n    nativeAudioBufferSourceNode.loop = true;\n    nativeAudioBufferSourceNode.connect(nativeAudioNode);\n    nativeAudioBufferSourceNode.start();\n    return () => {\n      nativeAudioBufferSourceNode.stop();\n      nativeAudioBufferSourceNode.disconnect(nativeAudioNode);\n    };\n  };\n};","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nconst DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  offset: 1\n};\nexport const createConstantSourceNodeConstructor = (audioNodeConstructor, createAudioParam, createConstantSourceNodeRendererFactory, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {\n  return class ConstantSourceNode extends audioNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeConstantSourceNode = createNativeConstantSourceNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const constantSourceNodeRenderer = isOffline ? createConstantSourceNodeRendererFactory() : null;\n      super(context, false, nativeConstantSourceNode, constantSourceNodeRenderer);\n      this._constantSourceNodeRenderer = constantSourceNodeRenderer;\n      this._nativeConstantSourceNode = nativeConstantSourceNode;\n      /*\n       * Bug #62 & #74: Edge & Safari do not support ConstantSourceNodes and do not export the correct values for maxValue and\n       * minValue for GainNodes.\n       */\n\n      this._offset = createAudioParam(this, isOffline, nativeConstantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      this._onended = null;\n    }\n\n    get offset() {\n      return this._offset;\n    }\n\n    get onended() {\n      return this._onended;\n    }\n\n    set onended(value) {\n      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n      this._nativeConstantSourceNode.onended = wrappedListener;\n      const nativeOnEnded = this._nativeConstantSourceNode.onended;\n      this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n    }\n\n    start(when = 0) {\n      this._nativeConstantSourceNode.start(when);\n\n      if (this._constantSourceNodeRenderer !== null) {\n        this._constantSourceNodeRenderer.start = when;\n      } else {\n        setInternalStateToActive(this);\n\n        const resetInternalStateToPassive = () => {\n          this._nativeConstantSourceNode.removeEventListener('ended', resetInternalStateToPassive); // @todo Determine a meaningful delay instead of just using one second.\n\n\n          setTimeout(() => setInternalStateToPassive(this), 1000);\n        };\n\n        this._nativeConstantSourceNode.addEventListener('ended', resetInternalStateToPassive);\n      }\n    }\n\n    stop(when = 0) {\n      this._nativeConstantSourceNode.stop(when);\n\n      if (this._constantSourceNodeRenderer !== null) {\n        this._constantSourceNodeRenderer.stop = when;\n      }\n    }\n\n  };\n};","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createConstantSourceNodeRendererFactory = (connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeConstantSourceNodes = new WeakMap();\n    let start = null;\n    let stop = null;\n\n    const createConstantSourceNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeConstantSourceNode = getNativeAudioNode(proxy);\n      /*\n       * If the initially used nativeConstantSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n       * again.\n       */\n\n      const nativeConstantSourceNodeIsOwnedByContext = isOwnedByContext(nativeConstantSourceNode, nativeOfflineAudioContext);\n\n      if (!nativeConstantSourceNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeConstantSourceNode.channelCount,\n          channelCountMode: nativeConstantSourceNode.channelCountMode,\n          channelInterpretation: nativeConstantSourceNode.channelInterpretation,\n          offset: nativeConstantSourceNode.offset.value\n        };\n        nativeConstantSourceNode = createNativeConstantSourceNode(nativeOfflineAudioContext, options);\n\n        if (start !== null) {\n          nativeConstantSourceNode.start(start);\n        }\n\n        if (stop !== null) {\n          nativeConstantSourceNode.stop(stop);\n        }\n      }\n\n      renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext, nativeConstantSourceNode);\n\n      if (!nativeConstantSourceNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset, trace);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset, trace);\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConstantSourceNode, trace);\n      return nativeConstantSourceNode;\n    };\n\n    return {\n      set start(value) {\n        start = value;\n      },\n\n      set stop(value) {\n        stop = value;\n      },\n\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeConstantSourceNode = renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeConstantSourceNode !== undefined) {\n          return Promise.resolve(renderedNativeConstantSourceNode);\n        }\n\n        return createConstantSourceNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","export const createConvertNumberToUnsignedLong = unit32Array => {\n  return value => {\n    unit32Array[0] = value;\n    return unit32Array[0];\n  };\n};","const DEFAULT_OPTIONS = {\n  buffer: null,\n  channelCount: 2,\n  channelCountMode: 'clamped-max',\n  channelInterpretation: 'speakers',\n  disableNormalization: false\n};\nexport const createConvolverNodeConstructor = (audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext) => {\n  return class ConvolverNode extends audioNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeConvolverNode = createNativeConvolverNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const convolverNodeRenderer = isOffline ? createConvolverNodeRenderer() : null;\n      super(context, false, nativeConvolverNode, convolverNodeRenderer);\n      this._isBufferNullified = false;\n      this._nativeConvolverNode = nativeConvolverNode;\n    }\n\n    get buffer() {\n      if (this._isBufferNullified) {\n        return null;\n      }\n\n      return this._nativeConvolverNode.buffer;\n    }\n\n    set buffer(value) {\n      this._nativeConvolverNode.buffer = value; // Bug #115: Safari does not allow to set the buffer to null.\n\n      if (value === null && this._nativeConvolverNode.buffer !== null) {\n        const nativeContext = this._nativeConvolverNode.context;\n        this._nativeConvolverNode.buffer = nativeContext.createBuffer(1, 1, nativeContext.sampleRate);\n        this._isBufferNullified = true;\n      } else {\n        this._isBufferNullified = false;\n      }\n    }\n\n    get normalize() {\n      return this._nativeConvolverNode.normalize;\n    }\n\n    set normalize(value) {\n      this._nativeConvolverNode.normalize = value;\n    }\n\n  };\n};","import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createConvolverNodeRendererFactory = (createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeConvolverNodes = new WeakMap();\n\n    const createConvolverNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeConvolverNode = getNativeAudioNode(proxy); // If the initially used nativeConvolverNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeConvolverNodeIsOwnedByContext = isOwnedByContext(nativeConvolverNode, nativeOfflineAudioContext);\n\n      if (!nativeConvolverNodeIsOwnedByContext) {\n        const options = {\n          buffer: nativeConvolverNode.buffer,\n          channelCount: nativeConvolverNode.channelCount,\n          channelCountMode: nativeConvolverNode.channelCountMode,\n          channelInterpretation: nativeConvolverNode.channelInterpretation,\n          disableNormalization: !nativeConvolverNode.normalize\n        };\n        nativeConvolverNode = createNativeConvolverNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeConvolverNodes.set(nativeOfflineAudioContext, nativeConvolverNode);\n\n      if (isNativeAudioNodeFaker(nativeConvolverNode)) {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode.inputs[0], trace);\n      } else {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode, trace);\n      }\n\n      return nativeConvolverNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeConvolverNode = renderedNativeConvolverNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeConvolverNode !== undefined) {\n          return Promise.resolve(renderedNativeConvolverNode);\n        }\n\n        return createConvolverNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","export const createCreateNativeOfflineAudioContext = (createNotSupportedError, nativeOfflineAudioContextConstructor) => {\n  return (numberOfChannels, length, sampleRate) => {\n    if (nativeOfflineAudioContextConstructor === null) {\n      throw new Error('Missing the native OfflineAudioContext constructor.');\n    }\n\n    try {\n      return new nativeOfflineAudioContextConstructor(numberOfChannels, length, sampleRate);\n    } catch (err) {\n      // Bug #143, #144 & #146: Safari throws a SyntaxError when numberOfChannels, length or sampleRate are invalid.\n      // Bug #143: Edge throws a SyntaxError when numberOfChannels or length are invalid.\n      // Bug #145: Edge throws an IndexSizeError when sampleRate is zero.\n      if (err.name === 'IndexSizeError' || err.name === 'SyntaxError') {\n        throw createNotSupportedError();\n      }\n\n      throw err;\n    }\n  };\n};","export const createDataCloneError = () => {\n  try {\n    return new DOMException('', 'DataCloneError');\n  } catch (err) {\n    // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n    err.code = 25;\n    err.name = 'DataCloneError';\n    return err;\n  }\n};","import { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nexport const createDecrementCycleCounter = (connectNativeAudioNodeToNativeAudioNode, cycleCounters, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext) => {\n  return (audioNode, count) => {\n    const cycleCounter = cycleCounters.get(audioNode);\n\n    if (cycleCounter === undefined) {\n      throw new Error('Missing the expected cycle count.');\n    }\n\n    const nativeContext = getNativeContext(audioNode.context);\n    const isOffline = isNativeOfflineAudioContext(nativeContext);\n\n    if (cycleCounter === count) {\n      cycleCounters.delete(audioNode);\n\n      if (!isOffline && isActiveAudioNode(audioNode)) {\n        const nativeSourceAudioNode = getNativeAudioNode(audioNode);\n        const {\n          outputs\n        } = getAudioNodeConnections(audioNode);\n\n        for (const output of outputs) {\n          if (isAudioNodeOutputConnection(output)) {\n            const nativeDestinationAudioNode = getNativeAudioNode(output[0]);\n            connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);\n          } else {\n            const nativeDestinationAudioParam = getNativeAudioParam(output[0]);\n            nativeSourceAudioNode.connect(nativeDestinationAudioParam, output[1]);\n          }\n        }\n      }\n    } else {\n      cycleCounters.set(audioNode, cycleCounter - count);\n    }\n  };\n};","const DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  delayTime: 0,\n  maxDelayTime: 1\n};\nexport const createDelayNodeConstructor = (audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext) => {\n  return class DelayNode extends audioNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeDelayNode = createNativeDelayNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const delayNodeRenderer = isOffline ? createDelayNodeRenderer(mergedOptions.maxDelayTime) : null;\n      super(context, false, nativeDelayNode, delayNodeRenderer); // Bug #161: Edge does not export the correct values for maxValue and minValue.\n\n      this._delayTime = createAudioParam(this, isOffline, nativeDelayNode.delayTime, mergedOptions.maxDelayTime, 0);\n    }\n\n    get delayTime() {\n      return this._delayTime;\n    }\n\n  };\n};","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createDelayNodeRendererFactory = (connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return maxDelayTime => {\n    const renderedNativeDelayNodes = new WeakMap();\n\n    const createDelayNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeDelayNode = getNativeAudioNode(proxy); // If the initially used nativeDelayNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeDelayNodeIsOwnedByContext = isOwnedByContext(nativeDelayNode, nativeOfflineAudioContext);\n\n      if (!nativeDelayNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeDelayNode.channelCount,\n          channelCountMode: nativeDelayNode.channelCountMode,\n          channelInterpretation: nativeDelayNode.channelInterpretation,\n          delayTime: nativeDelayNode.delayTime.value,\n          maxDelayTime\n        };\n        nativeDelayNode = createNativeDelayNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);\n\n      if (!nativeDelayNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime, trace);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime, trace);\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDelayNode, trace);\n      return nativeDelayNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeDelayNode !== undefined) {\n          return Promise.resolve(renderedNativeDelayNode);\n        }\n\n        return createDelayNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","export const createDeleteUnrenderedAudioWorkletNode = getUnrenderedAudioWorkletNodes => {\n  return (nativeContext, audioWorkletNode) => {\n    getUnrenderedAudioWorkletNodes(nativeContext).delete(audioWorkletNode);\n  };\n};","import { isNativeAudioNode } from '../guards/native-audio-node';\n\nconst getOutputAudioNodeAtIndex = (createIndexSizeError, outputAudioNodes, output) => {\n  const outputAudioNode = outputAudioNodes[output];\n\n  if (outputAudioNode === undefined) {\n    throw createIndexSizeError();\n  }\n\n  return outputAudioNode;\n};\n\nexport const createDisconnectMultipleOutputs = createIndexSizeError => {\n  return (outputAudioNodes, destinationOrOutput = undefined, output = undefined, input = 0) => {\n    if (destinationOrOutput === undefined) {\n      return outputAudioNodes.forEach(outputAudioNode => outputAudioNode.disconnect());\n    }\n\n    if (typeof destinationOrOutput === 'number') {\n      return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, destinationOrOutput).disconnect();\n    }\n\n    if (isNativeAudioNode(destinationOrOutput)) {\n      if (output === undefined) {\n        return outputAudioNodes.forEach(outputAudioNode => outputAudioNode.disconnect(destinationOrOutput));\n      }\n\n      if (input === undefined) {\n        return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0);\n      }\n\n      return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0, input);\n    }\n\n    if (output === undefined) {\n      return outputAudioNodes.forEach(outputAudioNode => outputAudioNode.disconnect(destinationOrOutput));\n    }\n\n    return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0);\n  };\n};","const DEFAULT_OPTIONS = {\n  attack: 0.003,\n  channelCount: 2,\n  channelCountMode: 'clamped-max',\n  channelInterpretation: 'speakers',\n  knee: 30,\n  ratio: 12,\n  release: 0.25,\n  threshold: -24\n};\nexport const createDynamicsCompressorNodeConstructor = (audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext) => {\n  return class DynamicsCompressorNode extends audioNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const dynamicsCompressorNodeRenderer = isOffline ? createDynamicsCompressorNodeRenderer() : null;\n      super(context, false, nativeDynamicsCompressorNode, dynamicsCompressorNodeRenderer); // Bug #110: Edge does not export the correct values for maxValue and minValue.\n\n      this._attack = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.attack, 1, 0);\n      this._knee = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.knee, 40, 0);\n      this._nativeDynamicsCompressorNode = nativeDynamicsCompressorNode;\n      this._ratio = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.ratio, 20, 1);\n      this._release = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.release, 1, 0);\n      this._threshold = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.threshold, 0, -100);\n    }\n\n    get attack() {\n      return this._attack;\n    }\n    /*\n     * Bug #108: Only Chrome, Firefox and Opera disallow a channelCount of three and above yet which is why the getter and setter needs\n     * to be overwritten here.\n     */\n\n\n    get channelCount() {\n      return this._nativeDynamicsCompressorNode.channelCount;\n    }\n\n    set channelCount(value) {\n      const previousChannelCount = this._nativeDynamicsCompressorNode.channelCount;\n      this._nativeDynamicsCompressorNode.channelCount = value;\n\n      if (value > 2) {\n        this._nativeDynamicsCompressorNode.channelCount = previousChannelCount;\n        throw createNotSupportedError();\n      }\n    }\n    /*\n     * Bug #109: Only Chrome, Firefox and Opera disallow a channelCountMode of 'max' yet which is why the getter and setter needs to be\n     * overwritten here.\n     */\n\n\n    get channelCountMode() {\n      return this._nativeDynamicsCompressorNode.channelCountMode;\n    }\n\n    set channelCountMode(value) {\n      const previousChannelCount = this._nativeDynamicsCompressorNode.channelCountMode;\n      this._nativeDynamicsCompressorNode.channelCountMode = value;\n\n      if (value === 'max') {\n        this._nativeDynamicsCompressorNode.channelCountMode = previousChannelCount;\n        throw createNotSupportedError();\n      }\n    }\n\n    get knee() {\n      return this._knee;\n    }\n\n    get ratio() {\n      return this._ratio;\n    }\n\n    get reduction() {\n      // Bug #111: Safari returns an AudioParam instead of a number.\n      if (typeof this._nativeDynamicsCompressorNode.reduction.value === 'number') {\n        return this._nativeDynamicsCompressorNode.reduction.value;\n      }\n\n      return this._nativeDynamicsCompressorNode.reduction;\n    }\n\n    get release() {\n      return this._release;\n    }\n\n    get threshold() {\n      return this._threshold;\n    }\n\n  };\n};","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createDynamicsCompressorNodeRendererFactory = (connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeDynamicsCompressorNodes = new WeakMap();\n\n    const createDynamicsCompressorNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeDynamicsCompressorNode = getNativeAudioNode(proxy);\n      /*\n       * If the initially used nativeDynamicsCompressorNode was not constructed on the same OfflineAudioContext it needs to be\n       * created again.\n       */\n\n      const nativeDynamicsCompressorNodeIsOwnedByContext = isOwnedByContext(nativeDynamicsCompressorNode, nativeOfflineAudioContext);\n\n      if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n        const options = {\n          attack: nativeDynamicsCompressorNode.attack.value,\n          channelCount: nativeDynamicsCompressorNode.channelCount,\n          channelCountMode: nativeDynamicsCompressorNode.channelCountMode,\n          channelInterpretation: nativeDynamicsCompressorNode.channelInterpretation,\n          knee: nativeDynamicsCompressorNode.knee.value,\n          ratio: nativeDynamicsCompressorNode.ratio.value,\n          release: nativeDynamicsCompressorNode.release.value,\n          threshold: nativeDynamicsCompressorNode.threshold.value\n        };\n        nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n\n      if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold, trace);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold, trace);\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDynamicsCompressorNode, trace);\n      return nativeDynamicsCompressorNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeDynamicsCompressorNode = renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeDynamicsCompressorNode !== undefined) {\n          return Promise.resolve(renderedNativeDynamicsCompressorNode);\n        }\n\n        return createDynamicsCompressorNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","export const createEncodingError = () => {\n  try {\n    return new DOMException('', 'EncodingError');\n  } catch (err) {\n    // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n    err.code = 0;\n    err.name = 'EncodingError';\n    return err;\n  }\n};","export const createEvaluateSource = window => {\n  return source => new Promise((resolve, reject) => {\n    if (window === null) {\n      reject(new SyntaxError());\n      return;\n    }\n\n    const head = window.document.head;\n\n    if (head === null) {\n      reject(new SyntaxError());\n    } else {\n      const script = window.document.createElement('script'); // @todo Safari doesn't like URLs with a type of 'application/javascript; charset=utf-8'.\n\n      const blob = new Blob([source], {\n        type: 'application/javascript'\n      });\n      const url = URL.createObjectURL(blob);\n      const originalOnErrorHandler = window.onerror;\n\n      const removeErrorEventListenerAndRevokeUrl = () => {\n        window.onerror = originalOnErrorHandler;\n        URL.revokeObjectURL(url);\n      };\n\n      window.onerror = (message, src, lineno, colno, error) => {\n        // @todo Edge thinks the source is the one of the html document.\n        if (src === url || src === window.location.href && lineno === 1 && colno === 1) {\n          removeErrorEventListenerAndRevokeUrl();\n          reject(error);\n          return false;\n        }\n\n        if (originalOnErrorHandler !== null) {\n          return originalOnErrorHandler(message, src, lineno, colno, error);\n        }\n      };\n\n      script.onerror = () => {\n        removeErrorEventListenerAndRevokeUrl();\n        reject(new SyntaxError());\n      };\n\n      script.onload = () => {\n        removeErrorEventListenerAndRevokeUrl();\n        resolve();\n      };\n\n      script.src = url;\n      script.type = 'module';\n      head.appendChild(script);\n    }\n  });\n};","export const createEventTargetConstructor = wrapEventListener => {\n  return class EventTarget {\n    constructor(_nativeEventTarget) {\n      this._nativeEventTarget = _nativeEventTarget;\n      this._listeners = new WeakMap();\n    }\n\n    addEventListener(type, listener, options) {\n      if (listener !== null) {\n        let wrappedEventListener = this._listeners.get(listener);\n\n        if (wrappedEventListener === undefined) {\n          wrappedEventListener = wrapEventListener(this, listener);\n\n          if (typeof listener === 'function') {\n            this._listeners.set(listener, wrappedEventListener);\n          }\n        }\n\n        this._nativeEventTarget.addEventListener(type, wrappedEventListener, options);\n      }\n    }\n\n    dispatchEvent(event) {\n      return this._nativeEventTarget.dispatchEvent(event);\n    }\n\n    removeEventListener(type, listener, options) {\n      const wrappedEventListener = listener === null ? undefined : this._listeners.get(listener);\n\n      this._nativeEventTarget.removeEventListener(type, wrappedEventListener === undefined ? null : wrappedEventListener, options);\n    }\n\n  };\n};","export const createExposeCurrentFrameAndCurrentTime = window => {\n  return (currentTime, sampleRate, fn) => {\n    Object.defineProperties(window, {\n      currentFrame: {\n        configurable: true,\n\n        get() {\n          return Math.round(currentTime * sampleRate);\n        }\n\n      },\n      currentTime: {\n        configurable: true,\n\n        get() {\n          return currentTime;\n        }\n\n      }\n    });\n\n    try {\n      return fn();\n    } finally {\n      if (window !== null) {\n        delete window.currentFrame;\n        delete window.currentTime;\n      }\n    }\n  };\n};","export const createFetchSource = createAbortError => {\n  return async url => {\n    try {\n      const response = await fetch(url);\n\n      if (response.ok) {\n        return response.text();\n      }\n    } catch {}\n    /* Ignore errors. */\n    // tslint:disable-line:no-empty\n\n\n    throw createAbortError();\n  };\n};","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nconst DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  gain: 1\n};\nexport const createGainNodeConstructor = (audioNodeConstructor, createAudioParam, createGainNodeRenderer, createNativeGainNode, getNativeContext, isNativeOfflineAudioContext) => {\n  return class GainNode extends audioNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeGainNode = createNativeGainNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const gainNodeRenderer = isOffline ? createGainNodeRenderer() : null;\n      super(context, false, nativeGainNode, gainNodeRenderer); // Bug #74: Edge & Safari do not export the correct values for maxValue and minValue.\n\n      this._gain = createAudioParam(this, isOffline, nativeGainNode.gain, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n    }\n\n    get gain() {\n      return this._gain;\n    }\n\n  };\n};","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createGainNodeRendererFactory = (connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeGainNodes = new WeakMap();\n\n    const createGainNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeGainNode = getNativeAudioNode(proxy); // If the initially used nativeGainNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeGainNodeIsOwnedByContext = isOwnedByContext(nativeGainNode, nativeOfflineAudioContext);\n\n      if (!nativeGainNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeGainNode.channelCount,\n          channelCountMode: nativeGainNode.channelCountMode,\n          channelInterpretation: nativeGainNode.channelInterpretation,\n          gain: nativeGainNode.gain.value\n        };\n        nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeGainNodes.set(nativeOfflineAudioContext, nativeGainNode);\n\n      if (!nativeGainNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain, trace);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain, trace);\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeGainNode, trace);\n      return nativeGainNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeGainNode = renderedNativeGainNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeGainNode !== undefined) {\n          return Promise.resolve(renderedNativeGainNode);\n        }\n\n        return createGainNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","export const createGetAudioNodeRenderer = getAudioNodeConnections => {\n  return audioNode => {\n    const audioNodeConnections = getAudioNodeConnections(audioNode);\n\n    if (audioNodeConnections.renderer === null) {\n      throw new Error('Missing the renderer of the given AudioNode in the audio graph.');\n    }\n\n    return audioNodeConnections.renderer;\n  };\n};","export const createGetAudioParamRenderer = getAudioParamConnections => {\n  return audioParam => {\n    const audioParamConnections = getAudioParamConnections(audioParam);\n\n    if (audioParamConnections.renderer === null) {\n      throw new Error('Missing the renderer of the given AudioParam in the audio graph.');\n    }\n\n    return audioParamConnections.renderer;\n  };\n};","import { BACKUP_NATIVE_CONTEXT_STORE } from '../globals';\nexport const createGetBackupNativeContext = (isNativeOfflineAudioContext, nativeAudioContextConstructor, nativeOfflineAudioContextConstructor) => {\n  return nativeContext => {\n    /*\n     * Bug #50: Only Edge does currently not allow to create AudioNodes on a closed context yet which is why there needs to be no\n     * backupNativeContext in that case.\n     */\n    if (nativeContext.state === 'closed' && nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name !== 'webkitAudioContext') {\n      if (isNativeOfflineAudioContext(nativeContext)) {\n        const backupNativeContext = BACKUP_NATIVE_CONTEXT_STORE.get(nativeContext);\n\n        if (backupNativeContext !== undefined) {\n          return backupNativeContext;\n        }\n\n        if (nativeOfflineAudioContextConstructor !== null) {\n          // @todo Copy the attached AudioWorkletProcessors and other settings.\n          const bckpNtveCntxt = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n          BACKUP_NATIVE_CONTEXT_STORE.set(nativeContext, bckpNtveCntxt);\n          return bckpNtveCntxt;\n        }\n      } else {\n        const backupNativeContext = BACKUP_NATIVE_CONTEXT_STORE.get(nativeContext);\n\n        if (backupNativeContext !== undefined) {\n          return backupNativeContext;\n        } // @todo Copy the attached AudioWorkletProcessors and other settings.\n\n\n        const bckpNtveCntxt = new nativeAudioContextConstructor();\n        BACKUP_NATIVE_CONTEXT_STORE.set(nativeContext, bckpNtveCntxt);\n        return bckpNtveCntxt;\n      }\n    }\n\n    return null;\n  };\n};","import { createInvalidStateError } from './invalid-state-error';\nexport const createGetNativeContext = contextStore => {\n  return context => {\n    const nativeContext = contextStore.get(context);\n\n    if (nativeContext === undefined) {\n      throw createInvalidStateError();\n    }\n\n    return nativeContext;\n  };\n};","export const createGetUnrenderedAudioWorkletNodes = unrenderedAudioWorkletNodeStore => {\n  return nativeContext => {\n    const unrenderedAudioWorkletNodes = unrenderedAudioWorkletNodeStore.get(nativeContext);\n\n    if (unrenderedAudioWorkletNodes === undefined) {\n      throw new Error('The context has no set of AudioWorkletNodes.');\n    }\n\n    return unrenderedAudioWorkletNodes;\n  };\n};","import { filterBuffer } from '../helpers/filter-buffer';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\n\nconst filterFullBuffer = (renderedBuffer, nativeOfflineAudioContext, feedback, feedforward) => {\n  const feedbackLength = feedback.length;\n  const feedforwardLength = feedforward.length;\n  const minLength = Math.min(feedbackLength, feedforwardLength);\n\n  if (feedback[0] !== 1) {\n    for (let i = 0; i < feedbackLength; i += 1) {\n      feedforward[i] /= feedback[0];\n    }\n\n    for (let i = 1; i < feedforwardLength; i += 1) {\n      feedback[i] /= feedback[0];\n    }\n  }\n\n  const bufferLength = 32;\n  const xBuffer = new Float32Array(bufferLength);\n  const yBuffer = new Float32Array(bufferLength);\n  const filteredBuffer = nativeOfflineAudioContext.createBuffer(renderedBuffer.numberOfChannels, renderedBuffer.length, renderedBuffer.sampleRate);\n  const numberOfChannels = renderedBuffer.numberOfChannels;\n\n  for (let i = 0; i < numberOfChannels; i += 1) {\n    const input = renderedBuffer.getChannelData(i);\n    const output = filteredBuffer.getChannelData(i);\n    xBuffer.fill(0);\n    yBuffer.fill(0);\n    filterBuffer(feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffer, yBuffer, 0, bufferLength, input, output);\n  }\n\n  return filteredBuffer;\n};\n\nexport const createIIRFilterNodeRendererFactory = (createNativeAudioBufferSourceNode, createNativeAudioNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {\n  return (feedback, feedforward) => {\n    const renderedNativeAudioNodes = new WeakMap();\n    let filteredBufferPromise = null;\n\n    const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeAudioBufferSourceNode = null;\n      let nativeIIRFilterNode = getNativeAudioNode(proxy); // If the initially used nativeIIRFilterNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeIIRFilterNodeIsOwnedByContext = isOwnedByContext(nativeIIRFilterNode, nativeOfflineAudioContext); // Bug #9: Safari does not support IIRFilterNodes.\n\n      if (nativeOfflineAudioContext.createIIRFilter === undefined) {\n        nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext);\n      } else if (!nativeIIRFilterNodeIsOwnedByContext) {\n        nativeIIRFilterNode = createNativeAudioNode(nativeOfflineAudioContext, ntvCntxt => {\n          return ntvCntxt.createIIRFilter(feedforward, feedback);\n        });\n      }\n\n      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode === null ? nativeIIRFilterNode : nativeAudioBufferSourceNode);\n\n      if (nativeAudioBufferSourceNode !== null) {\n        if (filteredBufferPromise === null) {\n          if (nativeOfflineAudioContextConstructor === null) {\n            throw new Error('Missing the native OfflineAudioContext constructor.');\n          }\n\n          const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor( // Bug #47: The AudioDestinationNode in Edge and Safari gets not initialized correctly.\n          proxy.context.destination.channelCount, // Bug #17: Safari does not yet expose the length.\n          proxy.context.length, nativeOfflineAudioContext.sampleRate);\n\n          filteredBufferPromise = (async () => {\n            await renderInputsOfAudioNode(proxy, partialOfflineAudioContext, partialOfflineAudioContext.destination, trace);\n            const renderedBuffer = await renderNativeOfflineAudioContext(partialOfflineAudioContext);\n            return filterFullBuffer(renderedBuffer, nativeOfflineAudioContext, feedback, feedforward);\n          })();\n        }\n\n        const filteredBuffer = await filteredBufferPromise;\n        nativeAudioBufferSourceNode.buffer = filteredBuffer;\n        nativeAudioBufferSourceNode.start(0);\n        return nativeAudioBufferSourceNode;\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeIIRFilterNode, trace);\n      return nativeIIRFilterNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAudioNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioNode);\n        }\n\n        return createAudioNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","import { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nexport const createIncrementCycleCounterFactory = (cycleCounters, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, isActiveAudioNode) => {\n  return isOffline => {\n    return (audioNode, count) => {\n      const cycleCounter = cycleCounters.get(audioNode);\n\n      if (cycleCounter === undefined) {\n        if (!isOffline && isActiveAudioNode(audioNode)) {\n          const nativeSourceAudioNode = getNativeAudioNode(audioNode);\n          const {\n            outputs\n          } = getAudioNodeConnections(audioNode);\n\n          for (const output of outputs) {\n            if (isAudioNodeOutputConnection(output)) {\n              const nativeDestinationAudioNode = getNativeAudioNode(output[0]);\n              disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);\n            } else {\n              const nativeDestinationAudioParam = getNativeAudioParam(output[0]);\n              nativeSourceAudioNode.disconnect(nativeDestinationAudioParam, output[1]);\n            }\n          }\n        }\n\n        cycleCounters.set(audioNode, count);\n      } else {\n        cycleCounters.set(audioNode, cycleCounter + count);\n      }\n    };\n  };\n};","export const createIsAnyAudioContext = (contextStore, isNativeAudioContext) => {\n  return anything => {\n    const nativeContext = contextStore.get(anything);\n    return isNativeAudioContext(nativeContext) || isNativeAudioContext(anything);\n  };\n};","export const createIsAnyAudioNode = (audioNodeStore, isNativeAudioNode) => {\n  return anything => audioNodeStore.has(anything) || isNativeAudioNode(anything);\n};","export const createIsAnyAudioParam = (audioParamStore, isNativeAudioParam) => {\n  return anything => audioParamStore.has(anything) || isNativeAudioParam(anything);\n};","export const createIsAnyOfflineAudioContext = (contextStore, isNativeOfflineAudioContext) => {\n  return anything => {\n    const nativeContext = contextStore.get(anything);\n    return isNativeOfflineAudioContext(nativeContext) || isNativeOfflineAudioContext(anything);\n  };\n};","export const createIsNativeAudioContext = nativeAudioContextConstructor => {\n  return anything => {\n    return nativeAudioContextConstructor !== null && anything instanceof nativeAudioContextConstructor;\n  };\n};","export const createIsNativeAudioNode = window => {\n  return anything => {\n    return window !== null && typeof window.AudioNode === 'function' && anything instanceof window.AudioNode;\n  };\n};","export const createIsNativeAudioParam = window => {\n  return anything => {\n    return window !== null && typeof window.AudioParam === 'function' && anything instanceof window.AudioParam;\n  };\n};","export const createIsNativeContext = (isNativeAudioContext, isNativeOfflineAudioContext) => {\n  return anything => {\n    return isNativeAudioContext(anything) || isNativeOfflineAudioContext(anything);\n  };\n};","export const createIsNativeOfflineAudioContext = nativeOfflineAudioContextConstructor => {\n  return anything => {\n    return nativeOfflineAudioContextConstructor !== null && anything instanceof nativeOfflineAudioContextConstructor;\n  };\n};","export const createIsSecureContext = window => window !== null && window.isSecureContext;","export const createIsSupportedPromise = async (cacheTestResult, testAudioBufferCopyChannelMethodsSubarraySupport, testAudioContextCloseMethodSupport, testAudioContextDecodeAudioDataMethodTypeErrorSupport, testAudioContextOptionsSupport, testAudioNodeConnectMethodSupport, testAudioWorkletProcessorNoOutputsSupport, testChannelMergerNodeChannelCountSupport, testConstantSourceNodeAccurateSchedulingSupport, testConvolverNodeBufferReassignabilitySupport, testIsSecureContextSupport, testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport, testStereoPannerNodeDefaultValueSupport, testTransferablesSupport) => {\n  if (cacheTestResult(testAudioBufferCopyChannelMethodsSubarraySupport, testAudioBufferCopyChannelMethodsSubarraySupport) && cacheTestResult(testAudioContextCloseMethodSupport, testAudioContextCloseMethodSupport) && cacheTestResult(testAudioContextOptionsSupport, testAudioContextOptionsSupport) && cacheTestResult(testAudioNodeConnectMethodSupport, testAudioNodeConnectMethodSupport) && cacheTestResult(testChannelMergerNodeChannelCountSupport, testChannelMergerNodeChannelCountSupport) && cacheTestResult(testConstantSourceNodeAccurateSchedulingSupport, testConstantSourceNodeAccurateSchedulingSupport) && cacheTestResult(testConvolverNodeBufferReassignabilitySupport, testConvolverNodeBufferReassignabilitySupport) && cacheTestResult(testIsSecureContextSupport, testIsSecureContextSupport) && cacheTestResult(testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport, testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport)) {\n    const results = await Promise.all([cacheTestResult(testAudioContextDecodeAudioDataMethodTypeErrorSupport, testAudioContextDecodeAudioDataMethodTypeErrorSupport), cacheTestResult(testAudioWorkletProcessorNoOutputsSupport, testAudioWorkletProcessorNoOutputsSupport), cacheTestResult(testStereoPannerNodeDefaultValueSupport, testStereoPannerNodeDefaultValueSupport), cacheTestResult(testTransferablesSupport, testTransferablesSupport)]);\n    return results.every(result => result);\n  }\n\n  return false;\n};","export const createMediaElementAudioSourceNodeConstructor = (audioNodeConstructor, createNativeMediaElementAudioSourceNode, getNativeContext, isNativeOfflineAudioContext) => {\n  return class MediaElementAudioSourceNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const nativeMediaElementAudioSourceNode = createNativeMediaElementAudioSourceNode(nativeContext, options); // Bug #171: Safari allows to create a MediaElementAudioSourceNode with an OfflineAudioContext.\n\n      if (isNativeOfflineAudioContext(nativeContext)) {\n        throw TypeError();\n      }\n\n      super(context, true, nativeMediaElementAudioSourceNode, null); // Bug #63: Edge does not expose the mediaElement yet.\n\n      this._mediaElement = options.mediaElement;\n      this._nativeMediaElementAudioSourceNode = nativeMediaElementAudioSourceNode;\n    }\n\n    get mediaElement() {\n      return this._nativeMediaElementAudioSourceNode.mediaElement === undefined ? this._mediaElement : this._nativeMediaElementAudioSourceNode.mediaElement;\n    }\n\n  };\n};","const DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'explicit',\n  channelInterpretation: 'speakers'\n};\nexport const createMediaStreamAudioDestinationNodeConstructor = (audioNodeConstructor, createNativeMediaStreamAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext) => {\n  return class MediaStreamAudioDestinationNode extends audioNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context); // Bug #173: Safari allows to create a MediaStreamAudioDestinationNode with an OfflineAudioContext.\n\n      if (isNativeOfflineAudioContext(nativeContext)) {\n        throw new TypeError();\n      }\n\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeMediaStreamAudioDestinationNode = createNativeMediaStreamAudioDestinationNode(nativeContext, mergedOptions);\n      super(context, false, nativeMediaStreamAudioDestinationNode, null);\n      this._nativeMediaStreamAudioDestinationNode = nativeMediaStreamAudioDestinationNode;\n    }\n\n    get stream() {\n      return this._nativeMediaStreamAudioDestinationNode.stream;\n    }\n\n  };\n};","export const createMediaStreamAudioSourceNodeConstructor = (audioNodeConstructor, createNativeMediaStreamAudioSourceNode, getNativeContext, isNativeOfflineAudioContext) => {\n  return class MediaStreamAudioSourceNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const nativeMediaStreamAudioSourceNode = createNativeMediaStreamAudioSourceNode(nativeContext, options); // Bug #172: Safari allows to create a MediaStreamAudioSourceNode with an OfflineAudioContext.\n\n      if (isNativeOfflineAudioContext(nativeContext)) {\n        throw new TypeError();\n      }\n\n      super(context, true, nativeMediaStreamAudioSourceNode, null);\n      this._nativeMediaStreamAudioSourceNode = nativeMediaStreamAudioSourceNode;\n    }\n\n    get mediaStream() {\n      return this._nativeMediaStreamAudioSourceNode.mediaStream;\n    }\n\n  };\n};","export const createMediaStreamTrackAudioSourceNodeConstructor = (audioNodeConstructor, createNativeMediaStreamTrackAudioSourceNode, getNativeContext) => {\n  return class MediaStreamTrackAudioSourceNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const nativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNode(nativeContext, options);\n      super(context, true, nativeMediaStreamTrackAudioSourceNode, null);\n    }\n\n  };\n};","import { isValidLatencyHint } from '../helpers/is-valid-latency-hint';\nexport const createMinimalAudioContextConstructor = (createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor) => {\n  return class MinimalAudioContext extends minimalBaseAudioContextConstructor {\n    constructor(options = {}) {\n      if (nativeAudioContextConstructor === null) {\n        throw new Error('Missing the native AudioContext constructor.');\n      }\n\n      const nativeAudioContext = new nativeAudioContextConstructor(options); // Bug #131 Safari returns null when there are four other AudioContexts running already.\n\n      if (nativeAudioContext === null) {\n        throw createUnknownError();\n      } // Bug #51 Only Chrome and Opera throw an error if the given latencyHint is invalid.\n\n\n      if (!isValidLatencyHint(options.latencyHint)) {\n        throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);\n      } // Bug #150 Only Chrome, Firefox and Opera support setting the sampleRate.\n\n\n      if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n        throw createNotSupportedError();\n      }\n\n      super(nativeAudioContext, 2);\n      const {\n        latencyHint\n      } = options;\n      const {\n        sampleRate\n      } = nativeAudioContext; // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n\n      this._baseLatency = typeof nativeAudioContext.baseLatency === 'number' ? nativeAudioContext.baseLatency : latencyHint === 'balanced' ? 512 / sampleRate : latencyHint === 'interactive' || latencyHint === undefined ? 256 / sampleRate : latencyHint === 'playback' ? 1024 / sampleRate :\n      /*\n       * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n       * ScriptProcessorNode.\n       */\n      Math.max(2, Math.min(128, Math.round(latencyHint * sampleRate / 128))) * 128 / sampleRate;\n      this._nativeAudioContext = nativeAudioContext;\n      this._state = null;\n      /*\n       * Bug #34: Chrome and Opera pretend to be running right away, but fire an onstatechange event when the state actually\n       * changes to 'running'.\n       */\n\n      if (nativeAudioContext.state === 'running') {\n        this._state = 'suspended';\n\n        const revokeState = () => {\n          if (this._state === 'suspended') {\n            this._state = null;\n          }\n\n          nativeAudioContext.removeEventListener('statechange', revokeState);\n        };\n\n        nativeAudioContext.addEventListener('statechange', revokeState);\n      }\n    }\n\n    get baseLatency() {\n      return this._baseLatency;\n    }\n\n    get state() {\n      return this._state !== null ? this._state : this._nativeAudioContext.state;\n    }\n\n    close() {\n      // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n      if (this.state === 'closed') {\n        return this._nativeAudioContext.close().then(() => {\n          throw createInvalidStateError();\n        });\n      } // Bug #34: If the state was set to suspended before it should be revoked now.\n\n\n      if (this._state === 'suspended') {\n        this._state = null;\n      }\n\n      return this._nativeAudioContext.close();\n      /*\n       * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n       * ...then(() => deleteAudioGraph(this, this._nativeAudioContext));\n       */\n    }\n\n    resume() {\n      if (this._state === 'suspended') {\n        return new Promise((resolve, reject) => {\n          const resolvePromise = () => {\n            this._nativeAudioContext.removeEventListener('statechange', resolvePromise);\n\n            if (this._nativeAudioContext.state === 'running') {\n              resolve();\n            } else {\n              this.resume().then(resolve, reject);\n            }\n          };\n\n          this._nativeAudioContext.addEventListener('statechange', resolvePromise);\n        });\n      }\n\n      return this._nativeAudioContext.resume().catch(err => {\n        // Bug #55: Chrome, Edge and Opera do throw an InvalidAccessError instead of an InvalidStateError.\n        // Bug #56: Safari invokes the catch handler but without an error.\n        if (err === undefined || err.code === 15) {\n          throw createInvalidStateError();\n        }\n\n        throw err;\n      });\n    }\n\n    suspend() {\n      return this._nativeAudioContext.suspend().catch(err => {\n        // Bug #56: Safari invokes the catch handler but without an error.\n        if (err === undefined) {\n          throw createInvalidStateError();\n        }\n\n        throw err;\n      });\n    }\n\n  };\n};","import { CONTEXT_STORE } from '../globals';\nexport const createMinimalBaseAudioContextConstructor = (audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, isNativeOfflineAudioContext, unrenderedAudioWorkletNodeStore, wrapEventListener) => {\n  return class MinimalBaseAudioContext extends eventTargetConstructor {\n    constructor(_nativeContext, numberOfChannels) {\n      super(_nativeContext);\n      this._nativeContext = _nativeContext;\n      CONTEXT_STORE.set(this, _nativeContext); // Bug #93: Edge will set the sampleRate of an AudioContext to zero when it is closed.\n\n      const sampleRate = _nativeContext.sampleRate;\n      Object.defineProperty(_nativeContext, 'sampleRate', {\n        get: () => sampleRate\n      });\n\n      if (isNativeOfflineAudioContext(_nativeContext)) {\n        unrenderedAudioWorkletNodeStore.set(_nativeContext, new Set());\n      }\n\n      this._destination = new audioDestinationNodeConstructor(this, numberOfChannels);\n      this._listener = createAudioListener(this, _nativeContext);\n      this._onstatechange = null;\n    }\n\n    get currentTime() {\n      return this._nativeContext.currentTime;\n    }\n\n    get destination() {\n      return this._destination;\n    }\n\n    get listener() {\n      return this._listener;\n    }\n\n    get onstatechange() {\n      return this._onstatechange;\n    }\n\n    set onstatechange(value) {\n      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n      this._nativeContext.onstatechange = wrappedListener;\n      const nativeOnStateChange = this._nativeContext.onstatechange;\n      this._onstatechange = nativeOnStateChange !== null && nativeOnStateChange === wrappedListener ? value : nativeOnStateChange;\n    }\n\n    get sampleRate() {\n      return this._nativeContext.sampleRate;\n    }\n\n    get state() {\n      return this._nativeContext.state;\n    }\n\n  };\n};","import { testPromiseSupport } from '../helpers/test-promise-support';\nconst DEFAULT_OPTIONS = {\n  numberOfChannels: 1\n};\nexport const createMinimalOfflineAudioContextConstructor = (cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering) => {\n  return class MinimalOfflineAudioContext extends minimalBaseAudioContextConstructor {\n    constructor(options) {\n      const {\n        length,\n        numberOfChannels,\n        sampleRate\n      } = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate); // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.\n\n      if (!cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n        nativeOfflineAudioContext.addEventListener('statechange', (() => {\n          let i = 0;\n\n          const delayStateChangeEvent = event => {\n            if (this._state === 'running') {\n              if (i > 0) {\n                nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);\n                event.stopImmediatePropagation();\n\n                this._waitForThePromiseToSettle(event);\n              } else {\n                i += 1;\n              }\n            }\n          };\n\n          return delayStateChangeEvent;\n        })());\n      }\n\n      super(nativeOfflineAudioContext, numberOfChannels);\n      this._length = length;\n      this._nativeOfflineAudioContext = nativeOfflineAudioContext;\n      this._state = null;\n    }\n\n    get length() {\n      // Bug #17: Safari does not yet expose the length.\n      if (this._nativeOfflineAudioContext.length === undefined) {\n        return this._length;\n      }\n\n      return this._nativeOfflineAudioContext.length;\n    }\n\n    get state() {\n      return this._state === null ? this._nativeOfflineAudioContext.state : this._state;\n    }\n\n    startRendering() {\n      /*\n       * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore\n       * the state of the nativeOfflineAudioContext might no transition to running immediately.\n       */\n      if (this._state === 'running') {\n        return Promise.reject(createInvalidStateError());\n      }\n\n      this._state = 'running';\n      return startRendering(this.destination, this._nativeOfflineAudioContext).then(audioBuffer => {\n        this._state = null;\n        /*\n         * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n         * deleteAudioGraph(this, this._nativeOfflineAudioContext);\n         */\n\n        return audioBuffer;\n      }) // @todo This could be written more elegantly when Promise.finally() becomes avalaible.\n      .catch(err => {\n        this._state = null;\n        /*\n         * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n         * deleteAudioGraph(this, this._nativeOfflineAudioContext);\n         */\n\n        throw err;\n      });\n    }\n\n    _waitForThePromiseToSettle(event) {\n      if (this._state === null) {\n        this._nativeOfflineAudioContext.dispatchEvent(event);\n      } else {\n        setTimeout(() => this._waitForThePromiseToSettle(event));\n      }\n    }\n\n  };\n};","export const createMonitorConnections = (insertElementInSet, isNativeAudioNode) => {\n  return (nativeAudioNode, whenConnected, whenDisconnected) => {\n    const connections = new Set();\n\n    nativeAudioNode.connect = (connect => {\n      return (destination, output = 0, input = 0) => {\n        const wasDisconnected = connections.size === 0;\n\n        if (isNativeAudioNode(destination)) {\n          // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n          connect.call(nativeAudioNode, destination, output, input);\n          insertElementInSet(connections, [destination, output, input], connection => connection[0] === destination && connection[1] === output && connection[2] === input, true);\n\n          if (wasDisconnected) {\n            whenConnected();\n          }\n\n          return destination;\n        }\n\n        connect.call(nativeAudioNode, destination, output);\n        insertElementInSet(connections, [destination, output], connection => connection[0] === destination && connection[1] === output, true);\n\n        if (wasDisconnected) {\n          whenConnected();\n        }\n\n        return;\n      };\n    })(nativeAudioNode.connect);\n\n    nativeAudioNode.disconnect = (disconnect => {\n      return (destinationOrOutput, output, input) => {\n        const wasConnected = connections.size > 0;\n\n        if (destinationOrOutput === undefined) {\n          disconnect.apply(nativeAudioNode);\n          connections.clear();\n        } else if (typeof destinationOrOutput === 'number') {\n          // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.\n          disconnect.call(nativeAudioNode, destinationOrOutput);\n\n          for (const connection of connections) {\n            if (connection[1] === destinationOrOutput) {\n              connections.delete(connection);\n            }\n          }\n        } else {\n          if (isNativeAudioNode(destinationOrOutput)) {\n            // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n            disconnect.call(nativeAudioNode, destinationOrOutput, output, input);\n          } else {\n            // @todo TypeScript cannot infer the overloaded signature with 2 arguments yet.\n            disconnect.call(nativeAudioNode, destinationOrOutput, output);\n          }\n\n          for (const connection of connections) {\n            if (connection[0] === destinationOrOutput && (output === undefined || connection[1] === output) && (input === undefined || connection[2] === input)) {\n              connections.delete(connection);\n            }\n          }\n        }\n\n        const isDisconnected = connections.size === 0;\n\n        if (wasConnected && isDisconnected) {\n          whenDisconnected();\n        }\n      };\n    })(nativeAudioNode.disconnect);\n\n    return nativeAudioNode;\n  };\n};","export const createNativeAudioBufferConstructor = window => {\n  if (window === null) {\n    return null;\n  }\n\n  if (window.hasOwnProperty('AudioBuffer')) {\n    return window.AudioBuffer;\n  }\n\n  return null;\n};","export const createNativeAudioContextConstructor = window => {\n  if (window === null) {\n    return null;\n  }\n\n  if (window.hasOwnProperty('AudioContext')) {\n    return window.AudioContext;\n  }\n\n  return window.hasOwnProperty('webkitAudioContext') ? window.webkitAudioContext : null;\n};","export const createNativeAudioDestinationNodeFactory = (createNativeGainNode, overwriteAccessors) => {\n  return (nativeContext, channelCount, isNodeOfNativeOfflineAudioContext) => {\n    const nativeAudioDestinationNode = nativeContext.destination; // Bug #132: Edge & Safari do not have the correct channelCount.\n\n    if (nativeAudioDestinationNode.channelCount !== channelCount) {\n      try {\n        nativeAudioDestinationNode.channelCount = channelCount;\n      } catch {// Bug #169: Safari throws an error on each attempt to change the channelCount.\n      }\n    } // Bug #83: Edge & Safari do not have the correct channelCountMode.\n\n\n    if (isNodeOfNativeOfflineAudioContext && nativeAudioDestinationNode.channelCountMode !== 'explicit') {\n      nativeAudioDestinationNode.channelCountMode = 'explicit';\n    } // Bug #47: The AudioDestinationNode in Edge and Safari does not initialize the maxChannelCount property correctly.\n\n\n    if (nativeAudioDestinationNode.maxChannelCount === 0) {\n      Object.defineProperty(nativeAudioDestinationNode, 'maxChannelCount', {\n        value: channelCount\n      });\n    } // Bug #168: No browser does yet have an AudioDestinationNode with an output.\n\n\n    const gainNode = createNativeGainNode(nativeContext, {\n      channelCount,\n      channelCountMode: nativeAudioDestinationNode.channelCountMode,\n      channelInterpretation: nativeAudioDestinationNode.channelInterpretation,\n      gain: 1\n    });\n    overwriteAccessors(gainNode, 'channelCount', get => () => get.call(gainNode), set => value => {\n      set.call(gainNode, value);\n\n      try {\n        nativeAudioDestinationNode.channelCount = value;\n      } catch (err) {\n        // Bug #169: Safari throws an error on each attempt to change the channelCount.\n        if (value > nativeAudioDestinationNode.maxChannelCount) {\n          throw err;\n        }\n      }\n    });\n    overwriteAccessors(gainNode, 'channelCountMode', get => () => get.call(gainNode), set => value => {\n      set.call(gainNode, value);\n      nativeAudioDestinationNode.channelCountMode = value;\n    });\n    overwriteAccessors(gainNode, 'channelInterpretation', get => () => get.call(gainNode), set => value => {\n      set.call(gainNode, value);\n      nativeAudioDestinationNode.channelInterpretation = value;\n    });\n    Object.defineProperty(gainNode, 'maxChannelCount', {\n      get: () => nativeAudioDestinationNode.maxChannelCount\n    }); // @todo This should be disconnected when the context is closed.\n\n    gainNode.connect(nativeAudioDestinationNode);\n    return gainNode;\n  };\n};","export const createNativeAudioNodeFactory = getBackupNativeContext => {\n  return (nativeContext, factoryFunction) => {\n    // Bug #50: Only Edge does currently not allow to create AudioNodes on a closed context yet.\n    const backupNativeContext = getBackupNativeContext(nativeContext);\n\n    if (backupNativeContext !== null) {\n      return factoryFunction(backupNativeContext);\n    }\n\n    return factoryFunction(nativeContext);\n  };\n};","export const createNativeAudioWorkletNodeConstructor = window => {\n  if (window === null) {\n    return null;\n  }\n\n  return window.hasOwnProperty('AudioWorkletNode') ? window.AudioWorkletNode : null;\n};","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeBiquadFilterNodeFactory = createNativeAudioNode => {\n  return (nativeContext, options) => {\n    const nativeBiquadFilterNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createBiquadFilter());\n    assignNativeAudioNodeOptions(nativeBiquadFilterNode, options);\n    assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'Q');\n    assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'detune');\n    assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'frequency');\n    assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'gain');\n    assignNativeAudioNodeOption(nativeBiquadFilterNode, options, 'type');\n    return nativeBiquadFilterNode;\n  };\n};","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeChannelMergerNodeFactory = (createNativeAudioNode, wrapChannelMergerNode) => {\n  return (nativeContext, options) => {\n    const nativeChannelMergerNode = createNativeAudioNode(nativeContext, ntvCntxt => {\n      return ntvCntxt.createChannelMerger(options.numberOfInputs);\n    }); // Bug #15: Safari does not return the default properties.\n\n    if (nativeChannelMergerNode.channelCount !== 1 && nativeChannelMergerNode.channelCountMode !== 'explicit') {\n      wrapChannelMergerNode(nativeContext, nativeChannelMergerNode);\n    }\n\n    assignNativeAudioNodeOptions(nativeChannelMergerNode, options);\n    return nativeChannelMergerNode;\n  };\n};","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport const createNativeConstantSourceNodeFactory = (addSilentConnection, cacheTestResult, createNativeAudioNode, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport) => {\n  return (nativeContext, options) => {\n    // Bug #62: Edge & Safari do not support ConstantSourceNodes.\n    if (nativeContext.createConstantSource === undefined) {\n      return createNativeConstantSourceNodeFaker(nativeContext, options);\n    }\n\n    const nativeConstantSourceNode = createNativeAudioNode(nativeContext, ntvCntxt => {\n      return ntvCntxt.createConstantSource();\n    });\n    assignNativeAudioNodeOptions(nativeConstantSourceNode, options);\n    assignNativeAudioNodeAudioParamValue(nativeConstantSourceNode, options, 'offset'); // Bug #44: Only Chrome, Firefox & Opera throw a RangeError yet.\n\n    if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {\n      wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeConstantSourceNode);\n    } // Bug #44: Only Firefox does not throw a RangeError yet.\n\n\n    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {\n      wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeConstantSourceNode);\n    } // Bug #175: Safari will not fire an ended event if the ConstantSourceNode is unconnected.\n\n\n    addSilentConnection(nativeContext, nativeConstantSourceNode);\n    return nativeConstantSourceNode;\n  };\n};","import { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeConstantSourceNodeFakerFactory = (addSilentConnection, createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections) => {\n  return (nativeContext, {\n    offset,\n    ...audioNodeOptions\n  }) => {\n    const audioBuffer = nativeContext.createBuffer(1, 2, nativeContext.sampleRate);\n    const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext);\n    const gainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions,\n      gain: offset\n    }); // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n\n    const channelData = audioBuffer.getChannelData(0); // Bug #95: Safari does not play or loop one sample buffers.\n\n    channelData[0] = 1;\n    channelData[1] = 1;\n    audioBufferSourceNode.buffer = audioBuffer;\n    audioBufferSourceNode.loop = true;\n    const nativeConstantSourceNodeFaker = {\n      get bufferSize() {\n        return undefined;\n      },\n\n      get channelCount() {\n        return gainNode.channelCount;\n      },\n\n      set channelCount(value) {\n        gainNode.channelCount = value;\n      },\n\n      get channelCountMode() {\n        return gainNode.channelCountMode;\n      },\n\n      set channelCountMode(value) {\n        gainNode.channelCountMode = value;\n      },\n\n      get channelInterpretation() {\n        return gainNode.channelInterpretation;\n      },\n\n      set channelInterpretation(value) {\n        gainNode.channelInterpretation = value;\n      },\n\n      get context() {\n        return gainNode.context;\n      },\n\n      get inputs() {\n        return [];\n      },\n\n      get numberOfInputs() {\n        return audioBufferSourceNode.numberOfInputs;\n      },\n\n      get numberOfOutputs() {\n        return gainNode.numberOfOutputs;\n      },\n\n      get offset() {\n        return gainNode.gain;\n      },\n\n      get onended() {\n        return audioBufferSourceNode.onended;\n      },\n\n      set onended(value) {\n        audioBufferSourceNode.onended = value;\n      },\n\n      addEventListener(...args) {\n        return audioBufferSourceNode.addEventListener(args[0], args[1], args[2]);\n      },\n\n      dispatchEvent(...args) {\n        return audioBufferSourceNode.dispatchEvent(args[0]);\n      },\n\n      removeEventListener(...args) {\n        return audioBufferSourceNode.removeEventListener(args[0], args[1], args[2]);\n      },\n\n      start(when = 0) {\n        audioBufferSourceNode.start.call(audioBufferSourceNode, when);\n      },\n\n      stop(when = 0) {\n        audioBufferSourceNode.stop.call(audioBufferSourceNode, when);\n      }\n\n    };\n\n    const whenConnected = () => audioBufferSourceNode.connect(gainNode);\n\n    const whenDisconnected = () => audioBufferSourceNode.disconnect(gainNode); // Bug #175: Safari will not fire an ended event if the AudioBufferSourceNode is unconnected.\n\n\n    addSilentConnection(nativeContext, audioBufferSourceNode);\n    return monitorConnections(interceptConnections(nativeConstantSourceNodeFaker, gainNode), whenConnected, whenDisconnected);\n  };\n};","import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeConvolverNodeFactory = (createNativeAudioNode, createNativeConvolverNodeFaker, createNotSupportedError, overwriteAccessors) => {\n  return (nativeContext, options) => {\n    const nativeConvolverNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createConvolver());\n\n    try {\n      // Bug #166: Opera does not allow yet to set the channelCount to 1.\n      nativeConvolverNode.channelCount = 1;\n    } catch (err) {\n      return createNativeConvolverNodeFaker(nativeContext, options);\n    }\n\n    assignNativeAudioNodeOptions(nativeConvolverNode, options); // The normalize property needs to be set before setting the buffer.\n\n    if (options.disableNormalization === nativeConvolverNode.normalize) {\n      nativeConvolverNode.normalize = !options.disableNormalization;\n    }\n\n    assignNativeAudioNodeOption(nativeConvolverNode, options, 'buffer'); // Bug #113: Edge & Safari allow to set the channelCount to a value larger than 2.\n\n    if (options.channelCount > 2) {\n      throw createNotSupportedError();\n    }\n\n    overwriteAccessors(nativeConvolverNode, 'channelCount', get => () => get.call(nativeConvolverNode), set => value => {\n      if (value > 2) {\n        throw createNotSupportedError();\n      }\n\n      return set.call(nativeConvolverNode, value);\n    }); // Bug #114: Edge & Safari allow to set the channelCountMode to 'max'.\n\n    if (options.channelCountMode === 'max') {\n      throw createNotSupportedError();\n    }\n\n    overwriteAccessors(nativeConvolverNode, 'channelCountMode', get => () => get.call(nativeConvolverNode), set => value => {\n      if (value === 'max') {\n        throw createNotSupportedError();\n      }\n\n      return set.call(nativeConvolverNode, value);\n    });\n    return nativeConvolverNode;\n  };\n};","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeConvolverNodeFakerFactory = (createNativeAudioNode, createNativeGainNode, monitorConnections) => {\n  return (nativeContext, {\n    buffer,\n    channelCount,\n    channelCountMode,\n    channelInterpretation,\n    disableNormalization\n  }) => {\n    const convolverNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createConvolver());\n    assignNativeAudioNodeOptions(convolverNode, {\n      // Bug #166: Opera does not allow yet to set the channelCount to 1.\n      channelCount: Math.max(channelCount, 2),\n      // Bug #167: Opera does not allow yet to set the channelCountMode to 'explicit'.\n      channelCountMode: channelCountMode === 'max' ? channelCountMode : 'clamped-max',\n      channelInterpretation\n    });\n    const gainNode = createNativeGainNode(nativeContext, {\n      channelCount,\n      channelCountMode,\n      channelInterpretation,\n      gain: 1\n    });\n    const nativeConvolverNodeFaker = {\n      get buffer() {\n        return convolverNode.buffer;\n      },\n\n      set buffer(value) {\n        convolverNode.buffer = value;\n      },\n\n      get bufferSize() {\n        return undefined;\n      },\n\n      get channelCount() {\n        return gainNode.channelCount;\n      },\n\n      set channelCount(value) {\n        // Bug #166: Opera does not allow yet to set the channelCount to 1.\n        if (value > 2) {\n          convolverNode.channelCount = value;\n        }\n\n        gainNode.channelCount = value;\n      },\n\n      get channelCountMode() {\n        return gainNode.channelCountMode;\n      },\n\n      set channelCountMode(value) {\n        // Bug #167: Opera does not allow yet to set the channelCountMode to 'explicit'.\n        if (value === 'max') {\n          convolverNode.channelCountMode = value;\n        }\n\n        gainNode.channelCountMode = value;\n      },\n\n      get channelInterpretation() {\n        return convolverNode.channelInterpretation;\n      },\n\n      set channelInterpretation(value) {\n        convolverNode.channelInterpretation = value;\n        gainNode.channelInterpretation = value;\n      },\n\n      get context() {\n        return convolverNode.context;\n      },\n\n      get inputs() {\n        return [convolverNode];\n      },\n\n      get numberOfInputs() {\n        return convolverNode.numberOfInputs;\n      },\n\n      get numberOfOutputs() {\n        return convolverNode.numberOfOutputs;\n      },\n\n      get normalize() {\n        return convolverNode.normalize;\n      },\n\n      set normalize(value) {\n        convolverNode.normalize = value;\n      },\n\n      addEventListener(...args) {\n        return convolverNode.addEventListener(args[0], args[1], args[2]);\n      },\n\n      dispatchEvent(...args) {\n        return convolverNode.dispatchEvent(args[0]);\n      },\n\n      removeEventListener(...args) {\n        return convolverNode.removeEventListener(args[0], args[1], args[2]);\n      }\n\n    }; // The normalize property needs to be set before setting the buffer.\n\n    if (disableNormalization === nativeConvolverNodeFaker.normalize) {\n      nativeConvolverNodeFaker.normalize = !disableNormalization;\n    }\n\n    if (buffer !== nativeConvolverNodeFaker.buffer) {\n      nativeConvolverNodeFaker.buffer = buffer;\n    }\n\n    const whenConnected = () => convolverNode.connect(gainNode);\n\n    const whenDisconnected = () => convolverNode.disconnect(gainNode);\n\n    return monitorConnections(interceptConnections(nativeConvolverNodeFaker, gainNode), whenConnected, whenDisconnected);\n  };\n};","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeDelayNodeFactory = createNativeAudioNode => {\n  return (nativeContext, options) => {\n    const nativeDelayNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createDelay(options.maxDelayTime));\n    assignNativeAudioNodeOptions(nativeDelayNode, options);\n    assignNativeAudioNodeAudioParamValue(nativeDelayNode, options, 'delayTime');\n    return nativeDelayNode;\n  };\n};","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeDynamicsCompressorNodeFactory = (createNativeAudioNode, createNotSupportedError) => {\n  return (nativeContext, options) => {\n    const nativeDynamicsCompressorNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createDynamicsCompressor());\n    assignNativeAudioNodeOptions(nativeDynamicsCompressorNode, options); // Bug #108: Only Chrome, Firefox and Opera disallow a channelCount of three and above yet.\n\n    if (options.channelCount > 2) {\n      throw createNotSupportedError();\n    } // Bug #109: Only Chrome, Firefox and Opera disallow a channelCountMode of 'max'.\n\n\n    if (options.channelCountMode === 'max') {\n      throw createNotSupportedError();\n    }\n\n    assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'attack');\n    assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'knee');\n    assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'ratio');\n    assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'release');\n    assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'threshold');\n    return nativeDynamicsCompressorNode;\n  };\n};","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeGainNodeFactory = createNativeAudioNode => {\n  return (nativeContext, options) => {\n    const nativeGainNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createGain());\n    assignNativeAudioNodeOptions(nativeGainNode, options);\n    assignNativeAudioNodeAudioParamValue(nativeGainNode, options, 'gain');\n    return nativeGainNode;\n  };\n};","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeIIRFilterNodeFactory = (createNativeAudioNode, createNativeIIRFilterNodeFaker) => {\n  return (nativeContext, baseLatency, options) => {\n    // Bug #9: Safari does not support IIRFilterNodes.\n    if (nativeContext.createIIRFilter === undefined) {\n      return createNativeIIRFilterNodeFaker(nativeContext, baseLatency, options);\n    }\n\n    const nativeIIRFilterNode = createNativeAudioNode(nativeContext, ntvCntxt => {\n      return ntvCntxt.createIIRFilter(options.feedforward, options.feedback);\n    });\n    assignNativeAudioNodeOptions(nativeIIRFilterNode, options);\n    return nativeIIRFilterNode;\n  };\n};","import { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { filterBuffer } from '../helpers/filter-buffer';\nimport { interceptConnections } from '../helpers/intercept-connections';\n\nfunction divide(a, b) {\n  const denominator = b[0] * b[0] + b[1] * b[1];\n  return [(a[0] * b[0] + a[1] * b[1]) / denominator, (a[1] * b[0] - a[0] * b[1]) / denominator];\n}\n\nfunction multiply(a, b) {\n  return [a[0] * b[0] - a[1] * b[1], a[0] * b[1] + a[1] * b[0]];\n}\n\nfunction evaluatePolynomial(coefficient, z) {\n  let result = [0, 0];\n\n  for (let i = coefficient.length - 1; i >= 0; i -= 1) {\n    result = multiply(result, z);\n    result[0] += coefficient[i];\n  }\n\n  return result;\n}\n\nexport const createNativeIIRFilterNodeFakerFactory = (createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError) => {\n  return (nativeContext, baseLatency, {\n    channelCount,\n    channelCountMode,\n    channelInterpretation,\n    feedback,\n    feedforward\n  }) => {\n    const bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n    const feedbackLength = feedback.length;\n    const feedforwardLength = feedforward.length;\n    const minLength = Math.min(feedbackLength, feedforwardLength);\n\n    if (feedback.length === 0 || feedback.length > 20) {\n      throw createNotSupportedError();\n    }\n\n    if (feedback[0] === 0) {\n      throw createInvalidStateError();\n    }\n\n    if (feedforward.length === 0 || feedforward.length > 20) {\n      throw createNotSupportedError();\n    }\n\n    if (feedforward[0] === 0) {\n      throw createInvalidStateError();\n    }\n\n    if (feedback[0] !== 1) {\n      for (let i = 0; i < feedforwardLength; i += 1) {\n        feedforward[i] /= feedback[0];\n      }\n\n      for (let i = 1; i < feedbackLength; i += 1) {\n        feedback[i] /= feedback[0];\n      }\n    }\n\n    const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, channelCount, channelCount);\n    scriptProcessorNode.channelCount = channelCount;\n    scriptProcessorNode.channelCountMode = channelCountMode;\n    scriptProcessorNode.channelInterpretation = channelInterpretation;\n    const bufferLength = 32;\n    const bufferIndexes = [];\n    const xBuffers = [];\n    const yBuffers = [];\n\n    for (let i = 0; i < channelCount; i += 1) {\n      bufferIndexes.push(0);\n      const xBuffer = new Float32Array(bufferLength);\n      const yBuffer = new Float32Array(bufferLength);\n      xBuffer.fill(0);\n      yBuffer.fill(0);\n      xBuffers.push(xBuffer);\n      yBuffers.push(yBuffer);\n    }\n\n    scriptProcessorNode.onaudioprocess = event => {\n      const inputBuffer = event.inputBuffer;\n      const outputBuffer = event.outputBuffer;\n      const numberOfChannels = inputBuffer.numberOfChannels;\n\n      for (let i = 0; i < numberOfChannels; i += 1) {\n        const input = inputBuffer.getChannelData(i);\n        const output = outputBuffer.getChannelData(i);\n        bufferIndexes[i] = filterBuffer(feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffers[i], yBuffers[i], bufferIndexes[i], bufferLength, input, output);\n      }\n    };\n\n    const nyquist = nativeContext.sampleRate / 2;\n    const nativeIIRFilterNodeFaker = {\n      get bufferSize() {\n        return bufferSize;\n      },\n\n      get channelCount() {\n        return scriptProcessorNode.channelCount;\n      },\n\n      set channelCount(value) {\n        scriptProcessorNode.channelCount = value;\n      },\n\n      get channelCountMode() {\n        return scriptProcessorNode.channelCountMode;\n      },\n\n      set channelCountMode(value) {\n        scriptProcessorNode.channelCountMode = value;\n      },\n\n      get channelInterpretation() {\n        return scriptProcessorNode.channelInterpretation;\n      },\n\n      set channelInterpretation(value) {\n        scriptProcessorNode.channelInterpretation = value;\n      },\n\n      get context() {\n        return scriptProcessorNode.context;\n      },\n\n      get inputs() {\n        return [scriptProcessorNode];\n      },\n\n      get numberOfInputs() {\n        return scriptProcessorNode.numberOfInputs;\n      },\n\n      get numberOfOutputs() {\n        return scriptProcessorNode.numberOfOutputs;\n      },\n\n      addEventListener(...args) {\n        // @todo Dissallow adding an audioprocess listener.\n        return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);\n      },\n\n      dispatchEvent(...args) {\n        return scriptProcessorNode.dispatchEvent(args[0]);\n      },\n\n      getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n        if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n          throw createInvalidAccessError();\n        }\n\n        const length = frequencyHz.length;\n\n        for (let i = 0; i < length; i += 1) {\n          const omega = -Math.PI * (frequencyHz[i] / nyquist);\n          const z = [Math.cos(omega), Math.sin(omega)];\n          const numerator = evaluatePolynomial(feedforward, z);\n          const denominator = evaluatePolynomial(feedback, z);\n          const response = divide(numerator, denominator);\n          magResponse[i] = Math.sqrt(response[0] * response[0] + response[1] * response[1]);\n          phaseResponse[i] = Math.atan2(response[1], response[0]);\n        }\n      },\n\n      removeEventListener(...args) {\n        return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);\n      }\n\n    };\n    return interceptConnections(nativeIIRFilterNodeFaker, scriptProcessorNode);\n  };\n};","export const createNativeMediaElementAudioSourceNodeFactory = createNativeAudioNode => {\n  return (nativeAudioContext, options) => createNativeAudioNode(nativeAudioContext, ntvDCntxt => {\n    return ntvDCntxt.createMediaElementSource(options.mediaElement);\n  });\n};","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeMediaStreamAudioDestinationNodeFactory = (createNativeAudioNode, createNotSupportedError) => {\n  return (nativeAudioContext, options) => {\n    // Bug #64: Edge does not support MediaStreamAudioDestinationNodes.\n    if (nativeAudioContext.createMediaStreamDestination === undefined) {\n      throw createNotSupportedError();\n    }\n\n    const nativeMediaStreamAudioDestinationNode = createNativeAudioNode(nativeAudioContext, ntvDCntxt => {\n      return ntvDCntxt.createMediaStreamDestination();\n    });\n    assignNativeAudioNodeOptions(nativeMediaStreamAudioDestinationNode, options); // Bug #174: Safari does expose a wrong numberOfOutputs.\n\n    if (nativeMediaStreamAudioDestinationNode.numberOfOutputs === 1) {\n      Object.defineProperty(nativeMediaStreamAudioDestinationNode, 'numberOfOutputs', {\n        get: () => 0\n      });\n    }\n\n    return nativeMediaStreamAudioDestinationNode;\n  };\n};","export const createNativeMediaStreamAudioSourceNodeFactory = createNativeAudioNode => {\n  return (nativeAudioContext, {\n    mediaStream\n  }) => {\n    const audioStreamTracks = mediaStream.getAudioTracks();\n    const nativeMediaStreamAudioSourceNode = createNativeAudioNode(nativeAudioContext, ntvDCntxt => {\n      /*\n       * Bug #151: Safari does not use the audio track as input anymore if it gets removed from the mediaStream after construction.\n       * Bug #159: Safari picks the first audio track if the MediaStream has more than one audio track.\n       */\n      const filteredAudioStreamTracks = audioStreamTracks.sort((a, b) => a.id < b.id ? -1 : a.id > b.id ? 1 : 0).slice(0, 1);\n      return ntvDCntxt.createMediaStreamSource(new MediaStream(filteredAudioStreamTracks));\n    }); // Bug #63: Edge does not expose the mediaStream yet.\n\n    Object.defineProperty(nativeMediaStreamAudioSourceNode, 'mediaStream', {\n      value: mediaStream\n    });\n    return nativeMediaStreamAudioSourceNode;\n  };\n};","export const createNativeMediaStreamTrackAudioSourceNodeFactory = (createInvalidStateError, createNativeAudioNode, isNativeOfflineAudioContext) => {\n  return (nativeAudioContext, {\n    mediaStreamTrack\n  }) => {\n    if (typeof nativeAudioContext.createMediaStreamTrackSource === 'function') {\n      return createNativeAudioNode(nativeAudioContext, ntvDCntxt => ntvDCntxt.createMediaStreamTrackSource(mediaStreamTrack));\n    } // Bug #121: Only Firefox does yet support the MediaStreamTrackAudioSourceNode.\n\n\n    return createNativeAudioNode(nativeAudioContext, ntvDCntxt => {\n      const mediaStream = new MediaStream([mediaStreamTrack]);\n      const nativeMediaStreamAudioSourceNode = ntvDCntxt.createMediaStreamSource(mediaStream); // Bug #120: Firefox does not throw an error if the mediaStream has no audio track.\n\n      if (mediaStreamTrack.kind !== 'audio') {\n        throw createInvalidStateError();\n      } // Bug #172: Safari allows to create a MediaStreamAudioSourceNode with an OfflineAudioContext.\n\n\n      if (isNativeOfflineAudioContext(ntvDCntxt)) {\n        throw new TypeError();\n      }\n\n      return nativeMediaStreamAudioSourceNode;\n    });\n  };\n};","export const createNativeOfflineAudioContextConstructor = window => {\n  if (window === null) {\n    return null;\n  }\n\n  if (window.hasOwnProperty('OfflineAudioContext')) {\n    return window.OfflineAudioContext;\n  }\n\n  return window.hasOwnProperty('webkitOfflineAudioContext') ? window.webkitOfflineAudioContext : null;\n};","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport const createNativeOscillatorNodeFactory = (addSilentConnection, cacheTestResult, createNativeAudioNode, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) => {\n  return (nativeContext, options) => {\n    const nativeOscillatorNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createOscillator());\n    assignNativeAudioNodeOptions(nativeOscillatorNode, options);\n    assignNativeAudioNodeAudioParamValue(nativeOscillatorNode, options, 'detune');\n    assignNativeAudioNodeAudioParamValue(nativeOscillatorNode, options, 'frequency');\n\n    if (options.periodicWave !== undefined) {\n      nativeOscillatorNode.setPeriodicWave(options.periodicWave);\n    } else {\n      assignNativeAudioNodeOption(nativeOscillatorNode, options, 'type');\n    } // Bug #44: Only Chrome & Opera throw a RangeError yet.\n\n\n    if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {\n      wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeOscillatorNode);\n    } // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.\n\n\n    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, () => testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext))) {\n      wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeOscillatorNode, nativeContext);\n    } // Bug #44: Only Firefox does not throw a RangeError yet.\n\n\n    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {\n      wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeOscillatorNode);\n    } // Bug #175: Safari will not fire an ended event if the OscillatorNode is unconnected.\n\n\n    addSilentConnection(nativeContext, nativeOscillatorNode);\n    return nativeOscillatorNode;\n  };\n};","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativePannerNodeFactory = (createNativeAudioNode, createNativePannerNodeFaker) => {\n  return (nativeContext, options) => {\n    const nativePannerNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createPanner()); // Bug #124: Edge & Safari do not support modifying the orientation and the position with AudioParams.\n\n    if (nativePannerNode.orientationX === undefined) {\n      return createNativePannerNodeFaker(nativeContext, options);\n    }\n\n    assignNativeAudioNodeOptions(nativePannerNode, options);\n    assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'orientationX');\n    assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'orientationY');\n    assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'orientationZ');\n    assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'positionX');\n    assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'positionY');\n    assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'positionZ');\n    assignNativeAudioNodeOption(nativePannerNode, options, 'coneInnerAngle');\n    assignNativeAudioNodeOption(nativePannerNode, options, 'coneOuterAngle');\n    assignNativeAudioNodeOption(nativePannerNode, options, 'coneOuterGain');\n    assignNativeAudioNodeOption(nativePannerNode, options, 'distanceModel');\n    assignNativeAudioNodeOption(nativePannerNode, options, 'maxDistance');\n    assignNativeAudioNodeOption(nativePannerNode, options, 'panningModel');\n    assignNativeAudioNodeOption(nativePannerNode, options, 'refDistance');\n    assignNativeAudioNodeOption(nativePannerNode, options, 'rolloffFactor');\n    return nativePannerNode;\n  };\n};","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativePannerNodeFakerFactory = (connectNativeAudioNodeToNativeAudioNode, createInvalidStateError, createNativeAudioNode, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError, disconnectNativeAudioNodeFromNativeAudioNode, monitorConnections) => {\n  return (nativeContext, {\n    coneInnerAngle,\n    coneOuterAngle,\n    coneOuterGain,\n    distanceModel,\n    maxDistance,\n    orientationX,\n    orientationY,\n    orientationZ,\n    panningModel,\n    positionX,\n    positionY,\n    positionZ,\n    refDistance,\n    rolloffFactor,\n    ...audioNodeOptions\n  }) => {\n    const pannerNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createPanner()); // Bug #125: Safari does not throw an error yet.\n\n    if (audioNodeOptions.channelCount > 2) {\n      throw createNotSupportedError();\n    } // Bug #126: Safari does not throw an error yet.\n\n\n    if (audioNodeOptions.channelCountMode === 'max') {\n      throw createNotSupportedError();\n    }\n\n    assignNativeAudioNodeOptions(pannerNode, audioNodeOptions);\n    const SINGLE_CHANNEL_OPTIONS = {\n      channelCount: 1,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete'\n    };\n    const channelMergerNode = createNativeChannelMergerNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      channelInterpretation: 'speakers',\n      numberOfInputs: 6\n    });\n    const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions,\n      gain: 1\n    });\n    const orientationXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      gain: 1\n    });\n    const orientationYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    const orientationZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    const positionXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    const positionYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    const positionZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 6, 1);\n    const waveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      curve: new Float32Array([1, 1]),\n      oversample: 'none'\n    });\n    let lastOrientation = [orientationX, orientationY, orientationZ];\n    let lastPosition = [positionX, positionY, positionZ];\n\n    scriptProcessorNode.onaudioprocess = ({\n      inputBuffer\n    }) => {\n      const orientation = [inputBuffer.getChannelData(0)[0], inputBuffer.getChannelData(1)[0], inputBuffer.getChannelData(2)[0]];\n\n      if (orientation.some((value, index) => value !== lastOrientation[index])) {\n        pannerNode.setOrientation(...orientation); // tslint:disable-line:deprecation\n\n        lastOrientation = orientation;\n      }\n\n      const positon = [inputBuffer.getChannelData(3)[0], inputBuffer.getChannelData(4)[0], inputBuffer.getChannelData(5)[0]];\n\n      if (positon.some((value, index) => value !== lastPosition[index])) {\n        pannerNode.setPosition(...positon); // tslint:disable-line:deprecation\n\n        lastPosition = positon;\n      }\n    };\n\n    Object.defineProperty(orientationYGainNode.gain, 'defaultValue', {\n      get: () => 0\n    });\n    Object.defineProperty(orientationZGainNode.gain, 'defaultValue', {\n      get: () => 0\n    });\n    Object.defineProperty(positionXGainNode.gain, 'defaultValue', {\n      get: () => 0\n    });\n    Object.defineProperty(positionYGainNode.gain, 'defaultValue', {\n      get: () => 0\n    });\n    Object.defineProperty(positionZGainNode.gain, 'defaultValue', {\n      get: () => 0\n    });\n    const nativePannerNodeFaker = {\n      get bufferSize() {\n        return undefined;\n      },\n\n      get channelCount() {\n        return pannerNode.channelCount;\n      },\n\n      set channelCount(value) {\n        // Bug #125: Safari does not throw an error yet.\n        if (value > 2) {\n          throw createNotSupportedError();\n        }\n\n        inputGainNode.channelCount = value;\n        pannerNode.channelCount = value;\n      },\n\n      get channelCountMode() {\n        return pannerNode.channelCountMode;\n      },\n\n      set channelCountMode(value) {\n        // Bug #126: Safari does not throw an error yet.\n        if (value === 'max') {\n          throw createNotSupportedError();\n        }\n\n        inputGainNode.channelCountMode = value;\n        pannerNode.channelCountMode = value;\n      },\n\n      get channelInterpretation() {\n        return pannerNode.channelInterpretation;\n      },\n\n      set channelInterpretation(value) {\n        inputGainNode.channelInterpretation = value;\n        pannerNode.channelInterpretation = value;\n      },\n\n      get coneInnerAngle() {\n        return pannerNode.coneInnerAngle;\n      },\n\n      set coneInnerAngle(value) {\n        pannerNode.coneInnerAngle = value;\n      },\n\n      get coneOuterAngle() {\n        return pannerNode.coneOuterAngle;\n      },\n\n      set coneOuterAngle(value) {\n        pannerNode.coneOuterAngle = value;\n      },\n\n      get coneOuterGain() {\n        return pannerNode.coneOuterGain;\n      },\n\n      set coneOuterGain(value) {\n        // Bug #127: Edge & Safari do not throw an InvalidStateError yet.\n        if (value < 0 || value > 1) {\n          throw createInvalidStateError();\n        }\n\n        pannerNode.coneOuterGain = value;\n      },\n\n      get context() {\n        return pannerNode.context;\n      },\n\n      get distanceModel() {\n        return pannerNode.distanceModel;\n      },\n\n      set distanceModel(value) {\n        pannerNode.distanceModel = value;\n      },\n\n      get inputs() {\n        return [inputGainNode];\n      },\n\n      get maxDistance() {\n        return pannerNode.maxDistance;\n      },\n\n      set maxDistance(value) {\n        // Bug #128: Edge & Safari do not throw an error yet.\n        if (value < 0) {\n          throw new RangeError();\n        }\n\n        pannerNode.maxDistance = value;\n      },\n\n      get numberOfInputs() {\n        return pannerNode.numberOfInputs;\n      },\n\n      get numberOfOutputs() {\n        return pannerNode.numberOfOutputs;\n      },\n\n      get orientationX() {\n        return orientationXGainNode.gain;\n      },\n\n      get orientationY() {\n        return orientationYGainNode.gain;\n      },\n\n      get orientationZ() {\n        return orientationZGainNode.gain;\n      },\n\n      get panningModel() {\n        return pannerNode.panningModel;\n      },\n\n      set panningModel(value) {\n        pannerNode.panningModel = value; // Bug #123: Edge does not support HRTF as panningModel.\n\n        if (pannerNode.panningModel !== value && value === 'HRTF') {\n          throw createNotSupportedError();\n        }\n      },\n\n      get positionX() {\n        return positionXGainNode.gain;\n      },\n\n      get positionY() {\n        return positionYGainNode.gain;\n      },\n\n      get positionZ() {\n        return positionZGainNode.gain;\n      },\n\n      get refDistance() {\n        return pannerNode.refDistance;\n      },\n\n      set refDistance(value) {\n        // Bug #129: Edge & Safari do not throw an error yet.\n        if (value < 0) {\n          throw new RangeError();\n        }\n\n        pannerNode.refDistance = value;\n      },\n\n      get rolloffFactor() {\n        return pannerNode.rolloffFactor;\n      },\n\n      set rolloffFactor(value) {\n        // Bug #130: Edge & Safari do not throw an error yet.\n        if (value < 0) {\n          throw new RangeError();\n        }\n\n        pannerNode.rolloffFactor = value;\n      },\n\n      addEventListener(...args) {\n        return inputGainNode.addEventListener(args[0], args[1], args[2]);\n      },\n\n      dispatchEvent(...args) {\n        return inputGainNode.dispatchEvent(args[0]);\n      },\n\n      removeEventListener(...args) {\n        return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n      }\n\n    };\n\n    if (coneInnerAngle !== nativePannerNodeFaker.coneInnerAngle) {\n      nativePannerNodeFaker.coneInnerAngle = coneInnerAngle;\n    }\n\n    if (coneOuterAngle !== nativePannerNodeFaker.coneOuterAngle) {\n      nativePannerNodeFaker.coneOuterAngle = coneOuterAngle;\n    }\n\n    if (coneOuterGain !== nativePannerNodeFaker.coneOuterGain) {\n      nativePannerNodeFaker.coneOuterGain = coneOuterGain;\n    }\n\n    if (distanceModel !== nativePannerNodeFaker.distanceModel) {\n      nativePannerNodeFaker.distanceModel = distanceModel;\n    }\n\n    if (maxDistance !== nativePannerNodeFaker.maxDistance) {\n      nativePannerNodeFaker.maxDistance = maxDistance;\n    }\n\n    if (orientationX !== nativePannerNodeFaker.orientationX.value) {\n      nativePannerNodeFaker.orientationX.value = orientationX;\n    }\n\n    if (orientationY !== nativePannerNodeFaker.orientationY.value) {\n      nativePannerNodeFaker.orientationY.value = orientationY;\n    }\n\n    if (orientationZ !== nativePannerNodeFaker.orientationZ.value) {\n      nativePannerNodeFaker.orientationZ.value = orientationZ;\n    }\n\n    if (panningModel !== nativePannerNodeFaker.panningModel) {\n      nativePannerNodeFaker.panningModel = panningModel;\n    }\n\n    if (positionX !== nativePannerNodeFaker.positionX.value) {\n      nativePannerNodeFaker.positionX.value = positionX;\n    }\n\n    if (positionY !== nativePannerNodeFaker.positionY.value) {\n      nativePannerNodeFaker.positionY.value = positionY;\n    }\n\n    if (positionZ !== nativePannerNodeFaker.positionZ.value) {\n      nativePannerNodeFaker.positionZ.value = positionZ;\n    }\n\n    if (refDistance !== nativePannerNodeFaker.refDistance) {\n      nativePannerNodeFaker.refDistance = refDistance;\n    }\n\n    if (rolloffFactor !== nativePannerNodeFaker.rolloffFactor) {\n      nativePannerNodeFaker.rolloffFactor = rolloffFactor;\n    }\n\n    if (lastOrientation[0] !== 1 || lastOrientation[1] !== 0 || lastOrientation[2] !== 0) {\n      pannerNode.setOrientation(...lastOrientation); // tslint:disable-line:deprecation\n    }\n\n    if (lastPosition[0] !== 0 || lastPosition[1] !== 0 || lastPosition[2] !== 0) {\n      pannerNode.setPosition(...lastPosition); // tslint:disable-line:deprecation\n    }\n\n    const whenConnected = () => {\n      inputGainNode.connect(pannerNode); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n      connectNativeAudioNodeToNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);\n      waveShaperNode.connect(orientationXGainNode).connect(channelMergerNode, 0, 0);\n      waveShaperNode.connect(orientationYGainNode).connect(channelMergerNode, 0, 1);\n      waveShaperNode.connect(orientationZGainNode).connect(channelMergerNode, 0, 2);\n      waveShaperNode.connect(positionXGainNode).connect(channelMergerNode, 0, 3);\n      waveShaperNode.connect(positionYGainNode).connect(channelMergerNode, 0, 4);\n      waveShaperNode.connect(positionZGainNode).connect(channelMergerNode, 0, 5);\n      channelMergerNode.connect(scriptProcessorNode).connect(nativeContext.destination);\n    };\n\n    const whenDisconnected = () => {\n      inputGainNode.disconnect(pannerNode); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n      disconnectNativeAudioNodeFromNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);\n      waveShaperNode.disconnect(orientationXGainNode);\n      orientationXGainNode.disconnect(channelMergerNode);\n      waveShaperNode.disconnect(orientationYGainNode);\n      orientationYGainNode.disconnect(channelMergerNode);\n      waveShaperNode.disconnect(orientationZGainNode);\n      orientationZGainNode.disconnect(channelMergerNode);\n      waveShaperNode.disconnect(positionXGainNode);\n      positionXGainNode.disconnect(channelMergerNode);\n      waveShaperNode.disconnect(positionYGainNode);\n      positionYGainNode.disconnect(channelMergerNode);\n      waveShaperNode.disconnect(positionZGainNode);\n      positionZGainNode.disconnect(channelMergerNode);\n      channelMergerNode.disconnect(scriptProcessorNode);\n      scriptProcessorNode.disconnect(nativeContext.destination);\n    };\n\n    return monitorConnections(interceptConnections(nativePannerNodeFaker, pannerNode), whenConnected, whenDisconnected);\n  };\n};","export const createNativePeriodicWaveFactory = getBackupNativeContext => {\n  return (nativeContext, {\n    disableNormalization,\n    imag,\n    real\n  }) => {\n    // Bug #50: Only Edge does currently not allow to create AudioNodes (and other objects) on a closed context yet.\n    const backupNativeContext = getBackupNativeContext(nativeContext); // @todo Edge, Firefox & Safari do only accept Float32Arrays.\n\n    const wrappedImag = new Float32Array(imag);\n    const wrappedReal = new Float32Array(real);\n\n    if (backupNativeContext !== null) {\n      return backupNativeContext.createPeriodicWave(wrappedReal, wrappedImag, {\n        disableNormalization\n      });\n    }\n\n    return nativeContext.createPeriodicWave(wrappedReal, wrappedImag, {\n      disableNormalization\n    });\n  };\n};","export const createNativeScriptProcessorNodeFactory = createNativeAudioNode => {\n  return (nativeContext, bufferSize, numberOfInputChannels, numberOfOutputChannels) => {\n    return createNativeAudioNode(nativeContext, ntvCntxt => {\n      return ntvCntxt.createScriptProcessor(bufferSize, numberOfInputChannels, numberOfOutputChannels);\n    });\n  };\n};","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeStereoPannerNodeFactory = (createNativeAudioNode, createNativeStereoPannerNodeFaker, createNotSupportedError) => {\n  return (nativeContext, options) => createNativeAudioNode(nativeContext, ntvCntxt => {\n    const channelCountMode = options.channelCountMode;\n    /*\n     * Bug #105: The channelCountMode of 'clamped-max' should be supported. However it is not possible to write a polyfill for Safari\n     * which supports it and therefore it can't be supported at all.\n     */\n\n    if (channelCountMode === 'clamped-max') {\n      throw createNotSupportedError();\n    } // Bug #105: Safari does not support the StereoPannerNode.\n\n\n    if (nativeContext.createStereoPanner === undefined) {\n      return createNativeStereoPannerNodeFaker(nativeContext, options);\n    }\n\n    const nativeStereoPannerNode = ntvCntxt.createStereoPanner();\n    assignNativeAudioNodeOptions(nativeStereoPannerNode, options);\n    assignNativeAudioNodeAudioParamValue(nativeStereoPannerNode, options, 'pan');\n    /*\n     * Bug #105: The channelCountMode of 'clamped-max' should be supported. However it is not possible to write a polyfill for Safari\n     * which supports it and therefore it can't be supported at all.\n     */\n\n    Object.defineProperty(nativeStereoPannerNode, 'channelCountMode', {\n      get: () => channelCountMode,\n      set: value => {\n        if (value !== channelCountMode) {\n          throw createNotSupportedError();\n        }\n      }\n    });\n    return nativeStereoPannerNode;\n  });\n};","import { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeStereoPannerNodeFakerFactory = (createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError, monitorConnections) => {\n  // The curve has a size of 14bit plus 1 value to have an exact representation for zero. This value has been determined experimentally.\n  const CURVE_SIZE = 16385;\n  const DC_CURVE = new Float32Array([1, 1]);\n  const HALF_PI = Math.PI / 2;\n  const SINGLE_CHANNEL_OPTIONS = {\n    channelCount: 1,\n    channelCountMode: 'explicit',\n    channelInterpretation: 'discrete'\n  };\n  const SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS = { ...SINGLE_CHANNEL_OPTIONS,\n    oversample: 'none'\n  };\n\n  const buildInternalGraphForMono = (nativeContext, inputGainNode, panGainNode, channelMergerNode) => {\n    const leftWaveShaperCurve = new Float32Array(CURVE_SIZE);\n    const rightWaveShaperCurve = new Float32Array(CURVE_SIZE);\n\n    for (let i = 0; i < CURVE_SIZE; i += 1) {\n      const x = i / (CURVE_SIZE - 1) * HALF_PI;\n      leftWaveShaperCurve[i] = Math.cos(x);\n      rightWaveShaperCurve[i] = Math.sin(x);\n    }\n\n    const leftGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    }); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    const leftWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n      curve: leftWaveShaperCurve\n    }); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    const panWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n      curve: DC_CURVE\n    });\n    const rightGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    }); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    const rightWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n      curve: rightWaveShaperCurve\n    });\n    return {\n      connectGraph() {\n        inputGainNode.connect(leftGainNode);\n        inputGainNode.connect(panWaveShaperNode.inputs[0]);\n        inputGainNode.connect(rightGainNode);\n        panWaveShaperNode.connect(panGainNode);\n        panGainNode.connect(leftWaveShaperNode.inputs[0]);\n        panGainNode.connect(rightWaveShaperNode.inputs[0]);\n        leftWaveShaperNode.connect(leftGainNode.gain);\n        rightWaveShaperNode.connect(rightGainNode.gain);\n        leftGainNode.connect(channelMergerNode, 0, 0);\n        rightGainNode.connect(channelMergerNode, 0, 1);\n      },\n\n      disconnectGraph() {\n        inputGainNode.disconnect(leftGainNode);\n        inputGainNode.disconnect(panWaveShaperNode.inputs[0]);\n        inputGainNode.disconnect(rightGainNode);\n        panWaveShaperNode.disconnect(panGainNode);\n        panGainNode.disconnect(leftWaveShaperNode.inputs[0]);\n        panGainNode.disconnect(rightWaveShaperNode.inputs[0]);\n        leftWaveShaperNode.disconnect(leftGainNode.gain);\n        rightWaveShaperNode.disconnect(rightGainNode.gain);\n        leftGainNode.disconnect(channelMergerNode, 0, 0);\n        rightGainNode.disconnect(channelMergerNode, 0, 1);\n      }\n\n    };\n  };\n\n  const buildInternalGraphForStereo = (nativeContext, inputGainNode, panGainNode, channelMergerNode) => {\n    const leftInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n    const leftInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n    const rightInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n    const rightInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n    const centerIndex = Math.floor(CURVE_SIZE / 2);\n\n    for (let i = 0; i < CURVE_SIZE; i += 1) {\n      if (i > centerIndex) {\n        const x = (i - centerIndex) / (CURVE_SIZE - 1 - centerIndex) * HALF_PI;\n        leftInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);\n        leftInputForRightOutputWaveShaperCurve[i] = Math.sin(x);\n        rightInputForLeftOutputWaveShaperCurve[i] = 0;\n        rightInputForRightOutputWaveShaperCurve[i] = 1;\n      } else {\n        const x = i / (CURVE_SIZE - 1 - centerIndex) * HALF_PI;\n        leftInputForLeftOutputWaveShaperCurve[i] = 1;\n        leftInputForRightOutputWaveShaperCurve[i] = 0;\n        rightInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);\n        rightInputForRightOutputWaveShaperCurve[i] = Math.sin(x);\n      }\n    }\n\n    const channelSplitterNode = createNativeChannelSplitterNode(nativeContext, {\n      channelCount: 2,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete',\n      numberOfOutputs: 2\n    });\n    const leftInputForLeftOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    }); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    const leftInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n      curve: leftInputForLeftOutputWaveShaperCurve\n    });\n    const leftInputForRightOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    }); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    const leftInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n      curve: leftInputForRightOutputWaveShaperCurve\n    }); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    const panWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n      curve: DC_CURVE\n    });\n    const rightInputForLeftOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    }); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    const rightInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n      curve: rightInputForLeftOutputWaveShaperCurve\n    });\n    const rightInputForRightOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    }); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    const rightInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n      curve: rightInputForRightOutputWaveShaperCurve\n    });\n    return {\n      connectGraph() {\n        inputGainNode.connect(channelSplitterNode);\n        inputGainNode.connect(panWaveShaperNode.inputs[0]);\n        channelSplitterNode.connect(leftInputForLeftOutputGainNode, 1);\n        channelSplitterNode.connect(leftInputForRightOutputGainNode, 1);\n        channelSplitterNode.connect(rightInputForLeftOutputGainNode, 1);\n        channelSplitterNode.connect(rightInputForRightOutputGainNode, 1);\n        panWaveShaperNode.connect(panGainNode);\n        panGainNode.connect(leftInputForLeftOutputWaveShaperNode.inputs[0]);\n        panGainNode.connect(leftInputForRightOutputWaveShaperNode.inputs[0]);\n        panGainNode.connect(rightInputForLeftOutputWaveShaperNode.inputs[0]);\n        panGainNode.connect(rightInputForRightOutputWaveShaperNode.inputs[0]);\n        leftInputForLeftOutputWaveShaperNode.connect(leftInputForLeftOutputGainNode.gain);\n        leftInputForRightOutputWaveShaperNode.connect(leftInputForRightOutputGainNode.gain);\n        rightInputForLeftOutputWaveShaperNode.connect(rightInputForLeftOutputGainNode.gain);\n        rightInputForRightOutputWaveShaperNode.connect(rightInputForRightOutputGainNode.gain);\n        leftInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n        rightInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n        leftInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n        rightInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n      },\n\n      disconnectGraph() {\n        inputGainNode.disconnect(channelSplitterNode);\n        inputGainNode.disconnect(panWaveShaperNode.inputs[0]);\n        channelSplitterNode.disconnect(leftInputForLeftOutputGainNode, 1);\n        channelSplitterNode.disconnect(leftInputForRightOutputGainNode, 1);\n        channelSplitterNode.disconnect(rightInputForLeftOutputGainNode, 1);\n        channelSplitterNode.disconnect(rightInputForRightOutputGainNode, 1);\n        panWaveShaperNode.disconnect(panGainNode);\n        panGainNode.disconnect(leftInputForLeftOutputWaveShaperNode.inputs[0]);\n        panGainNode.disconnect(leftInputForRightOutputWaveShaperNode.inputs[0]);\n        panGainNode.disconnect(rightInputForLeftOutputWaveShaperNode.inputs[0]);\n        panGainNode.disconnect(rightInputForRightOutputWaveShaperNode.inputs[0]);\n        leftInputForLeftOutputWaveShaperNode.disconnect(leftInputForLeftOutputGainNode.gain);\n        leftInputForRightOutputWaveShaperNode.disconnect(leftInputForRightOutputGainNode.gain);\n        rightInputForLeftOutputWaveShaperNode.disconnect(rightInputForLeftOutputGainNode.gain);\n        rightInputForRightOutputWaveShaperNode.disconnect(rightInputForRightOutputGainNode.gain);\n        leftInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);\n        rightInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);\n        leftInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);\n        rightInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);\n      }\n\n    };\n  };\n\n  const buildInternalGraph = (nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode) => {\n    if (channelCount === 1) {\n      return buildInternalGraphForMono(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n    }\n\n    if (channelCount === 2) {\n      return buildInternalGraphForStereo(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n    }\n\n    throw createNotSupportedError();\n  };\n\n  return (nativeContext, {\n    channelCount,\n    channelCountMode,\n    pan,\n    ...audioNodeOptions\n  }) => {\n    if (channelCountMode === 'max') {\n      throw createNotSupportedError();\n    }\n\n    const channelMergerNode = createNativeChannelMergerNode(nativeContext, { ...audioNodeOptions,\n      channelCount: 1,\n      channelCountMode,\n      numberOfInputs: 2\n    });\n    const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions,\n      channelCount,\n      channelCountMode,\n      gain: 1\n    });\n    const panGainNode = createNativeGainNode(nativeContext, {\n      channelCount: 1,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete',\n      gain: pan\n    });\n    let {\n      connectGraph,\n      disconnectGraph\n    } = buildInternalGraph(nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode);\n    Object.defineProperty(panGainNode.gain, 'defaultValue', {\n      get: () => 0\n    });\n    const nativeStereoPannerNodeFakerFactory = {\n      get bufferSize() {\n        return undefined;\n      },\n\n      get channelCount() {\n        return inputGainNode.channelCount;\n      },\n\n      set channelCount(value) {\n        if (inputGainNode.channelCount !== value) {\n          if (isConnected) {\n            disconnectGraph();\n          }\n\n          ({\n            connectGraph,\n            disconnectGraph\n          } = buildInternalGraph(nativeContext, value, inputGainNode, panGainNode, channelMergerNode));\n\n          if (isConnected) {\n            connectGraph();\n          }\n        }\n\n        inputGainNode.channelCount = value;\n      },\n\n      get channelCountMode() {\n        return inputGainNode.channelCountMode;\n      },\n\n      set channelCountMode(value) {\n        if (value === 'clamped-max' || value === 'max') {\n          throw createNotSupportedError();\n        }\n\n        inputGainNode.channelCountMode = value;\n      },\n\n      get channelInterpretation() {\n        return inputGainNode.channelInterpretation;\n      },\n\n      set channelInterpretation(value) {\n        inputGainNode.channelInterpretation = value;\n      },\n\n      get context() {\n        return inputGainNode.context;\n      },\n\n      get inputs() {\n        return [inputGainNode];\n      },\n\n      get numberOfInputs() {\n        return inputGainNode.numberOfInputs;\n      },\n\n      get numberOfOutputs() {\n        return inputGainNode.numberOfOutputs;\n      },\n\n      get pan() {\n        return panGainNode.gain;\n      },\n\n      addEventListener(...args) {\n        return inputGainNode.addEventListener(args[0], args[1], args[2]);\n      },\n\n      dispatchEvent(...args) {\n        return inputGainNode.dispatchEvent(args[0]);\n      },\n\n      removeEventListener(...args) {\n        return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n      }\n\n    };\n    let isConnected = false;\n\n    const whenConnected = () => {\n      connectGraph();\n      isConnected = true;\n    };\n\n    const whenDisconnected = () => {\n      disconnectGraph();\n      isConnected = false;\n    };\n\n    return monitorConnections(interceptConnections(nativeStereoPannerNodeFakerFactory, channelMergerNode), whenConnected, whenDisconnected);\n  };\n};","import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeWaveShaperNodeFactory = (createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeAudioNode, createNativeWaveShaperNodeFaker, isDCCurve, monitorConnections, overwriteAccessors) => {\n  return (nativeContext, options) => {\n    const nativeWaveShaperNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createWaveShaper());\n\n    try {\n      // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n      // Bug #119: Safari does not correctly map the values. Bug #102 is only used to detect Safari in this case.\n      nativeWaveShaperNode.curve = new Float32Array([1]);\n      return createNativeWaveShaperNodeFaker(nativeContext, options);\n    } catch {\n      /* Ignore errors. */\n    }\n\n    assignNativeAudioNodeOptions(nativeWaveShaperNode, options);\n    const curve = options.curve; // Bug #104: Chrome will throw an InvalidAccessError when the curve has less than two samples.\n\n    if (curve !== null && curve.length < 2) {\n      throw createInvalidStateError();\n    }\n\n    assignNativeAudioNodeOption(nativeWaveShaperNode, options, 'curve');\n    assignNativeAudioNodeOption(nativeWaveShaperNode, options, 'oversample');\n    let disconnectNativeAudioBufferSourceNode = null;\n    let isConnected = false;\n    overwriteAccessors(nativeWaveShaperNode, 'curve', get => () => get.call(nativeWaveShaperNode), set => value => {\n      set.call(nativeWaveShaperNode, value);\n\n      if (isConnected) {\n        if (isDCCurve(value) && disconnectNativeAudioBufferSourceNode === null) {\n          disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);\n        } else if (!isDCCurve(value) && disconnectNativeAudioBufferSourceNode !== null) {\n          disconnectNativeAudioBufferSourceNode();\n          disconnectNativeAudioBufferSourceNode = null;\n        }\n      }\n\n      return value;\n    });\n\n    const whenConnected = () => {\n      isConnected = true;\n\n      if (isDCCurve(nativeWaveShaperNode.curve)) {\n        disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);\n      }\n    };\n\n    const whenDisconnected = () => {\n      isConnected = false;\n\n      if (disconnectNativeAudioBufferSourceNode !== null) {\n        disconnectNativeAudioBufferSourceNode();\n        disconnectNativeAudioBufferSourceNode = null;\n      }\n    };\n\n    return monitorConnections(nativeWaveShaperNode, whenConnected, whenDisconnected);\n  };\n};","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeWaveShaperNodeFakerFactory = (createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeAudioNode, createNativeGainNode, isDCCurve, monitorConnections) => {\n  return (nativeContext, {\n    curve,\n    oversample,\n    ...audioNodeOptions\n  }) => {\n    const negativeWaveShaperNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createWaveShaper());\n    const positiveWaveShaperNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createWaveShaper());\n    assignNativeAudioNodeOptions(negativeWaveShaperNode, audioNodeOptions);\n    assignNativeAudioNodeOptions(positiveWaveShaperNode, audioNodeOptions);\n    const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions,\n      gain: 1\n    });\n    const invertGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions,\n      gain: -1\n    });\n    const outputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions,\n      gain: 1\n    });\n    const revertGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions,\n      gain: -1\n    });\n    let disconnectNativeAudioBufferSourceNode = null;\n    let isConnected = false;\n    let unmodifiedCurve = null;\n    const nativeWaveShaperNodeFaker = {\n      get bufferSize() {\n        return undefined;\n      },\n\n      get channelCount() {\n        return negativeWaveShaperNode.channelCount;\n      },\n\n      set channelCount(value) {\n        inputGainNode.channelCount = value;\n        invertGainNode.channelCount = value;\n        negativeWaveShaperNode.channelCount = value;\n        outputGainNode.channelCount = value;\n        positiveWaveShaperNode.channelCount = value;\n        revertGainNode.channelCount = value;\n      },\n\n      get channelCountMode() {\n        return negativeWaveShaperNode.channelCountMode;\n      },\n\n      set channelCountMode(value) {\n        inputGainNode.channelCountMode = value;\n        invertGainNode.channelCountMode = value;\n        negativeWaveShaperNode.channelCountMode = value;\n        outputGainNode.channelCountMode = value;\n        positiveWaveShaperNode.channelCountMode = value;\n        revertGainNode.channelCountMode = value;\n      },\n\n      get channelInterpretation() {\n        return negativeWaveShaperNode.channelInterpretation;\n      },\n\n      set channelInterpretation(value) {\n        inputGainNode.channelInterpretation = value;\n        invertGainNode.channelInterpretation = value;\n        negativeWaveShaperNode.channelInterpretation = value;\n        outputGainNode.channelInterpretation = value;\n        positiveWaveShaperNode.channelInterpretation = value;\n        revertGainNode.channelInterpretation = value;\n      },\n\n      get context() {\n        return negativeWaveShaperNode.context;\n      },\n\n      get curve() {\n        return unmodifiedCurve;\n      },\n\n      set curve(value) {\n        // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n        if (curve !== null && curve.length < 2) {\n          throw createInvalidStateError();\n        }\n\n        if (value === null) {\n          negativeWaveShaperNode.curve = value;\n          positiveWaveShaperNode.curve = value;\n        } else {\n          const curveLength = value.length;\n          const negativeCurve = new Float32Array(curveLength + 2 - curveLength % 2);\n          const positiveCurve = new Float32Array(curveLength + 2 - curveLength % 2);\n          negativeCurve[0] = value[0];\n          positiveCurve[0] = -value[curveLength - 1];\n          const length = Math.ceil((curveLength + 1) / 2);\n          const centerIndex = (curveLength + 1) / 2 - 1;\n\n          for (let i = 1; i < length; i += 1) {\n            const theoreticIndex = i / length * centerIndex;\n            const lowerIndex = Math.floor(theoreticIndex);\n            const upperIndex = Math.ceil(theoreticIndex);\n            negativeCurve[i] = lowerIndex === upperIndex ? value[lowerIndex] : (1 - (theoreticIndex - lowerIndex)) * value[lowerIndex] + (1 - (upperIndex - theoreticIndex)) * value[upperIndex];\n            positiveCurve[i] = lowerIndex === upperIndex ? -value[curveLength - 1 - lowerIndex] : -((1 - (theoreticIndex - lowerIndex)) * value[curveLength - 1 - lowerIndex]) - (1 - (upperIndex - theoreticIndex)) * value[curveLength - 1 - upperIndex];\n          }\n\n          negativeCurve[length] = curveLength % 2 === 1 ? value[length - 1] : (value[length - 2] + value[length - 1]) / 2;\n          negativeWaveShaperNode.curve = negativeCurve;\n          positiveWaveShaperNode.curve = positiveCurve;\n        }\n\n        unmodifiedCurve = value;\n\n        if (isConnected) {\n          if (isDCCurve(unmodifiedCurve) && disconnectNativeAudioBufferSourceNode === null) {\n            disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, inputGainNode);\n          } else if (disconnectNativeAudioBufferSourceNode !== null) {\n            disconnectNativeAudioBufferSourceNode();\n            disconnectNativeAudioBufferSourceNode = null;\n          }\n        }\n      },\n\n      get inputs() {\n        return [inputGainNode];\n      },\n\n      get numberOfInputs() {\n        return negativeWaveShaperNode.numberOfInputs;\n      },\n\n      get numberOfOutputs() {\n        return negativeWaveShaperNode.numberOfOutputs;\n      },\n\n      get oversample() {\n        return negativeWaveShaperNode.oversample;\n      },\n\n      set oversample(value) {\n        negativeWaveShaperNode.oversample = value;\n        positiveWaveShaperNode.oversample = value;\n      },\n\n      addEventListener(...args) {\n        return inputGainNode.addEventListener(args[0], args[1], args[2]);\n      },\n\n      dispatchEvent(...args) {\n        return inputGainNode.dispatchEvent(args[0]);\n      },\n\n      removeEventListener(...args) {\n        return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n      }\n\n    };\n\n    if (curve !== nativeWaveShaperNodeFaker.curve) {\n      nativeWaveShaperNodeFaker.curve = curve;\n    }\n\n    if (oversample !== nativeWaveShaperNodeFaker.oversample) {\n      nativeWaveShaperNodeFaker.oversample = oversample;\n    }\n\n    const whenConnected = () => {\n      inputGainNode.connect(negativeWaveShaperNode).connect(outputGainNode);\n      inputGainNode.connect(invertGainNode).connect(positiveWaveShaperNode).connect(revertGainNode).connect(outputGainNode);\n      isConnected = true;\n\n      if (isDCCurve(unmodifiedCurve)) {\n        disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, inputGainNode);\n      }\n    };\n\n    const whenDisconnected = () => {\n      inputGainNode.disconnect(negativeWaveShaperNode);\n      negativeWaveShaperNode.disconnect(outputGainNode);\n      inputGainNode.disconnect(invertGainNode);\n      invertGainNode.disconnect(positiveWaveShaperNode);\n      positiveWaveShaperNode.disconnect(revertGainNode);\n      revertGainNode.disconnect(outputGainNode);\n      isConnected = false;\n\n      if (disconnectNativeAudioBufferSourceNode !== null) {\n        disconnectNativeAudioBufferSourceNode();\n        disconnectNativeAudioBufferSourceNode = null;\n      }\n    };\n\n    return monitorConnections(interceptConnections(nativeWaveShaperNodeFaker, outputGainNode), whenConnected, whenDisconnected);\n  };\n};","import { testPromiseSupport } from '../helpers/test-promise-support';\nconst DEFAULT_OPTIONS = {\n  numberOfChannels: 1\n};\nexport const createOfflineAudioContextConstructor = (baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering) => {\n  return class OfflineAudioContext extends baseAudioContextConstructor {\n    constructor(a, b, c) {\n      let options;\n\n      if (typeof a === 'number' && b !== undefined && c !== undefined) {\n        options = {\n          length: b,\n          numberOfChannels: a,\n          sampleRate: c\n        };\n      } else if (typeof a === 'object') {\n        options = a;\n      } else {\n        throw new Error('The given parameters are not valid.');\n      }\n\n      const {\n        length,\n        numberOfChannels,\n        sampleRate\n      } = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate); // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.\n\n      if (!cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n        nativeOfflineAudioContext.addEventListener('statechange', (() => {\n          let i = 0;\n\n          const delayStateChangeEvent = event => {\n            if (this._state === 'running') {\n              if (i > 0) {\n                nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);\n                event.stopImmediatePropagation();\n\n                this._waitForThePromiseToSettle(event);\n              } else {\n                i += 1;\n              }\n            }\n          };\n\n          return delayStateChangeEvent;\n        })());\n      }\n\n      super(nativeOfflineAudioContext, numberOfChannels);\n      this._length = length;\n      this._nativeOfflineAudioContext = nativeOfflineAudioContext;\n      this._state = null;\n    }\n\n    get length() {\n      // Bug #17: Safari does not yet expose the length.\n      if (this._nativeOfflineAudioContext.length === undefined) {\n        return this._length;\n      }\n\n      return this._nativeOfflineAudioContext.length;\n    }\n\n    get state() {\n      return this._state === null ? this._nativeOfflineAudioContext.state : this._state;\n    }\n\n    startRendering() {\n      /*\n       * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore\n       * the state of the nativeOfflineAudioContext might no transition to running immediately.\n       */\n      if (this._state === 'running') {\n        return Promise.reject(createInvalidStateError());\n      }\n\n      this._state = 'running';\n      return startRendering(this.destination, this._nativeOfflineAudioContext).then(audioBuffer => {\n        this._state = null;\n        /*\n         * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n         * deleteAudioGraph(this, this._nativeOfflineAudioContext);\n         */\n\n        return audioBuffer;\n      }) // @todo This could be written more elegantly when Promise.finally() becomes avalaible.\n      .catch(err => {\n        this._state = null;\n        /*\n         * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n         * deleteAudioGraph(this, this._nativeOfflineAudioContext);\n         */\n\n        throw err;\n      });\n    }\n\n    _waitForThePromiseToSettle(event) {\n      if (this._state === null) {\n        this._nativeOfflineAudioContext.dispatchEvent(event);\n      } else {\n        setTimeout(() => this._waitForThePromiseToSettle(event));\n      }\n    }\n\n  };\n};","import { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nconst DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  detune: 0,\n  frequency: 440,\n  type: 'sine'\n};\nexport const createOscillatorNodeConstructor = (audioNodeConstructor, createAudioParam, createInvalidStateError, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {\n  return class OscillatorNode extends audioNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeOscillatorNode = createNativeOscillatorNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const oscillatorNodeRenderer = isOffline ? createOscillatorNodeRenderer() : null;\n      const nyquist = context.sampleRate / 2;\n      super(context, false, nativeOscillatorNode, oscillatorNodeRenderer); // Bug #81: Edge, Firefox & Safari do not export the correct values for maxValue and minValue.\n\n      this._detune = createAudioParam(this, isOffline, nativeOscillatorNode.detune, 153600, -153600); // Bug #76: Edge & Safari do not export the correct values for maxValue and minValue.\n\n      this._frequency = createAudioParam(this, isOffline, nativeOscillatorNode.frequency, nyquist, -nyquist);\n      this._nativeOscillatorNode = nativeOscillatorNode;\n      this._onended = null;\n      this._oscillatorNodeRenderer = oscillatorNodeRenderer;\n\n      if (this._oscillatorNodeRenderer !== null && mergedOptions.periodicWave !== undefined) {\n        this._oscillatorNodeRenderer.periodicWave = mergedOptions.periodicWave;\n      }\n    }\n\n    get detune() {\n      return this._detune;\n    }\n\n    get frequency() {\n      return this._frequency;\n    }\n\n    get onended() {\n      return this._onended;\n    }\n\n    set onended(value) {\n      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n      this._nativeOscillatorNode.onended = wrappedListener;\n      const nativeOnEnded = this._nativeOscillatorNode.onended;\n      this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n    }\n\n    get type() {\n      return this._nativeOscillatorNode.type;\n    }\n\n    set type(value) {\n      this._nativeOscillatorNode.type = value; // Bug #57: Edge will not throw an error when assigning the type to 'custom'. But it still will change the value.\n\n      if (value === 'custom') {\n        throw createInvalidStateError();\n      }\n\n      if (this._oscillatorNodeRenderer !== null) {\n        this._oscillatorNodeRenderer.periodicWave = null;\n      }\n    }\n\n    setPeriodicWave(periodicWave) {\n      this._nativeOscillatorNode.setPeriodicWave(periodicWave);\n\n      if (this._oscillatorNodeRenderer !== null) {\n        this._oscillatorNodeRenderer.periodicWave = periodicWave;\n      }\n    }\n\n    start(when = 0) {\n      this._nativeOscillatorNode.start(when);\n\n      if (this._oscillatorNodeRenderer !== null) {\n        this._oscillatorNodeRenderer.start = when;\n      } else {\n        setInternalStateToActive(this);\n\n        const resetInternalStateToPassive = () => {\n          this._nativeOscillatorNode.removeEventListener('ended', resetInternalStateToPassive); // @todo Determine a meaningful delay instead of just using one second.\n\n\n          setTimeout(() => setInternalStateToPassive(this), 1000);\n        };\n\n        this._nativeOscillatorNode.addEventListener('ended', resetInternalStateToPassive);\n      }\n    }\n\n    stop(when = 0) {\n      this._nativeOscillatorNode.stop(when);\n\n      if (this._oscillatorNodeRenderer !== null) {\n        this._oscillatorNodeRenderer.stop = when;\n      }\n    }\n\n  };\n};","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createOscillatorNodeRendererFactory = (connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeOscillatorNodes = new WeakMap();\n    let periodicWave = null;\n    let start = null;\n    let stop = null;\n\n    const createOscillatorNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeOscillatorNode = getNativeAudioNode(proxy); // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeOscillatorNodeIsOwnedByContext = isOwnedByContext(nativeOscillatorNode, nativeOfflineAudioContext);\n\n      if (!nativeOscillatorNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeOscillatorNode.channelCount,\n          channelCountMode: nativeOscillatorNode.channelCountMode,\n          channelInterpretation: nativeOscillatorNode.channelInterpretation,\n          detune: nativeOscillatorNode.detune.value,\n          frequency: nativeOscillatorNode.frequency.value,\n          periodicWave: periodicWave === null ? undefined : periodicWave,\n          type: nativeOscillatorNode.type\n        };\n        nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);\n\n        if (start !== null) {\n          nativeOscillatorNode.start(start);\n        }\n\n        if (stop !== null) {\n          nativeOscillatorNode.stop(stop);\n        }\n      }\n\n      renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);\n\n      if (!nativeOscillatorNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency, trace);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency, trace);\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode, trace);\n      return nativeOscillatorNode;\n    };\n\n    return {\n      set periodicWave(value) {\n        periodicWave = value;\n      },\n\n      set start(value) {\n        start = value;\n      },\n\n      set stop(value) {\n        stop = value;\n      },\n\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeOscillatorNode !== undefined) {\n          return Promise.resolve(renderedNativeOscillatorNode);\n        }\n\n        return createOscillatorNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nconst DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'clamped-max',\n  channelInterpretation: 'speakers',\n  coneInnerAngle: 360,\n  coneOuterAngle: 360,\n  coneOuterGain: 0,\n  distanceModel: 'inverse',\n  maxDistance: 10000,\n  orientationX: 1,\n  orientationY: 0,\n  orientationZ: 0,\n  panningModel: 'equalpower',\n  positionX: 0,\n  positionY: 0,\n  positionZ: 0,\n  refDistance: 1,\n  rolloffFactor: 1\n};\nexport const createPannerNodeConstructor = (audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext) => {\n  return class PannerNode extends audioNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativePannerNode = createNativePannerNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const pannerNodeRenderer = isOffline ? createPannerNodeRenderer() : null;\n      super(context, false, nativePannerNode, pannerNodeRenderer);\n      this._nativePannerNode = nativePannerNode; // Bug #74: Edge & Safari do not export the correct values for maxValue and minValue for GainNodes.\n\n      this._orientationX = createAudioParam(this, isOffline, nativePannerNode.orientationX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      this._orientationY = createAudioParam(this, isOffline, nativePannerNode.orientationY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      this._orientationZ = createAudioParam(this, isOffline, nativePannerNode.orientationZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      this._positionX = createAudioParam(this, isOffline, nativePannerNode.positionX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      this._positionY = createAudioParam(this, isOffline, nativePannerNode.positionY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      this._positionZ = createAudioParam(this, isOffline, nativePannerNode.positionZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n    }\n\n    get coneInnerAngle() {\n      return this._nativePannerNode.coneInnerAngle;\n    }\n\n    set coneInnerAngle(value) {\n      this._nativePannerNode.coneInnerAngle = value;\n    }\n\n    get coneOuterAngle() {\n      return this._nativePannerNode.coneOuterAngle;\n    }\n\n    set coneOuterAngle(value) {\n      this._nativePannerNode.coneOuterAngle = value;\n    }\n\n    get coneOuterGain() {\n      return this._nativePannerNode.coneOuterGain;\n    }\n\n    set coneOuterGain(value) {\n      this._nativePannerNode.coneOuterGain = value;\n    }\n\n    get distanceModel() {\n      return this._nativePannerNode.distanceModel;\n    }\n\n    set distanceModel(value) {\n      this._nativePannerNode.distanceModel = value;\n    }\n\n    get maxDistance() {\n      return this._nativePannerNode.maxDistance;\n    }\n\n    set maxDistance(value) {\n      this._nativePannerNode.maxDistance = value;\n    }\n\n    get orientationX() {\n      return this._orientationX;\n    }\n\n    get orientationY() {\n      return this._orientationY;\n    }\n\n    get orientationZ() {\n      return this._orientationZ;\n    }\n\n    get panningModel() {\n      return this._nativePannerNode.panningModel;\n    }\n\n    set panningModel(value) {\n      this._nativePannerNode.panningModel = value;\n    }\n\n    get positionX() {\n      return this._positionX;\n    }\n\n    get positionY() {\n      return this._positionY;\n    }\n\n    get positionZ() {\n      return this._positionZ;\n    }\n\n    get refDistance() {\n      return this._nativePannerNode.refDistance;\n    }\n\n    set refDistance(value) {\n      this._nativePannerNode.refDistance = value;\n    }\n\n    get rolloffFactor() {\n      return this._nativePannerNode.rolloffFactor;\n    }\n\n    set rolloffFactor(value) {\n      this._nativePannerNode.rolloffFactor = value;\n    }\n\n  };\n};","import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createPannerNodeRendererFactory = (connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeGainNode, createNativePannerNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {\n  return () => {\n    const renderedNativeAudioNodes = new WeakMap();\n    let renderedBufferPromise = null;\n\n    const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeGainNode = null;\n      let nativePannerNode = getNativeAudioNode(proxy);\n      const commonAudioNodeOptions = {\n        channelCount: nativePannerNode.channelCount,\n        channelCountMode: nativePannerNode.channelCountMode,\n        channelInterpretation: nativePannerNode.channelInterpretation\n      };\n      const commonNativePannerNodeOptions = { ...commonAudioNodeOptions,\n        coneInnerAngle: nativePannerNode.coneInnerAngle,\n        coneOuterAngle: nativePannerNode.coneOuterAngle,\n        coneOuterGain: nativePannerNode.coneOuterGain,\n        distanceModel: nativePannerNode.distanceModel,\n        maxDistance: nativePannerNode.maxDistance,\n        panningModel: nativePannerNode.panningModel,\n        refDistance: nativePannerNode.refDistance,\n        rolloffFactor: nativePannerNode.rolloffFactor\n      }; // If the initially used nativePannerNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativePannerNodeIsOwnedByContext = isOwnedByContext(nativePannerNode, nativeOfflineAudioContext); // Bug #124: Edge & Safari do not support modifying the orientation and the position with AudioParams.\n\n      if ('bufferSize' in nativePannerNode) {\n        nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions,\n          gain: 1\n        });\n      } else if (!nativePannerNodeIsOwnedByContext) {\n        const options = { ...commonNativePannerNodeOptions,\n          orientationX: nativePannerNode.orientationX.value,\n          orientationY: nativePannerNode.orientationY.value,\n          orientationZ: nativePannerNode.orientationZ.value,\n          positionX: nativePannerNode.positionX.value,\n          positionY: nativePannerNode.positionY.value,\n          positionZ: nativePannerNode.positionZ.value\n        };\n        nativePannerNode = createNativePannerNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeGainNode === null ? nativePannerNode : nativeGainNode);\n\n      if (nativeGainNode !== null) {\n        if (renderedBufferPromise === null) {\n          if (nativeOfflineAudioContextConstructor === null) {\n            throw new Error('Missing the native OfflineAudioContext constructor.');\n          }\n\n          const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(6, // Bug #17: Safari does not yet expose the length.\n          proxy.context.length, nativeOfflineAudioContext.sampleRate);\n          const nativeChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'speakers',\n            numberOfInputs: 6\n          });\n          nativeChannelMergerNode.connect(partialOfflineAudioContext.destination);\n\n          renderedBufferPromise = (async () => {\n            const nativeConstantSourceNodes = await Promise.all([proxy.orientationX, proxy.orientationY, proxy.orientationZ, proxy.positionX, proxy.positionY, proxy.positionZ].map(async (audioParam, index) => {\n              const nativeConstantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {\n                channelCount: 1,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'discrete',\n                offset: index === 0 ? 1 : 0\n              });\n              await renderAutomation(partialOfflineAudioContext, audioParam, nativeConstantSourceNode.offset, trace);\n              return nativeConstantSourceNode;\n            }));\n\n            for (let i = 0; i < 6; i += 1) {\n              nativeConstantSourceNodes[i].connect(nativeChannelMergerNode, 0, i);\n              nativeConstantSourceNodes[i].start(0);\n            }\n\n            return renderNativeOfflineAudioContext(partialOfflineAudioContext);\n          })();\n        }\n\n        const renderedBuffer = await renderedBufferPromise;\n        const inputGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions,\n          gain: 1\n        });\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, inputGainNode, trace);\n        const channelDatas = [];\n\n        for (let i = 0; i < renderedBuffer.numberOfChannels; i += 1) {\n          channelDatas.push(renderedBuffer.getChannelData(i));\n        }\n\n        let lastOrientation = [channelDatas[0][0], channelDatas[1][0], channelDatas[2][0]];\n        let lastPosition = [channelDatas[3][0], channelDatas[4][0], channelDatas[5][0]];\n        let gateGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions,\n          gain: 1\n        });\n        let partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, { ...commonNativePannerNodeOptions,\n          orientationX: lastOrientation[0],\n          orientationY: lastOrientation[1],\n          orientationZ: lastOrientation[2],\n          positionX: lastPosition[0],\n          positionY: lastPosition[1],\n          positionZ: lastPosition[2]\n        });\n        inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);\n        partialPannerNode.connect(nativeGainNode);\n\n        for (let i = 128; i < renderedBuffer.length; i += 128) {\n          const orientation = [channelDatas[0][i], channelDatas[1][i], channelDatas[2][i]];\n          const positon = [channelDatas[3][i], channelDatas[4][i], channelDatas[5][i]];\n\n          if (orientation.some((value, index) => value !== lastOrientation[index]) || positon.some((value, index) => value !== lastPosition[index])) {\n            lastOrientation = orientation;\n            lastPosition = positon;\n            const currentTime = i / nativeOfflineAudioContext.sampleRate;\n            gateGainNode.gain.setValueAtTime(0, currentTime);\n            gateGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions,\n              gain: 0\n            });\n            partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, { ...commonNativePannerNodeOptions,\n              orientationX: lastOrientation[0],\n              orientationY: lastOrientation[1],\n              orientationZ: lastOrientation[2],\n              positionX: lastPosition[0],\n              positionY: lastPosition[1],\n              positionZ: lastPosition[2]\n            });\n            gateGainNode.gain.setValueAtTime(1, currentTime);\n            inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);\n            partialPannerNode.connect(nativeGainNode);\n          }\n        }\n\n        return nativeGainNode;\n      }\n\n      if (!nativePannerNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ, trace);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ, trace);\n      }\n\n      if (isNativeAudioNodeFaker(nativePannerNode)) {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode.inputs[0], trace);\n      } else {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode, trace);\n      }\n\n      return nativePannerNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeGainNodeOrNativePannerNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeGainNodeOrNativePannerNode !== undefined) {\n          return Promise.resolve(renderedNativeGainNodeOrNativePannerNode);\n        }\n\n        return createAudioNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","const DEFAULT_OPTIONS = {\n  disableNormalization: false\n};\nexport const createPeriodicWaveConstructor = (createNativePeriodicWave, getNativeContext, periodicWaveStore) => {\n  return class PeriodicWave {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const periodicWave = createNativePeriodicWave(nativeContext, mergedOptions);\n      periodicWaveStore.add(periodicWave); // This does violate all good pratices but it is used here to simplify the handling of periodic waves.\n\n      return periodicWave;\n    }\n\n    static [Symbol.hasInstance](instance) {\n      return instance !== null && typeof instance === 'object' && Object.getPrototypeOf(instance) === PeriodicWave.prototype || periodicWaveStore.has(instance);\n    }\n\n  };\n};","export const createRenderAutomation = (getAudioParamRenderer, renderInputsOfAudioParam) => {\n  return (nativeOfflineAudioContext, audioParam, nativeAudioParam, trace) => {\n    const audioParamRenderer = getAudioParamRenderer(audioParam);\n    audioParamRenderer.replay(nativeAudioParam);\n    return renderInputsOfAudioParam(audioParam, nativeOfflineAudioContext, nativeAudioParam, trace);\n  };\n};","export const createRenderInputsOfAudioNode = (getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle) => {\n  return async (audioNode, nativeOfflineAudioContext, nativeAudioNode, trace) => {\n    const audioNodeConnections = getAudioNodeConnections(audioNode);\n    const nextTrace = [...trace, audioNode];\n    await Promise.all(audioNodeConnections.activeInputs.map((connections, input) => Array.from(connections).filter(([source]) => !nextTrace.includes(source)).map(async ([source, output]) => {\n      const audioNodeRenderer = getAudioNodeRenderer(source);\n      const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext, nextTrace);\n      const destination = audioNode.context.destination;\n\n      if (!isPartOfACycle(source) && (audioNode !== destination || !isPartOfACycle(audioNode))) {\n        renderedNativeAudioNode.connect(nativeAudioNode, output, input);\n      }\n    })).reduce((allRenderingPromises, renderingPromises) => [...allRenderingPromises, ...renderingPromises], []));\n  };\n};","export const createRenderInputsOfAudioParam = (getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle) => {\n  return async (audioParam, nativeOfflineAudioContext, nativeAudioParam, trace) => {\n    const audioParamConnections = getAudioParamConnections(audioParam);\n    await Promise.all(Array.from(audioParamConnections.activeInputs).map(async ([source, output]) => {\n      const audioNodeRenderer = getAudioNodeRenderer(source);\n      const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext, trace);\n\n      if (!isPartOfACycle(source)) {\n        renderedNativeAudioNode.connect(nativeAudioParam, output);\n      }\n    }));\n  };\n};","import { testPromiseSupport } from '../helpers/test-promise-support';\nexport const createRenderNativeOfflineAudioContext = (cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, testOfflineAudioContextCurrentTimeSupport) => {\n  return nativeOfflineAudioContext => {\n    // Bug #21: Safari does not support promises yet.\n    if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n      // Bug #158: Edge does not advance currentTime if it is not accessed while rendering the audio.\n      return Promise.resolve(cacheTestResult(testOfflineAudioContextCurrentTimeSupport, testOfflineAudioContextCurrentTimeSupport)).then(isOfflineAudioContextCurrentTimeSupported => {\n        if (!isOfflineAudioContextCurrentTimeSupported) {\n          const scriptProcessorNode = createNativeScriptProcessorNode(nativeOfflineAudioContext, 512, 0, 1);\n\n          nativeOfflineAudioContext.oncomplete = () => {\n            scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation\n\n            scriptProcessorNode.disconnect();\n          };\n\n          scriptProcessorNode.onaudioprocess = () => nativeOfflineAudioContext.currentTime; // tslint:disable-line:deprecation\n\n\n          scriptProcessorNode.connect(nativeOfflineAudioContext.destination);\n        }\n\n        return nativeOfflineAudioContext.startRendering();\n      });\n    }\n\n    return new Promise(resolve => {\n      // Bug #48: Safari does not render an OfflineAudioContext without any connected node.\n      const gainNode = createNativeGainNode(nativeOfflineAudioContext, {\n        channelCount: 1,\n        channelCountMode: 'explicit',\n        channelInterpretation: 'discrete',\n        gain: 0\n      });\n\n      nativeOfflineAudioContext.oncomplete = event => {\n        gainNode.disconnect();\n        resolve(event.renderedBuffer);\n      };\n\n      gainNode.connect(nativeOfflineAudioContext.destination);\n      nativeOfflineAudioContext.startRendering();\n    });\n  };\n};","import { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport const createStartRendering = (audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {\n  const trace = [];\n  return (destination, nativeOfflineAudioContext) => getAudioNodeRenderer(destination).render(destination, nativeOfflineAudioContext, trace)\n  /*\n   * Bug #86 & #87: Invoking the renderer of an AudioWorkletNode might be necessary if it has no direct or indirect connection to the\n   * destination.\n   */\n  .then(() => Promise.all(Array.from(getUnrenderedAudioWorkletNodes(nativeOfflineAudioContext)).map(audioWorkletNode => getAudioNodeRenderer(audioWorkletNode).render(audioWorkletNode, nativeOfflineAudioContext, trace)))).then(() => renderNativeOfflineAudioContext(nativeOfflineAudioContext)).then(audioBuffer => {\n    // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n    // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n    if (typeof audioBuffer.copyFromChannel !== 'function') {\n      wrapAudioBufferCopyChannelMethods(audioBuffer);\n      wrapAudioBufferGetChannelDataMethod(audioBuffer); // Bug #157: Only Chrome & Opera do allow the bufferOffset to be out-of-bounds.\n    } else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n      wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n    }\n\n    audioBufferStore.add(audioBuffer);\n    return audioBuffer;\n  });\n};","const DEFAULT_OPTIONS = {\n  channelCount: 2,\n\n  /*\n   * Bug #105: The channelCountMode should be 'clamped-max' according to the spec but is set to 'explicit' to achieve consistent\n   * behavior.\n   */\n  channelCountMode: 'explicit',\n  channelInterpretation: 'speakers',\n  pan: 0\n};\nexport const createStereoPannerNodeConstructor = (audioNodeConstructor, createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext) => {\n  return class StereoPannerNode extends audioNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeStereoPannerNode = createNativeStereoPannerNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const stereoPannerNodeRenderer = isOffline ? createStereoPannerNodeRenderer() : null;\n      super(context, false, nativeStereoPannerNode, stereoPannerNodeRenderer); // Bug #106: Edge does not export a maxValue and minValue property.\n\n      this._pan = createAudioParam(this, isOffline, nativeStereoPannerNode.pan, 1, -1);\n    }\n\n    get pan() {\n      return this._pan;\n    }\n\n  };\n};","import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createStereoPannerNodeRendererFactory = (connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeStereoPannerNodes = new WeakMap();\n\n    const createStereoPannerNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeStereoPannerNode = getNativeAudioNode(proxy);\n      /*\n       * If the initially used nativeStereoPannerNode was not constructed on the same OfflineAudioContext it needs to be created\n       * again.\n       */\n\n      const nativeStereoPannerNodeIsOwnedByContext = isOwnedByContext(nativeStereoPannerNode, nativeOfflineAudioContext);\n\n      if (!nativeStereoPannerNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeStereoPannerNode.channelCount,\n          channelCountMode: nativeStereoPannerNode.channelCountMode,\n          channelInterpretation: nativeStereoPannerNode.channelInterpretation,\n          pan: nativeStereoPannerNode.pan.value\n        };\n        nativeStereoPannerNode = createNativeStereoPannerNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext, nativeStereoPannerNode);\n\n      if (!nativeStereoPannerNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan, trace);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan, trace);\n      }\n\n      if (isNativeAudioNodeFaker(nativeStereoPannerNode)) {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0], trace);\n      } else {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode, trace);\n      }\n\n      return nativeStereoPannerNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeStereoPannerNode = renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeStereoPannerNode !== undefined) {\n          return Promise.resolve(renderedNativeStereoPannerNode);\n        }\n\n        return createStereoPannerNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","// Bug #33: Edge & Safari expose an AudioBuffer but it can't be used as a constructor.\nexport const createTestAudioBufferConstructorSupport = nativeAudioBufferConstructor => {\n  return () => {\n    if (nativeAudioBufferConstructor === null) {\n      return false;\n    }\n\n    try {\n      new nativeAudioBufferConstructor({\n        length: 1,\n        sampleRate: 44100\n      }); // tslint:disable-line:no-unused-expression\n    } catch {\n      return false;\n    }\n\n    return true;\n  };\n};","/*\n * Firefox up to version 67 didn't fully support the copyFromChannel() and copyToChannel() methods. Therefore testing one of those methods\n * is enough to know if the other one is supported as well.\n */\nexport const createTestAudioBufferCopyChannelMethodsSubarraySupport = nativeOfflineAudioContextConstructor => {\n  return () => {\n    if (nativeOfflineAudioContextConstructor === null) {\n      return false;\n    }\n\n    const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n    const nativeAudioBuffer = nativeOfflineAudioContext.createBuffer(1, 1, 44100); // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n\n    if (nativeAudioBuffer.copyToChannel === undefined) {\n      return true;\n    }\n\n    const source = new Float32Array(2);\n\n    try {\n      nativeAudioBuffer.copyFromChannel(source, 0, 0);\n    } catch {\n      return false;\n    }\n\n    return true;\n  };\n};","export const createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport = createNativeAudioNode => {\n  return nativeContext => {\n    const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createBufferSource());\n    nativeAudioBufferSourceNode.start();\n\n    try {\n      nativeAudioBufferSourceNode.start();\n    } catch {\n      return true;\n    }\n\n    return false;\n  };\n};","// Bug #92: Edge does not respect the duration parameter yet.\nexport const createTestAudioBufferSourceNodeStartMethodDurationParameterSupport = nativeOfflineAudioContextConstructor => {\n  return () => {\n    if (nativeOfflineAudioContextConstructor === null) {\n      return Promise.resolve(false);\n    }\n\n    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n    const audioBuffer = offlineAudioContext.createBuffer(1, 1, offlineAudioContext.sampleRate);\n    const audioBufferSourceNode = offlineAudioContext.createBufferSource();\n    audioBuffer.getChannelData(0)[0] = 1;\n    audioBufferSourceNode.buffer = audioBuffer;\n    audioBufferSourceNode.start(0, 0, 0);\n    audioBufferSourceNode.connect(offlineAudioContext.destination); // Bug #21: Safari does not support promises yet.\n\n    return new Promise(resolve => {\n      offlineAudioContext.oncomplete = ({\n        renderedBuffer\n      }) => {\n        // Bug #5: Safari does not support copyFromChannel().\n        resolve(renderedBuffer.getChannelData(0)[0] === 0);\n      };\n\n      offlineAudioContext.startRendering();\n    });\n  };\n};","export const createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport = createNativeAudioNode => {\n  return nativeContext => {\n    const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createBufferSource());\n    const nativeAudioBuffer = nativeContext.createBuffer(1, 1, 44100);\n    nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;\n\n    try {\n      nativeAudioBufferSourceNode.start(0, 1);\n    } catch {\n      return false;\n    }\n\n    return true;\n  };\n};","export const createTestAudioBufferSourceNodeStopMethodNullifiedBufferSupport = createNativeAudioNode => {\n  return nativeContext => {\n    const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createBufferSource());\n    nativeAudioBufferSourceNode.start();\n\n    try {\n      nativeAudioBufferSourceNode.stop();\n    } catch {\n      return false;\n    }\n\n    return true;\n  };\n};","export const createTestAudioContextCloseMethodSupport = nativeAudioContextConstructor => {\n  return () => {\n    if (nativeAudioContextConstructor === null) {\n      return false;\n    } // Try to check the prototype before constructing the AudioContext.\n\n\n    if (nativeAudioContextConstructor.prototype !== undefined && nativeAudioContextConstructor.prototype.close !== undefined) {\n      return true;\n    }\n\n    const audioContext = new nativeAudioContextConstructor();\n    const isAudioContextClosable = audioContext.close !== undefined;\n\n    try {\n      audioContext.close();\n    } catch {// Ignore errors.\n    }\n\n    return isAudioContextClosable;\n  };\n};","/**\n * Edge up to version 14, Firefox up to version 52, Safari up to version 9 and maybe other browsers\n * did not refuse to decode invalid parameters with a TypeError.\n */\nexport const createTestAudioContextDecodeAudioDataMethodTypeErrorSupport = nativeOfflineAudioContextConstructor => {\n  return () => {\n    if (nativeOfflineAudioContextConstructor === null) {\n      return Promise.resolve(false);\n    }\n\n    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100); // Bug #21: Safari does not support promises yet.\n\n    return new Promise(resolve => {\n      let isPending = true;\n\n      const resolvePromise = err => {\n        if (isPending) {\n          isPending = false;\n          offlineAudioContext.startRendering();\n          resolve(err instanceof TypeError);\n        }\n      };\n\n      let promise; // Bug #26: Safari throws a synchronous error.\n\n      try {\n        promise = offlineAudioContext // Bug #1: Safari requires a successCallback.\n        .decodeAudioData(null, () => {// Ignore the success callback.\n        }, resolvePromise);\n      } catch (err) {\n        resolvePromise(err);\n      } // Bug #21: Safari does not support promises yet.\n\n\n      if (promise !== undefined) {\n        // Bug #6 Chrome does not call the errorCallback\n        promise.catch(resolvePromise);\n      }\n    });\n  };\n};","export const createTestAudioContextOptionsSupport = nativeAudioContextConstructor => {\n  return () => {\n    if (nativeAudioContextConstructor === null) {\n      return false;\n    }\n\n    let audioContext;\n\n    try {\n      audioContext = new nativeAudioContextConstructor({\n        latencyHint: 'balanced'\n      });\n    } catch {\n      return false;\n    }\n\n    audioContext.close();\n    return true;\n  };\n};","// Safari up to version 12.0 (but not v12.1) didn't return the destination in case it was an AudioNode.\nexport const createTestAudioNodeConnectMethodSupport = nativeOfflineAudioContextConstructor => {\n  return () => {\n    if (nativeOfflineAudioContextConstructor === null) {\n      return false;\n    }\n\n    const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n    const nativeGainNode = nativeOfflineAudioContext.createGain();\n    const isSupported = nativeGainNode.connect(nativeGainNode) === nativeGainNode;\n    nativeGainNode.disconnect(nativeGainNode);\n    return isSupported;\n  };\n};","export const createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport = createNativeAudioNode => {\n  return nativeContext => {\n    const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createOscillator());\n\n    try {\n      nativeAudioBufferSourceNode.start(-1);\n    } catch (err) {\n      return err instanceof RangeError;\n    }\n\n    return false;\n  };\n};","export const createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = createNativeAudioNode => {\n  return nativeContext => {\n    const nativeAudioBuffer = nativeContext.createBuffer(1, 1, 44100);\n    const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createBufferSource());\n    nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;\n    nativeAudioBufferSourceNode.start();\n    nativeAudioBufferSourceNode.stop();\n\n    try {\n      nativeAudioBufferSourceNode.stop();\n      return true;\n    } catch {\n      return false;\n    }\n  };\n};","export const createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport = createNativeAudioNode => {\n  return nativeContext => {\n    const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createOscillator());\n\n    try {\n      nativeAudioBufferSourceNode.stop(-1);\n    } catch (err) {\n      return err instanceof RangeError;\n    }\n\n    return false;\n  };\n};","/**\n * Chrome version 66 and 67 did not call the process() function of an AudioWorkletProcessor if it had no outputs. AudioWorklet support was\n * enabled by default in version 66.\n */\nexport const createTestAudioWorkletProcessorNoOutputsSupport = (nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) => {\n  return async () => {\n    // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.\n    if (nativeAudioWorkletNodeConstructor === null) {\n      return true;\n    }\n\n    if (nativeOfflineAudioContextConstructor === null) {\n      return false;\n    }\n\n    const blob = new Blob(['class A extends AudioWorkletProcessor{process(){this.port.postMessage(0)}}registerProcessor(\"a\",A)'], {\n      type: 'application/javascript; charset=utf-8'\n    });\n    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 3200);\n    const url = URL.createObjectURL(blob);\n    let isCallingProcess = false;\n\n    try {\n      await offlineAudioContext.audioWorklet.addModule(url);\n      const gainNode = offlineAudioContext.createGain();\n      const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', {\n        numberOfOutputs: 0\n      });\n\n      audioWorkletNode.port.onmessage = () => isCallingProcess = true;\n\n      gainNode.connect(audioWorkletNode);\n      await offlineAudioContext.startRendering();\n    } catch {// Ignore errors.\n    } finally {\n      URL.revokeObjectURL(url);\n    }\n\n    return isCallingProcess;\n  };\n};","/**\n * Firefox up to version 69 did not throw an error when setting a different channelCount or channelCountMode.\n */\nexport const createTestChannelMergerNodeChannelCountSupport = (createNativeAudioNode, nativeOfflineAudioContextConstructor) => {\n  return () => {\n    if (nativeOfflineAudioContextConstructor === null) {\n      return false;\n    }\n\n    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n    const nativeChannelMergerNode = createNativeAudioNode(offlineAudioContext, ntvCntxt => ntvCntxt.createChannelMerger());\n\n    try {\n      nativeChannelMergerNode.channelCount = 2;\n    } catch {\n      return true;\n    }\n\n    return false;\n  };\n};","export const createTestConstantSourceNodeAccurateSchedulingSupport = (createNativeAudioNode, nativeOfflineAudioContextConstructor) => {\n  return () => {\n    if (nativeOfflineAudioContextConstructor === null) {\n      return false;\n    }\n\n    const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100); // Bug #62: Edge & Safari do not support ConstantSourceNodes.\n\n    if (nativeOfflineAudioContext.createConstantSource === undefined) {\n      return true;\n    }\n\n    const nativeConstantSourceNode = createNativeAudioNode(nativeOfflineAudioContext, ntvCntxt => ntvCntxt.createConstantSource());\n    /*\n     * @todo This is using bug #75 to detect bug #70. That works because both bugs were unique to\n     * the implementation of Firefox right now, but it could probably be done in a better way.\n     */\n\n    return nativeConstantSourceNode.offset.maxValue !== Number.POSITIVE_INFINITY;\n  };\n};","// Opera up to version 57 did not allow to reassign the buffer of a ConvolverNode.\nexport const createTestConvolverNodeBufferReassignabilitySupport = nativeOfflineAudioContextConstructor => {\n  return () => {\n    if (nativeOfflineAudioContextConstructor === null) {\n      return false;\n    }\n\n    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n    const nativeConvolverNode = offlineAudioContext.createConvolver();\n    nativeConvolverNode.buffer = offlineAudioContext.createBuffer(1, 1, offlineAudioContext.sampleRate);\n\n    try {\n      nativeConvolverNode.buffer = offlineAudioContext.createBuffer(1, 1, offlineAudioContext.sampleRate);\n    } catch {\n      return false;\n    }\n\n    return true;\n  };\n};","export const createTestIsSecureContextSupport = window => {\n  return () => window !== null && window.hasOwnProperty('isSecureContext');\n};","// Firefox up to version 68 did not throw an error when creating a MediaStreamAudioSourceNode with a mediaStream that had no audio track.\nexport const createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport = nativeAudioContextConstructor => {\n  return () => {\n    if (nativeAudioContextConstructor === null) {\n      return false;\n    }\n\n    const audioContext = new nativeAudioContextConstructor();\n\n    try {\n      audioContext.createMediaStreamSource(new MediaStream());\n      return false;\n    } catch (err) {\n      return true;\n    }\n  };\n};","export const createTestOfflineAudioContextCurrentTimeSupport = (createNativeGainNode, nativeOfflineAudioContextConstructor) => {\n  return () => {\n    if (nativeOfflineAudioContextConstructor === null) {\n      return Promise.resolve(false);\n    }\n\n    const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100); // Bug #48: Safari does not render an OfflineAudioContext without any connected node.\n\n    const gainNode = createNativeGainNode(nativeOfflineAudioContext, {\n      channelCount: 1,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete',\n      gain: 0\n    }); // Bug #21: Safari does not support promises yet.\n\n    return new Promise(resolve => {\n      nativeOfflineAudioContext.oncomplete = () => {\n        gainNode.disconnect();\n        resolve(nativeOfflineAudioContext.currentTime !== 0);\n      };\n\n      nativeOfflineAudioContext.startRendering();\n    });\n  };\n};","/**\n * Firefox up to version 62 did not kick off the processing of the StereoPannerNode if the value of pan was zero.\n */\nexport const createTestStereoPannerNodeDefaultValueSupport = nativeOfflineAudioContextConstructor => {\n  return () => {\n    if (nativeOfflineAudioContextConstructor === null) {\n      return Promise.resolve(false);\n    }\n\n    const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n    /*\n     * Bug #105: Safari does not support the StereoPannerNode. Therefore the returned value should normally be false but the faker does\n     * support the tested behaviour.\n     */\n\n    if (nativeOfflineAudioContext.createStereoPanner === undefined) {\n      return Promise.resolve(true);\n    } // Bug #62: Edge & Safari do not support ConstantSourceNodes.\n\n\n    if (nativeOfflineAudioContext.createConstantSource === undefined) {\n      return Promise.resolve(true);\n    }\n\n    const constantSourceNode = nativeOfflineAudioContext.createConstantSource();\n    const stereoPanner = nativeOfflineAudioContext.createStereoPanner();\n    constantSourceNode.channelCount = 1;\n    constantSourceNode.offset.value = 1;\n    stereoPanner.channelCount = 1;\n    constantSourceNode.start();\n    constantSourceNode.connect(stereoPanner).connect(nativeOfflineAudioContext.destination);\n    return nativeOfflineAudioContext.startRendering().then(buffer => buffer.getChannelData(0)[0] !== 1);\n  };\n};","const DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  curve: null,\n  oversample: 'none'\n};\nexport const createWaveShaperNodeConstructor = (audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext) => {\n  return class WaveShaperNode extends audioNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeWaveShaperNode = createNativeWaveShaperNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const waveShaperNodeRenderer = isOffline ? createWaveShaperNodeRenderer() : null; // @todo Add a mechanism to only switch a WaveShaperNode to active while it is connected.\n\n      super(context, true, nativeWaveShaperNode, waveShaperNodeRenderer);\n      this._isCurveNullified = false;\n      this._nativeWaveShaperNode = nativeWaveShaperNode;\n    }\n\n    get curve() {\n      if (this._isCurveNullified) {\n        return null;\n      }\n\n      return this._nativeWaveShaperNode.curve;\n    }\n\n    set curve(value) {\n      // Bug #103: Safari does not allow to set the curve to null.\n      if (value === null) {\n        this._isCurveNullified = true;\n        this._nativeWaveShaperNode.curve = new Float32Array([0, 0]);\n      } else {\n        // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n        // Bug #104: Chrome will throw an InvalidAccessError when the curve has less than two samples.\n        if (value.length < 2) {\n          throw createInvalidStateError();\n        }\n\n        this._isCurveNullified = false;\n        this._nativeWaveShaperNode.curve = value;\n      }\n    }\n\n    get oversample() {\n      return this._nativeWaveShaperNode.oversample;\n    }\n\n    set oversample(value) {\n      this._nativeWaveShaperNode.oversample = value;\n    }\n\n  };\n};","import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createWaveShaperNodeRendererFactory = (createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeWaveShaperNodes = new WeakMap();\n\n    const createWaveShaperNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeWaveShaperNode = getNativeAudioNode(proxy); // If the initially used nativeWaveShaperNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeWaveShaperNodeIsOwnedByContext = isOwnedByContext(nativeWaveShaperNode, nativeOfflineAudioContext);\n\n      if (!nativeWaveShaperNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeWaveShaperNode.channelCount,\n          channelCountMode: nativeWaveShaperNode.channelCountMode,\n          channelInterpretation: nativeWaveShaperNode.channelInterpretation,\n          curve: nativeWaveShaperNode.curve,\n          oversample: nativeWaveShaperNode.oversample\n        };\n        nativeWaveShaperNode = createNativeWaveShaperNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeWaveShaperNodes.set(nativeOfflineAudioContext, nativeWaveShaperNode);\n\n      if (isNativeAudioNodeFaker(nativeWaveShaperNode)) {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode.inputs[0], trace);\n      } else {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode, trace);\n      }\n\n      return nativeWaveShaperNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeWaveShaperNode = renderedNativeWaveShaperNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeWaveShaperNode !== undefined) {\n          return Promise.resolve(renderedNativeWaveShaperNode);\n        }\n\n        return createWaveShaperNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","export const createWindow = () => typeof window === 'undefined' ? null : window;","export const createWrapAudioBufferCopyChannelMethods = (convertNumberToUnsignedLong, createIndexSizeError) => {\n  return audioBuffer => {\n    audioBuffer.copyFromChannel = (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n      const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n      const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n\n      if (channelNumber >= audioBuffer.numberOfChannels) {\n        throw createIndexSizeError();\n      }\n\n      const audioBufferLength = audioBuffer.length;\n      const channelData = audioBuffer.getChannelData(channelNumber);\n      const destinationLength = destination.length;\n\n      for (let i = bufferOffset < 0 ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < destinationLength; i += 1) {\n        destination[i] = channelData[i + bufferOffset];\n      }\n    };\n\n    audioBuffer.copyToChannel = (source, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n      const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n      const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n\n      if (channelNumber >= audioBuffer.numberOfChannels) {\n        throw createIndexSizeError();\n      }\n\n      const audioBufferLength = audioBuffer.length;\n      const channelData = audioBuffer.getChannelData(channelNumber);\n      const sourceLength = source.length;\n\n      for (let i = bufferOffset < 0 ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < sourceLength; i += 1) {\n        channelData[i + bufferOffset] = source[i];\n      }\n    };\n  };\n};","export const createWrapAudioBufferCopyChannelMethodsOutOfBounds = convertNumberToUnsignedLong => {\n  return audioBuffer => {\n    audioBuffer.copyFromChannel = (copyFromChannel => {\n      return (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n        const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n        const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n\n        if (bufferOffset < audioBuffer.length) {\n          return copyFromChannel.call(audioBuffer, destination, channelNumber, bufferOffset);\n        }\n      };\n    })(audioBuffer.copyFromChannel);\n\n    audioBuffer.copyToChannel = (copyToChannel => {\n      return (source, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n        const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n        const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n\n        if (bufferOffset < audioBuffer.length) {\n          return copyToChannel.call(audioBuffer, source, channelNumber, bufferOffset);\n        }\n      };\n    })(audioBuffer.copyToChannel);\n  };\n};","export const createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer = overwriteAccessors => {\n  return (nativeAudioBufferSourceNode, nativeContext) => {\n    const nullifiedBuffer = nativeContext.createBuffer(1, 1, nativeContext.sampleRate);\n\n    if (nativeAudioBufferSourceNode.buffer === null) {\n      nativeAudioBufferSourceNode.buffer = nullifiedBuffer;\n    }\n\n    overwriteAccessors(nativeAudioBufferSourceNode, 'buffer', get => () => {\n      const value = get.call(nativeAudioBufferSourceNode);\n      return value === nullifiedBuffer ? null : value;\n    }, set => value => {\n      return set.call(nativeAudioBufferSourceNode, value === null ? nullifiedBuffer : value);\n    });\n  };\n};","import { interceptConnections } from '../helpers/intercept-connections';\nexport const createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = createNativeAudioNode => {\n  return (nativeAudioScheduledSourceNode, nativeContext) => {\n    const nativeGainNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createGain());\n    nativeAudioScheduledSourceNode.connect(nativeGainNode);\n\n    const disconnectGainNode = (disconnect => {\n      return () => {\n        // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.\n        disconnect.call(nativeAudioScheduledSourceNode, nativeGainNode);\n        nativeAudioScheduledSourceNode.removeEventListener('ended', disconnectGainNode);\n      };\n    })(nativeAudioScheduledSourceNode.disconnect);\n\n    nativeAudioScheduledSourceNode.addEventListener('ended', disconnectGainNode);\n    interceptConnections(nativeAudioScheduledSourceNode, nativeGainNode);\n\n    nativeAudioScheduledSourceNode.stop = (stop => {\n      let isStopped = false;\n      return (when = 0) => {\n        if (isStopped) {\n          try {\n            stop.call(nativeAudioScheduledSourceNode, when);\n          } catch {\n            nativeGainNode.gain.setValueAtTime(0, when);\n          }\n        } else {\n          stop.call(nativeAudioScheduledSourceNode, when);\n          isStopped = true;\n        }\n      };\n    })(nativeAudioScheduledSourceNode.stop);\n  };\n};","export const createWrapChannelMergerNode = (createInvalidStateError, createNativeAudioNode, monitorConnectionsFunction) => {\n  return (nativeContext, channelMergerNode) => {\n    channelMergerNode.channelCount = 1;\n    channelMergerNode.channelCountMode = 'explicit';\n    Object.defineProperty(channelMergerNode, 'channelCount', {\n      get: () => 1,\n      set: () => {\n        throw createInvalidStateError();\n      }\n    });\n    Object.defineProperty(channelMergerNode, 'channelCountMode', {\n      get: () => 'explicit',\n      set: () => {\n        throw createInvalidStateError();\n      }\n    }); // Bug #20: Safari requires a connection of any kind to treat the input signal correctly.\n\n    const audioBufferSourceNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createBufferSource());\n\n    const whenConnected = () => {\n      const length = channelMergerNode.numberOfInputs;\n\n      for (let i = 0; i < length; i += 1) {\n        audioBufferSourceNode.connect(channelMergerNode, 0, i);\n      }\n    };\n\n    const whenDisconnected = () => audioBufferSourceNode.disconnect(channelMergerNode);\n\n    monitorConnectionsFunction(channelMergerNode, whenConnected, whenDisconnected);\n  };\n};","// Safari at version 11 did not support transferables.\nexport const testTransferablesSupport = () => new Promise(resolve => {\n  const arrayBuffer = new ArrayBuffer(0);\n  const {\n    port1,\n    port2\n  } = new MessageChannel();\n\n  port1.onmessage = ({\n    data\n  }) => resolve(data !== null);\n\n  port2.postMessage(arrayBuffer, [arrayBuffer]);\n});","export const wrapAudioBufferSourceNodeStartMethodOffsetClamping = nativeAudioBufferSourceNode => {\n  nativeAudioBufferSourceNode.start = (start => {\n    return (when = 0, offset = 0, duration) => {\n      const buffer = nativeAudioBufferSourceNode.buffer; // Bug #154: Safari does not clamp the offset if it is equal to or greater than the duration of the buffer.\n\n      const clampedOffset = buffer === null ? offset : Math.min(buffer.duration, offset); // Bug #155: Safari does not handle the offset correctly if it would cause the buffer to be not be played at all.\n\n      if (buffer !== null && clampedOffset > buffer.duration - 0.5 / nativeAudioBufferSourceNode.context.sampleRate) {\n        start.call(nativeAudioBufferSourceNode, when, 0, 0);\n      } else {\n        start.call(nativeAudioBufferSourceNode, when, clampedOffset, duration);\n      }\n    };\n  })(nativeAudioBufferSourceNode.start);\n};","export const isAudioWorkletNode = audioNode => {\n  return 'port' in audioNode;\n};","import { getEventListenersOfAudioNode } from './get-event-listeners-of-audio-node';\nexport const deleteEventListenerOfAudioNode = (audioNode, eventListener) => {\n  const eventListeners = getEventListenersOfAudioNode(audioNode);\n\n  if (!eventListeners.delete(eventListener)) {\n    throw new Error('Missing the expected event listener.');\n  }\n};","import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nexport const isPassiveAudioNode = audioNode => {\n  return !ACTIVE_AUDIO_NODE_STORE.has(audioNode);\n};","export const pickElementFromSet = (set, predicate) => {\n  const matchingElements = Array.from(set).filter(predicate);\n\n  if (matchingElements.length > 1) {\n    throw Error('More than one element was found.');\n  }\n\n  if (matchingElements.length === 0) {\n    throw Error('No element was found.');\n  }\n\n  const [matchingElement] = matchingElements;\n  set.delete(matchingElement);\n  return matchingElement;\n};","import { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { setInternalStateToPassive } from './set-internal-state-to-passive'; // Set the internalState of the audioNode to 'passive' if it is not an AudioWorkletNode and if it has no 'active' input connections.\n\nexport const setInternalStateToPassiveWhenNecessary = (audioNode, activeInputs) => {\n  if (!isAudioWorkletNode(audioNode) && activeInputs.every(connections => connections.size === 0)) {\n    setInternalStateToPassive(audioNode);\n  }\n};","export const testAudioNodeDisconnectMethodSupport = nativeAudioContext => {\n  return new Promise(resolve => {\n    const analyzer = nativeAudioContext.createScriptProcessor(256, 1, 1);\n    const dummy = nativeAudioContext.createGain(); // Bug #95: Safari does not play one sample buffers.\n\n    const ones = nativeAudioContext.createBuffer(1, 2, 44100);\n    const channelData = ones.getChannelData(0);\n    channelData[0] = 1;\n    channelData[1] = 1;\n    const source = nativeAudioContext.createBufferSource();\n    source.buffer = ones;\n    source.loop = true;\n    source.connect(analyzer).connect(nativeAudioContext.destination);\n    source.connect(dummy);\n    source.disconnect(dummy);\n\n    analyzer.onaudioprocess = event => {\n      const chnnlDt = event.inputBuffer.getChannelData(0);\n\n      if (Array.prototype.some.call(chnnlDt, sample => sample === 1)) {\n        resolve(true);\n      } else {\n        resolve(false);\n      }\n\n      source.stop();\n      analyzer.onaudioprocess = null; // tslint:disable-line:deprecation\n\n      source.disconnect(analyzer);\n      analyzer.disconnect(nativeAudioContext.destination);\n    };\n\n    source.start();\n  });\n};","export const visitEachAudioNodeOnce = (cycles, visitor) => {\n  const counts = new Map();\n\n  for (const cycle of cycles) {\n    for (const audioNode of cycle) {\n      const count = counts.get(audioNode);\n      counts.set(audioNode, count === undefined ? 1 : count + 1);\n    }\n  }\n\n  counts.forEach((count, audioNode) => visitor(audioNode, count));\n};","import { isNativeAudioNode } from '../guards/native-audio-node';\nexport const wrapAudioNodeDisconnectMethod = nativeAudioNode => {\n  const connections = new Map();\n\n  nativeAudioNode.connect = (connect => {\n    return (destination, output = 0, input = 0) => {\n      const returnValue = isNativeAudioNode(destination) ? connect(destination, output, input) : connect(destination, output); // Save the new connection only if the calls to connect above didn't throw an error.\n\n      const connectionsToDestination = connections.get(destination);\n\n      if (connectionsToDestination === undefined) {\n        connections.set(destination, [{\n          input,\n          output\n        }]);\n      } else {\n        if (connectionsToDestination.every(connection => connection.input !== input || connection.output !== output)) {\n          connectionsToDestination.push({\n            input,\n            output\n          });\n        }\n      }\n\n      return returnValue;\n    };\n  })(nativeAudioNode.connect.bind(nativeAudioNode));\n\n  nativeAudioNode.disconnect = (disconnect => {\n    return (destinationOrOutput, output, input) => {\n      disconnect.apply(nativeAudioNode);\n\n      if (destinationOrOutput === undefined) {\n        connections.clear();\n      } else if (typeof destinationOrOutput === 'number') {\n        for (const [destination, connectionsToDestination] of connections) {\n          const filteredConnections = connectionsToDestination.filter(connection => connection.output !== destinationOrOutput);\n\n          if (filteredConnections.length === 0) {\n            connections.delete(destination);\n          } else {\n            connections.set(destination, filteredConnections);\n          }\n        }\n      } else if (connections.has(destinationOrOutput)) {\n        if (output === undefined) {\n          connections.delete(destinationOrOutput);\n        } else {\n          const connectionsToDestination = connections.get(destinationOrOutput);\n\n          if (connectionsToDestination !== undefined) {\n            const filteredConnections = connectionsToDestination.filter(connection => connection.output !== output && (connection.input !== input || input === undefined));\n\n            if (filteredConnections.length === 0) {\n              connections.delete(destinationOrOutput);\n            } else {\n              connections.set(destinationOrOutput, filteredConnections);\n            }\n          }\n        }\n      }\n\n      for (const [destination, connectionsToDestination] of connections) {\n        connectionsToDestination.forEach(connection => {\n          if (isNativeAudioNode(destination)) {\n            nativeAudioNode.connect(destination, connection.output, connection.input);\n          } else {\n            nativeAudioNode.connect(destination, connection.output);\n          }\n        });\n      }\n    };\n  })(nativeAudioNode.disconnect);\n};","import { AUDIO_NODE_STORE, EVENT_LISTENERS } from '../globals';\nimport { isAudioNode } from '../guards/audio-node';\nimport { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nimport { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { connectNativeAudioNodeToNativeAudioNode } from '../helpers/connect-native-audio-node-to-native-audio-node';\nimport { deleteEventListenerOfAudioNode } from '../helpers/delete-event-listeners-of-audio-node';\nimport { disconnectNativeAudioNodeFromNativeAudioNode } from '../helpers/disconnect-native-audio-node-from-native-audio-node';\nimport { getAudioNodeConnections } from '../helpers/get-audio-node-connections';\nimport { getAudioParamConnections } from '../helpers/get-audio-param-connections';\nimport { getEventListenersOfAudioNode } from '../helpers/get-event-listeners-of-audio-node';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { getNativeAudioParam } from '../helpers/get-native-audio-param';\nimport { getValueForKey } from '../helpers/get-value-for-key';\nimport { insertElementInSet } from '../helpers/insert-element-in-set';\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { isPartOfACycle } from '../helpers/is-part-of-a-cycle';\nimport { isPassiveAudioNode } from '../helpers/is-passive-audio-node';\nimport { pickElementFromSet } from '../helpers/pick-element-from-set';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassiveWhenNecessary } from '../helpers/set-internal-state-to-passive-when-necessary';\nimport { testAudioNodeDisconnectMethodSupport } from '../helpers/test-audio-node-disconnect-method-support';\nimport { visitEachAudioNodeOnce } from '../helpers/visit-each-audio-node-once';\nimport { wrapAudioNodeDisconnectMethod } from '../helpers/wrap-audio-node-disconnect-method';\n\nconst addActiveInputConnectionToAudioNode = (activeInputs, source, [output, input, eventListener], ignoreDuplicates) => {\n  insertElementInSet(activeInputs[input], [source, output, eventListener], activeInputConnection => activeInputConnection[0] === source && activeInputConnection[1] === output, ignoreDuplicates);\n};\n\nconst addActiveInputConnectionToAudioParam = (activeInputs, source, [output, eventListener], ignoreDuplicates) => {\n  insertElementInSet(activeInputs, [source, output, eventListener], activeInputConnection => activeInputConnection[0] === source && activeInputConnection[1] === output, ignoreDuplicates);\n};\n\nconst deleteActiveInputConnectionToAudioNode = (activeInputs, source, output, input) => {\n  return pickElementFromSet(activeInputs[input], activeInputConnection => activeInputConnection[0] === source && activeInputConnection[1] === output);\n};\n\nconst deleteActiveInputConnectionToAudioParam = (activeInputs, source, output) => {\n  return pickElementFromSet(activeInputs, activeInputConnection => activeInputConnection[0] === source && activeInputConnection[1] === output);\n};\n\nconst addPassiveInputConnectionToAudioNode = (passiveInputs, input, [source, output, eventListener], ignoreDuplicates) => {\n  const passiveInputConnections = passiveInputs.get(source);\n\n  if (passiveInputConnections === undefined) {\n    passiveInputs.set(source, new Set([[output, input, eventListener]]));\n  } else {\n    insertElementInSet(passiveInputConnections, [output, input, eventListener], passiveInputConnection => passiveInputConnection[0] === output && passiveInputConnection[1] === input, ignoreDuplicates);\n  }\n};\n\nconst addPassiveInputConnectionToAudioParam = (passiveInputs, [source, output, eventListener], ignoreDuplicates) => {\n  const passiveInputConnections = passiveInputs.get(source);\n\n  if (passiveInputConnections === undefined) {\n    passiveInputs.set(source, new Set([[output, eventListener]]));\n  } else {\n    insertElementInSet(passiveInputConnections, [output, eventListener], passiveInputConnection => passiveInputConnection[0] === output, ignoreDuplicates);\n  }\n};\n\nconst deletePassiveInputConnectionToAudioNode = (passiveInputs, source, output, input) => {\n  const passiveInputConnections = getValueForKey(passiveInputs, source);\n  const matchingConnection = pickElementFromSet(passiveInputConnections, passiveInputConnection => passiveInputConnection[0] === output && passiveInputConnection[1] === input);\n\n  if (passiveInputConnections.size === 0) {\n    passiveInputs.delete(source);\n  }\n\n  return matchingConnection;\n};\n\nconst deletePassiveInputConnectionToAudioParam = (passiveInputs, source, output) => {\n  const passiveInputConnections = getValueForKey(passiveInputs, source);\n  const matchingConnection = pickElementFromSet(passiveInputConnections, passiveInputConnection => passiveInputConnection[0] === output);\n\n  if (passiveInputConnections.size === 0) {\n    passiveInputs.delete(source);\n  }\n\n  return matchingConnection;\n};\n\nconst addConnectionToAudioNodeOfAudioContext = (source, destination, output, input) => {\n  const {\n    activeInputs,\n    passiveInputs\n  } = getAudioNodeConnections(destination);\n  const {\n    outputs\n  } = getAudioNodeConnections(source);\n  const eventListeners = getEventListenersOfAudioNode(source);\n\n  const eventListener = isActive => {\n    const nativeDestinationAudioNode = getNativeAudioNode(destination);\n    const nativeSourceAudioNode = getNativeAudioNode(source);\n\n    if (isActive) {\n      const partialConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n      addActiveInputConnectionToAudioNode(activeInputs, source, partialConnection, false);\n\n      if (!isPartOfACycle(source)) {\n        connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n      }\n\n      if (isPassiveAudioNode(destination)) {\n        setInternalStateToActive(destination);\n      }\n    } else {\n      const partialConnection = deleteActiveInputConnectionToAudioNode(activeInputs, source, output, input);\n      addPassiveInputConnectionToAudioNode(passiveInputs, input, partialConnection, false);\n\n      if (!isPartOfACycle(source)) {\n        disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n      }\n\n      if (isActiveAudioNode(destination)) {\n        setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n      }\n    }\n  };\n\n  if (insertElementInSet(outputs, [destination, output, input], outputConnection => outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input, true)) {\n    eventListeners.add(eventListener);\n\n    if (isActiveAudioNode(source)) {\n      addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, eventListener], true);\n    } else {\n      addPassiveInputConnectionToAudioNode(passiveInputs, input, [source, output, eventListener], true);\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nconst addConnectionToAudioNodeOfOfflineAudioContext = (source, destination, output, input) => {\n  const {\n    outputs\n  } = getAudioNodeConnections(source);\n\n  if (insertElementInSet(outputs, [destination, output, input], outputConnection => outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input, true)) {\n    const {\n      activeInputs\n    } = getAudioNodeConnections(destination);\n    addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, null], true);\n    return true;\n  }\n\n  return false;\n};\n\nconst addConnectionToAudioParamOfAudioContext = (source, destination, output) => {\n  const {\n    activeInputs,\n    passiveInputs\n  } = getAudioParamConnections(destination);\n  const {\n    outputs\n  } = getAudioNodeConnections(source);\n  const eventListeners = getEventListenersOfAudioNode(source);\n\n  const eventListener = isActive => {\n    const nativeAudioNode = getNativeAudioNode(source);\n    const nativeAudioParam = getNativeAudioParam(destination);\n\n    if (isActive) {\n      const partialConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);\n      addActiveInputConnectionToAudioParam(activeInputs, source, partialConnection, false);\n\n      if (!isPartOfACycle(source)) {\n        nativeAudioNode.connect(nativeAudioParam, output);\n      }\n    } else {\n      const partialConnection = deleteActiveInputConnectionToAudioParam(activeInputs, source, output);\n      addPassiveInputConnectionToAudioParam(passiveInputs, partialConnection, false);\n\n      if (!isPartOfACycle(source)) {\n        nativeAudioNode.disconnect(nativeAudioParam, output);\n      }\n    }\n  };\n\n  if (insertElementInSet(outputs, [destination, output], outputConnection => outputConnection[0] === destination && outputConnection[1] === output, true)) {\n    eventListeners.add(eventListener);\n\n    if (isActiveAudioNode(source)) {\n      addActiveInputConnectionToAudioParam(activeInputs, source, [output, eventListener], true);\n    } else {\n      addPassiveInputConnectionToAudioParam(passiveInputs, [source, output, eventListener], true);\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nconst addConnectionToAudioParamOfOfflineAudioContext = (source, destination, output) => {\n  const {\n    outputs\n  } = getAudioNodeConnections(source);\n\n  if (insertElementInSet(outputs, [destination, output], outputConnection => outputConnection[0] === destination && outputConnection[1] === output, true)) {\n    const {\n      activeInputs\n    } = getAudioParamConnections(destination);\n    addActiveInputConnectionToAudioParam(activeInputs, source, [output, null], true);\n    return true;\n  }\n\n  return false;\n};\n\nconst deleteActiveInputConnection = (activeInputConnections, source, output) => {\n  for (const activeInputConnection of activeInputConnections) {\n    if (activeInputConnection[0] === source && activeInputConnection[1] === output) {\n      activeInputConnections.delete(activeInputConnection);\n      return activeInputConnection;\n    }\n  }\n\n  return null;\n};\n\nconst deleteInputConnectionOfAudioNode = (source, destination, output, input) => {\n  const {\n    activeInputs,\n    passiveInputs\n  } = getAudioNodeConnections(destination);\n  const activeInputConnection = deleteActiveInputConnection(activeInputs[input], source, output);\n\n  if (activeInputConnection === null) {\n    const passiveInputConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n    return [passiveInputConnection[2], false];\n  }\n\n  return [activeInputConnection[2], true];\n};\n\nconst deleteInputConnectionOfAudioParam = (source, destination, output) => {\n  const {\n    activeInputs,\n    passiveInputs\n  } = getAudioParamConnections(destination);\n  const activeInputConnection = deleteActiveInputConnection(activeInputs, source, output);\n\n  if (activeInputConnection === null) {\n    const passiveInputConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);\n    return [passiveInputConnection[1], false];\n  }\n\n  return [activeInputConnection[2], true];\n};\n\nconst deleteInputsOfAudioNode = (source, destination, output, input) => {\n  const [listener, isActive] = deleteInputConnectionOfAudioNode(source, destination, output, input);\n\n  if (listener !== null) {\n    deleteEventListenerOfAudioNode(source, listener);\n\n    if (isActive && !isPartOfACycle(source)) {\n      disconnectNativeAudioNodeFromNativeAudioNode(getNativeAudioNode(source), getNativeAudioNode(destination), output, input);\n    }\n  }\n\n  if (isActiveAudioNode(destination)) {\n    const {\n      activeInputs\n    } = getAudioNodeConnections(destination);\n    setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n  }\n};\n\nconst deleteInputsOfAudioParam = (source, destination, output) => {\n  const [listener, isActive] = deleteInputConnectionOfAudioParam(source, destination, output);\n\n  if (listener !== null) {\n    deleteEventListenerOfAudioNode(source, listener);\n\n    if (isActive && !isPartOfACycle(source)) {\n      getNativeAudioNode(source).disconnect(getNativeAudioParam(destination), output);\n    }\n  }\n};\n\nconst deleteAnyConnection = source => {\n  const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n  const destinations = [];\n\n  for (const outputConnection of audioNodeConnectionsOfSource.outputs) {\n    if (isAudioNodeOutputConnection(outputConnection)) {\n      deleteInputsOfAudioNode(source, ...outputConnection);\n    } else {\n      deleteInputsOfAudioParam(source, ...outputConnection);\n    }\n\n    destinations.push(outputConnection[0]);\n  }\n\n  audioNodeConnectionsOfSource.outputs.clear();\n  return destinations;\n};\n\nconst deleteConnectionAtOutput = (source, output) => {\n  const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n  const destinations = [];\n\n  for (const outputConnection of audioNodeConnectionsOfSource.outputs) {\n    if (outputConnection[1] === output) {\n      if (isAudioNodeOutputConnection(outputConnection)) {\n        deleteInputsOfAudioNode(source, ...outputConnection);\n      } else {\n        deleteInputsOfAudioParam(source, ...outputConnection);\n      }\n\n      destinations.push(outputConnection[0]);\n      audioNodeConnectionsOfSource.outputs.delete(outputConnection);\n    }\n  }\n\n  return destinations;\n};\n\nconst deleteConnectionToDestination = (source, destination, output, input) => {\n  const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n  return Array.from(audioNodeConnectionsOfSource.outputs).filter(outputConnection => outputConnection[0] === destination && (output === undefined || outputConnection[1] === output) && (input === undefined || outputConnection[2] === input)).map(outputConnection => {\n    if (isAudioNodeOutputConnection(outputConnection)) {\n      deleteInputsOfAudioNode(source, ...outputConnection);\n    } else {\n      deleteInputsOfAudioParam(source, ...outputConnection);\n    }\n\n    audioNodeConnectionsOfSource.outputs.delete(outputConnection);\n    return outputConnection[0];\n  });\n};\n\nexport const createAudioNodeConstructor = (addAudioNodeConnections, auxiliaryGainNodeStore, cacheTestResult, createIncrementCycleCounter, createIndexSizeError, createInvalidAccessError, createNotSupportedError, decrementCycleCounter, detectCycles, eventTargetConstructor, getNativeContext, isNativeAudioContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext) => {\n  return class AudioNode extends eventTargetConstructor {\n    constructor(context, isActive, nativeAudioNode, audioNodeRenderer) {\n      super(nativeAudioNode);\n      this._context = context;\n      this._nativeAudioNode = nativeAudioNode;\n      const nativeContext = getNativeContext(context); // Bug #12: Safari does not support to disconnect a specific destination.\n\n      if (isNativeAudioContext(nativeContext) && true !== cacheTestResult(testAudioNodeDisconnectMethodSupport, () => {\n        return testAudioNodeDisconnectMethodSupport(nativeContext);\n      })) {\n        wrapAudioNodeDisconnectMethod(nativeAudioNode);\n      }\n\n      AUDIO_NODE_STORE.set(this, nativeAudioNode);\n      EVENT_LISTENERS.set(this, new Set());\n\n      if (isActive) {\n        setInternalStateToActive(this);\n      }\n\n      addAudioNodeConnections(this, audioNodeRenderer, nativeAudioNode);\n    }\n\n    get channelCount() {\n      return this._nativeAudioNode.channelCount;\n    }\n\n    set channelCount(value) {\n      this._nativeAudioNode.channelCount = value;\n    }\n\n    get channelCountMode() {\n      return this._nativeAudioNode.channelCountMode;\n    }\n\n    set channelCountMode(value) {\n      this._nativeAudioNode.channelCountMode = value;\n    }\n\n    get channelInterpretation() {\n      return this._nativeAudioNode.channelInterpretation;\n    }\n\n    set channelInterpretation(value) {\n      this._nativeAudioNode.channelInterpretation = value;\n    }\n\n    get context() {\n      return this._context;\n    }\n\n    get numberOfInputs() {\n      return this._nativeAudioNode.numberOfInputs;\n    }\n\n    get numberOfOutputs() {\n      return this._nativeAudioNode.numberOfOutputs;\n    }\n\n    connect(destination, output = 0, input = 0) {\n      // Bug #174: Safari does expose a wrong numberOfOutputs for MediaStreamAudioDestinationNodes.\n      if (output < 0 || output >= this._nativeAudioNode.numberOfOutputs) {\n        throw createIndexSizeError();\n      }\n\n      const nativeContext = getNativeContext(this._context);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n\n      if (isNativeAudioNode(destination) || isNativeAudioParam(destination)) {\n        throw createInvalidAccessError();\n      }\n\n      if (isAudioNode(destination)) {\n        const nativeDestinationAudioNode = getNativeAudioNode(destination);\n\n        try {\n          const connection = connectNativeAudioNodeToNativeAudioNode(this._nativeAudioNode, nativeDestinationAudioNode, output, input);\n\n          if (isOffline || isPassiveAudioNode(this)) {\n            this._nativeAudioNode.disconnect(...connection);\n          } else if (isPassiveAudioNode(destination)) {\n            setInternalStateToActive(destination);\n          } // An AudioWorklet needs a connection because it otherwise may truncate the input array.\n          // @todo Count the number of connections which depend on this auxiliary GainNode to know when it can be removed again.\n\n\n          if (isAudioWorkletNode(destination)) {\n            const auxiliaryGainNodes = auxiliaryGainNodeStore.get(nativeDestinationAudioNode);\n\n            if (auxiliaryGainNodes === undefined) {\n              const nativeGainNode = nativeContext.createGain();\n              nativeGainNode.connect(connection[0], 0, connection[2]);\n              auxiliaryGainNodeStore.set(nativeDestinationAudioNode, new Map([[input, nativeGainNode]]));\n            } else if (auxiliaryGainNodes.get(input) === undefined) {\n              const nativeGainNode = nativeContext.createGain();\n              nativeGainNode.connect(connection[0], 0, connection[2]);\n              auxiliaryGainNodes.set(input, nativeGainNode);\n            }\n          }\n        } catch (err) {\n          // Bug #41: Only Chrome, Firefox and Opera throw the correct exception by now.\n          if (err.code === 12) {\n            throw createInvalidAccessError();\n          }\n\n          throw err;\n        }\n\n        const isNewConnectionToAudioNode = isOffline ? addConnectionToAudioNodeOfOfflineAudioContext(this, destination, output, input) : addConnectionToAudioNodeOfAudioContext(this, destination, output, input); // Bug #164: Only Firefox detects cycles so far.\n\n        if (isNewConnectionToAudioNode) {\n          const cycles = detectCycles([this], destination);\n          visitEachAudioNodeOnce(cycles, createIncrementCycleCounter(isOffline));\n        }\n\n        return destination;\n      }\n\n      const nativeAudioParam = getNativeAudioParam(destination);\n      /*\n       * Bug #147 & #153: Safari does not support to connect an input signal to the playbackRate AudioParam of an\n       * AudioBufferSourceNode. This can't be easily detected and that's why the outdated name property is used here to identify\n       * Safari.\n       */\n\n      if (nativeAudioParam.name === 'playbackRate') {\n        throw createNotSupportedError();\n      }\n\n      try {\n        this._nativeAudioNode.connect(nativeAudioParam, output);\n\n        if (isOffline || isPassiveAudioNode(this)) {\n          this._nativeAudioNode.disconnect(nativeAudioParam, output);\n        }\n      } catch (err) {\n        // Bug #58: Only Firefox does throw an InvalidStateError yet.\n        if (err.code === 12) {\n          throw createInvalidAccessError();\n        }\n\n        throw err;\n      }\n\n      const isNewConnectionToAudioParam = isOffline ? addConnectionToAudioParamOfOfflineAudioContext(this, destination, output) : addConnectionToAudioParamOfAudioContext(this, destination, output); // Bug #164: Only Firefox detects cycles so far.\n\n      if (isNewConnectionToAudioParam) {\n        const cycles = detectCycles([this], destination);\n        visitEachAudioNodeOnce(cycles, createIncrementCycleCounter(isOffline));\n      }\n    }\n\n    disconnect(destinationOrOutput, output, input) {\n      let destinations;\n\n      if (destinationOrOutput === undefined) {\n        destinations = deleteAnyConnection(this);\n      } else if (typeof destinationOrOutput === 'number') {\n        if (destinationOrOutput < 0 || destinationOrOutput >= this.numberOfOutputs) {\n          throw createIndexSizeError();\n        }\n\n        destinations = deleteConnectionAtOutput(this, destinationOrOutput);\n      } else {\n        if (output !== undefined && (output < 0 || output >= this.numberOfOutputs)) {\n          throw createIndexSizeError();\n        }\n\n        if (isAudioNode(destinationOrOutput) && input !== undefined && (input < 0 || input >= destinationOrOutput.numberOfInputs)) {\n          throw createIndexSizeError();\n        }\n\n        destinations = deleteConnectionToDestination(this, destinationOrOutput, output, input);\n\n        if (destinations.length === 0) {\n          throw createInvalidAccessError();\n        }\n      } // Bug #164: Only Firefox detects cycles so far.\n\n\n      for (const destination of destinations) {\n        const cycles = detectCycles([this], destination);\n        visitEachAudioNodeOnce(cycles, decrementCycleCounter);\n      }\n    }\n\n  };\n};","export const cloneAudioWorkletNodeOptions = audioWorkletNodeOptions => {\n  return new Promise((resolve, reject) => {\n    const {\n      port1,\n      port2\n    } = new MessageChannel();\n\n    port1.onmessage = ({\n      data\n    }) => {\n      port1.close();\n      port2.close();\n      resolve(data);\n    };\n\n    port1.onmessageerror = ({\n      data\n    }) => {\n      port1.close();\n      port2.close();\n      reject(data);\n    }; // This will throw an error if the audioWorkletNodeOptions are not clonable.\n\n\n    port2.postMessage(audioWorkletNodeOptions);\n  });\n};","import { cloneAudioWorkletNodeOptions } from './clone-audio-worklet-node-options';\nexport const createAudioWorkletProcessorPromise = async (processorConstructor, audioWorkletNodeOptions) => {\n  const clonedAudioWorkletNodeOptions = await cloneAudioWorkletNodeOptions(audioWorkletNodeOptions);\n  return new processorConstructor(clonedAudioWorkletNodeOptions);\n};","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { copyFromChannel } from '../helpers/copy-from-channel';\nimport { copyToChannel } from '../helpers/copy-to-channel';\nimport { createAudioWorkletProcessor } from '../helpers/create-audio-worklet-processor';\nimport { createNestedArrays } from '../helpers/create-nested-arrays';\nimport { ReadOnlyMap } from '../read-only-map';\nexport const createNativeAudioWorkletNodeFakerFactory = (auxiliaryGainNodeStore, connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, monitorConnections) => {\n  return (nativeContext, baseLatency, processorConstructor, options) => {\n    if (options.numberOfInputs === 0 && options.numberOfOutputs === 0) {\n      throw createNotSupportedError();\n    }\n\n    if (options.outputChannelCount !== undefined) {\n      // @todo Check if any of the channelCount values is greater than the implementation's maximum number of channels.\n      if (options.outputChannelCount.some(channelCount => channelCount < 1)) {\n        throw createNotSupportedError();\n      }\n\n      if (options.outputChannelCount.length !== options.numberOfOutputs) {\n        throw createIndexSizeError();\n      }\n    } // Bug #61: This is not part of the standard but required for the faker to work.\n\n\n    if (options.channelCountMode !== 'explicit') {\n      throw createNotSupportedError();\n    }\n\n    const numberOfInputChannels = options.channelCount * options.numberOfInputs;\n    const numberOfOutputChannels = options.outputChannelCount.reduce((sum, value) => sum + value, 0);\n    const numberOfParameters = processorConstructor.parameterDescriptors === undefined ? 0 : processorConstructor.parameterDescriptors.length; // Bug #61: This is not part of the standard but required for the faker to work.\n\n    if (numberOfInputChannels + numberOfParameters > 6 || numberOfOutputChannels > 6) {\n      throw createNotSupportedError();\n    }\n\n    const messageChannel = new MessageChannel();\n    const gainNodes = [];\n    const inputChannelSplitterNodes = [];\n\n    for (let i = 0; i < options.numberOfInputs; i += 1) {\n      gainNodes.push(createNativeGainNode(nativeContext, {\n        channelCount: options.channelCount,\n        channelCountMode: options.channelCountMode,\n        channelInterpretation: options.channelInterpretation,\n        gain: 1\n      }));\n      inputChannelSplitterNodes.push(createNativeChannelSplitterNode(nativeContext, {\n        channelCount: options.channelCount,\n        channelCountMode: 'explicit',\n        channelInterpretation: 'discrete',\n        numberOfOutputs: options.channelCount\n      }));\n    }\n\n    const constantSourceNodes = [];\n\n    if (processorConstructor.parameterDescriptors !== undefined) {\n      for (const {\n        defaultValue,\n        maxValue,\n        minValue,\n        name\n      } of processorConstructor.parameterDescriptors) {\n        const constantSourceNode = createNativeConstantSourceNode(nativeContext, {\n          channelCount: 1,\n          channelCountMode: 'explicit',\n          channelInterpretation: 'discrete',\n          offset: options.parameterData[name] !== undefined ? options.parameterData[name] : defaultValue === undefined ? 0 : defaultValue\n        });\n        Object.defineProperties(constantSourceNode.offset, {\n          defaultValue: {\n            get: () => defaultValue === undefined ? 0 : defaultValue\n          },\n          maxValue: {\n            get: () => maxValue === undefined ? MOST_POSITIVE_SINGLE_FLOAT : maxValue\n          },\n          minValue: {\n            get: () => minValue === undefined ? MOST_NEGATIVE_SINGLE_FLOAT : minValue\n          }\n        });\n        constantSourceNodes.push(constantSourceNode);\n      }\n    }\n\n    const inputChannelMergerNode = createNativeChannelMergerNode(nativeContext, {\n      channelCount: 1,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'speakers',\n      numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)\n    });\n    const bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n    const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, numberOfInputChannels + numberOfParameters, // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.\n    Math.max(1, numberOfOutputChannels));\n    const outputChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, {\n      channelCount: Math.max(1, numberOfOutputChannels),\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete',\n      numberOfOutputs: Math.max(1, numberOfOutputChannels)\n    });\n    const outputChannelMergerNodes = [];\n\n    for (let i = 0; i < options.numberOfOutputs; i += 1) {\n      outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeContext, {\n        channelCount: 1,\n        channelCountMode: 'explicit',\n        channelInterpretation: 'speakers',\n        numberOfInputs: options.outputChannelCount[i]\n      }));\n    }\n\n    for (let i = 0; i < options.numberOfInputs; i += 1) {\n      gainNodes[i].connect(inputChannelSplitterNodes[i]);\n\n      for (let j = 0; j < options.channelCount; j += 1) {\n        inputChannelSplitterNodes[i].connect(inputChannelMergerNode, j, i * options.channelCount + j);\n      }\n    }\n\n    const parameterMap = new ReadOnlyMap(processorConstructor.parameterDescriptors === undefined ? [] : processorConstructor.parameterDescriptors.map(({\n      name\n    }, index) => {\n      const constantSourceNode = constantSourceNodes[index];\n      constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);\n      constantSourceNode.start(0);\n      return [name, constantSourceNode.offset];\n    }));\n    inputChannelMergerNode.connect(scriptProcessorNode);\n    let channelInterpretation = options.channelInterpretation;\n    let onprocessorerror = null; // Bug #87: Expose at least one output to make this node connectable.\n\n    const outputAudioNodes = options.numberOfOutputs === 0 ? [scriptProcessorNode] : outputChannelMergerNodes;\n    const nativeAudioWorkletNodeFaker = {\n      get bufferSize() {\n        return bufferSize;\n      },\n\n      get channelCount() {\n        return options.channelCount;\n      },\n\n      set channelCount(_) {\n        // Bug #61: This is not part of the standard but required for the faker to work.\n        throw createInvalidStateError();\n      },\n\n      get channelCountMode() {\n        return options.channelCountMode;\n      },\n\n      set channelCountMode(_) {\n        // Bug #61: This is not part of the standard but required for the faker to work.\n        throw createInvalidStateError();\n      },\n\n      get channelInterpretation() {\n        return channelInterpretation;\n      },\n\n      set channelInterpretation(value) {\n        for (const gainNode of gainNodes) {\n          gainNode.channelInterpretation = value;\n        }\n\n        channelInterpretation = value;\n      },\n\n      get context() {\n        return scriptProcessorNode.context;\n      },\n\n      get inputs() {\n        return gainNodes;\n      },\n\n      get numberOfInputs() {\n        return options.numberOfInputs;\n      },\n\n      get numberOfOutputs() {\n        return options.numberOfOutputs;\n      },\n\n      get onprocessorerror() {\n        return onprocessorerror;\n      },\n\n      set onprocessorerror(value) {\n        if (typeof onprocessorerror === 'function') {\n          nativeAudioWorkletNodeFaker.removeEventListener('processorerror', onprocessorerror);\n        }\n\n        onprocessorerror = typeof value === 'function' ? value : null;\n\n        if (typeof onprocessorerror === 'function') {\n          nativeAudioWorkletNodeFaker.addEventListener('processorerror', onprocessorerror);\n        }\n      },\n\n      get parameters() {\n        return parameterMap;\n      },\n\n      get port() {\n        return messageChannel.port2;\n      },\n\n      addEventListener(...args) {\n        return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);\n      },\n\n      connect: connectMultipleOutputs.bind(null, outputAudioNodes),\n      disconnect: disconnectMultipleOutputs.bind(null, outputAudioNodes),\n\n      dispatchEvent(...args) {\n        return scriptProcessorNode.dispatchEvent(args[0]);\n      },\n\n      removeEventListener(...args) {\n        return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);\n      }\n\n    };\n    const patchedEventListeners = new Map(); // tslint:disable-line:max-line-length\n\n    messageChannel.port1.addEventListener = (addEventListener => {\n      return (...args) => {\n        if (args[0] === 'message') {\n          const unpatchedEventListener = typeof args[1] === 'function' ? args[1] : typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function' ? args[1].handleEvent : null;\n\n          if (unpatchedEventListener !== null) {\n            const patchedEventListener = patchedEventListeners.get(args[1]);\n\n            if (patchedEventListener !== undefined) {\n              args[1] = patchedEventListener;\n            } else {\n              args[1] = event => {\n                exposeCurrentFrameAndCurrentTime(nativeContext.currentTime, nativeContext.sampleRate, () => unpatchedEventListener(event));\n              };\n\n              patchedEventListeners.set(unpatchedEventListener, args[1]);\n            }\n          }\n        }\n\n        return addEventListener.call(messageChannel.port1, args[0], args[1], args[2]);\n      };\n    })(messageChannel.port1.addEventListener);\n\n    messageChannel.port1.removeEventListener = (removeEventListener => {\n      return (...args) => {\n        if (args[0] === 'message') {\n          const patchedEventListener = patchedEventListeners.get(args[1]);\n\n          if (patchedEventListener !== undefined) {\n            patchedEventListeners.delete(args[1]);\n            args[1] = patchedEventListener;\n          }\n        }\n\n        return removeEventListener.call(messageChannel.port1, args[0], args[1], args[2]);\n      };\n    })(messageChannel.port1.removeEventListener);\n\n    let onmessage = null;\n    Object.defineProperty(messageChannel.port1, 'onmessage', {\n      get: () => onmessage,\n      set: value => {\n        if (typeof onmessage === 'function') {\n          messageChannel.port1.removeEventListener('message', onmessage);\n        }\n\n        onmessage = typeof value === 'function' ? value : null;\n\n        if (typeof onmessage === 'function') {\n          messageChannel.port1.addEventListener('message', onmessage);\n          messageChannel.port1.start();\n        }\n      }\n    });\n    processorConstructor.prototype.port = messageChannel.port1;\n    let audioWorkletProcessor = null;\n    const audioWorkletProcessorPromise = createAudioWorkletProcessor(nativeContext, nativeAudioWorkletNodeFaker, processorConstructor, options);\n    audioWorkletProcessorPromise.then(dWrkltPrcssr => audioWorkletProcessor = dWrkltPrcssr);\n    const inputs = createNestedArrays(options.numberOfInputs, options.channelCount);\n    const outputs = createNestedArrays(options.numberOfOutputs, options.outputChannelCount);\n    const parameters = processorConstructor.parameterDescriptors === undefined ? [] : processorConstructor.parameterDescriptors.reduce((prmtrs, {\n      name\n    }) => ({ ...prmtrs,\n      [name]: new Float32Array(128)\n    }), {});\n    let isActive = true;\n\n    const disconnectOutputsGraph = () => {\n      if (options.numberOfOutputs > 0) {\n        scriptProcessorNode.disconnect(outputChannelSplitterNode);\n      }\n\n      for (let i = 0, outputChannelSplitterNodeOutput = 0; i < options.numberOfOutputs; i += 1) {\n        const outputChannelMergerNode = outputChannelMergerNodes[i];\n\n        for (let j = 0; j < options.outputChannelCount[i]; j += 1) {\n          outputChannelSplitterNode.disconnect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n        }\n\n        outputChannelSplitterNodeOutput += options.outputChannelCount[i];\n      }\n    };\n\n    scriptProcessorNode.onaudioprocess = ({\n      inputBuffer,\n      outputBuffer\n    }) => {\n      if (audioWorkletProcessor !== null) {\n        for (let i = 0; i < bufferSize; i += 128) {\n          for (let j = 0; j < options.numberOfInputs; j += 1) {\n            for (let k = 0; k < options.channelCount; k += 1) {\n              copyFromChannel(inputBuffer, inputs[j], k, k, i);\n            }\n          }\n\n          if (processorConstructor.parameterDescriptors !== undefined) {\n            processorConstructor.parameterDescriptors.forEach(({\n              name\n            }, index) => {\n              copyFromChannel(inputBuffer, parameters, name, numberOfInputChannels + index, i);\n            });\n          }\n\n          for (let j = 0; j < options.numberOfInputs; j += 1) {\n            for (let k = 0; k < options.outputChannelCount[j]; k += 1) {\n              // The byteLength will be 0 when the ArrayBuffer was transferred.\n              if (outputs[j][k].byteLength === 0) {\n                outputs[j][k] = new Float32Array(128);\n              }\n            }\n          }\n\n          try {\n            const potentiallyEmptyInputs = inputs.map((input, index) => {\n              const auxiliaryGainNodes = auxiliaryGainNodeStore.get(nativeAudioWorkletNodeFaker);\n\n              if (auxiliaryGainNodes === undefined || auxiliaryGainNodes.get(index) === undefined) {\n                return [];\n              }\n\n              return input;\n            });\n            const activeSourceFlag = exposeCurrentFrameAndCurrentTime(nativeContext.currentTime + i / nativeContext.sampleRate, nativeContext.sampleRate, () => audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters));\n            isActive = activeSourceFlag;\n\n            for (let j = 0, outputChannelSplitterNodeOutput = 0; j < options.numberOfOutputs; j += 1) {\n              for (let k = 0; k < options.outputChannelCount[j]; k += 1) {\n                copyToChannel(outputBuffer, outputs[j], k, outputChannelSplitterNodeOutput + k, i);\n              }\n\n              outputChannelSplitterNodeOutput += options.outputChannelCount[j];\n            }\n          } catch (error) {\n            isActive = false;\n            nativeAudioWorkletNodeFaker.dispatchEvent(new ErrorEvent('processorerror', {\n              error\n            }));\n          }\n\n          if (!isActive) {\n            for (let j = 0; j < options.numberOfInputs; j += 1) {\n              gainNodes[j].disconnect(inputChannelSplitterNodes[j]);\n\n              for (let k = 0; k < options.channelCount; k += 1) {\n                inputChannelSplitterNodes[i].disconnect(inputChannelMergerNode, k, j * options.channelCount + k);\n              }\n            }\n\n            if (processorConstructor.parameterDescriptors !== undefined) {\n              const length = processorConstructor.parameterDescriptors.length;\n\n              for (let j = 0; j < length; j += 1) {\n                const constantSourceNode = constantSourceNodes[j];\n                constantSourceNode.disconnect(inputChannelMergerNode, 0, numberOfInputChannels + j);\n                constantSourceNode.stop();\n              }\n            }\n\n            inputChannelMergerNode.disconnect(scriptProcessorNode);\n            scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation\n\n            if (isConnected) {\n              disconnectOutputsGraph();\n            } else {\n              disconnectFakeGraph();\n            }\n\n            break;\n          }\n        }\n      }\n    };\n\n    let isConnected = false; // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.\n\n    const nativeGainNode = createNativeGainNode(nativeContext, {\n      channelCount: 1,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete',\n      gain: 0\n    });\n\n    const connectFakeGraph = () => scriptProcessorNode.connect(nativeGainNode)\n    /*\n     * Bug #50: Edge does not yet allow to create AudioNodes on a closed AudioContext. Therefore the context property is used here\n     * to make sure to connect the right destination.\n     */\n    .connect(nativeGainNode.context.destination);\n\n    const disconnectFakeGraph = () => {\n      scriptProcessorNode.disconnect(nativeGainNode);\n      nativeGainNode.disconnect();\n    };\n\n    const whenConnected = () => {\n      if (isActive) {\n        disconnectFakeGraph();\n\n        if (options.numberOfOutputs > 0) {\n          scriptProcessorNode.connect(outputChannelSplitterNode);\n        }\n\n        for (let i = 0, outputChannelSplitterNodeOutput = 0; i < options.numberOfOutputs; i += 1) {\n          const outputChannelMergerNode = outputChannelMergerNodes[i];\n\n          for (let j = 0; j < options.outputChannelCount[i]; j += 1) {\n            outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n          }\n\n          outputChannelSplitterNodeOutput += options.outputChannelCount[i];\n        }\n      }\n\n      isConnected = true;\n    };\n\n    const whenDisconnected = () => {\n      if (isActive) {\n        connectFakeGraph();\n        disconnectOutputsGraph();\n      }\n\n      isConnected = false;\n    };\n\n    connectFakeGraph();\n    return monitorConnections(nativeAudioWorkletNodeFaker, whenConnected, whenDisconnected);\n  };\n};","import { NODE_TO_PROCESSOR_MAPS } from '../globals';\nimport { createAudioWorkletProcessorPromise } from './create-audio-worklet-processor-promise';\nexport const createAudioWorkletProcessor = (nativeContext, nativeAudioWorkletNode, processorConstructor, audioWorkletNodeOptions) => {\n  let nodeToProcessorMap = NODE_TO_PROCESSOR_MAPS.get(nativeContext);\n\n  if (nodeToProcessorMap === undefined) {\n    nodeToProcessorMap = new WeakMap();\n    NODE_TO_PROCESSOR_MAPS.set(nativeContext, nodeToProcessorMap);\n  }\n\n  const audioWorkletProcessorPromise = createAudioWorkletProcessorPromise(processorConstructor, audioWorkletNodeOptions);\n  nodeToProcessorMap.set(nativeAudioWorkletNode, audioWorkletProcessorPromise);\n  return audioWorkletProcessorPromise;\n};","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioBufferSourceNodeStartMethodConsecutiveCalls } from '../helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls';\nimport { wrapAudioBufferSourceNodeStartMethodDurationParameter } from '../helpers/wrap-audio-buffer-source-node-start-method-duration-parameter';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport const createNativeAudioBufferSourceNodeFactory = (addSilentConnection, cacheTestResult, createNativeAudioNode, testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, testAudioBufferSourceNodeStartMethodDurationParameterSupport, testAudioBufferSourceNodeStartMethodOffsetClampingSupport, testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClampling, wrapAudioBufferSourceNodeStopMethodNullifiedBuffer, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) => {\n  return (nativeContext, options = {}) => {\n    const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createBufferSource());\n    assignNativeAudioNodeOptions(nativeAudioBufferSourceNode, options);\n    assignNativeAudioNodeAudioParamValue(nativeAudioBufferSourceNode, options, 'playbackRate'); // Bug #71: Edge does not allow to set the buffer to null.\n\n    assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'buffer'); // Bug #149: Safari does not yet support the detune AudioParam.\n\n    assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loop');\n    assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopEnd');\n    assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopStart'); // Bug #69: Safari does allow calls to start() of an already scheduled AudioBufferSourceNode.\n\n    if (!cacheTestResult(testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, () => testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(nativeContext))) {\n      wrapAudioBufferSourceNodeStartMethodConsecutiveCalls(nativeAudioBufferSourceNode);\n    } // Bug #92: Chrome & Edge do not respect the duration parameter yet.\n\n\n    if (!cacheTestResult(testAudioBufferSourceNodeStartMethodDurationParameterSupport, testAudioBufferSourceNodeStartMethodDurationParameterSupport)) {\n      wrapAudioBufferSourceNodeStartMethodDurationParameter(nativeAudioBufferSourceNode, nativeContext);\n    } // Bug #154 & #155: Safari does not handle offsets which are equal to or greater than the duration of the buffer.\n\n\n    if (!cacheTestResult(testAudioBufferSourceNodeStartMethodOffsetClampingSupport, () => testAudioBufferSourceNodeStartMethodOffsetClampingSupport(nativeContext))) {\n      wrapAudioBufferSourceNodeStartMethodOffsetClampling(nativeAudioBufferSourceNode);\n    } // Bug #162: Safari does throw an error when stop() is called on an AudioBufferSourceNode which has no buffer assigned to it.\n\n\n    if (!cacheTestResult(testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, () => testAudioBufferSourceNodeStopMethodNullifiedBufferSupport(nativeContext))) {\n      wrapAudioBufferSourceNodeStopMethodNullifiedBuffer(nativeAudioBufferSourceNode, nativeContext);\n    } // Bug #44: Only Chrome, Firefox & Opera throw a RangeError yet.\n\n\n    if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {\n      wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeAudioBufferSourceNode);\n    } // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.\n\n\n    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, () => testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext))) {\n      wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeAudioBufferSourceNode, nativeContext);\n    } // Bug #44: Only Firefox does not throw a RangeError yet.\n\n\n    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {\n      wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeAudioBufferSourceNode);\n    } // Bug #175: Safari will not fire an ended event if the AudioBufferSourceNode is unconnected.\n\n\n    addSilentConnection(nativeContext, nativeAudioBufferSourceNode);\n    return nativeAudioBufferSourceNode;\n  };\n};","import { createInvalidStateError } from '../factories/invalid-state-error';\nexport const wrapAudioBufferSourceNodeStartMethodConsecutiveCalls = nativeAudioBufferSourceNode => {\n  nativeAudioBufferSourceNode.start = (start => {\n    let isScheduled = false;\n    return (when = 0, offset = 0, duration) => {\n      if (isScheduled) {\n        throw createInvalidStateError();\n      }\n\n      start.call(nativeAudioBufferSourceNode, when, offset, duration);\n      isScheduled = true;\n    };\n  })(nativeAudioBufferSourceNode.start);\n};","export const wrapAudioBufferSourceNodeStartMethodDurationParameter = (nativeAudioScheduledSourceNode, nativeContext) => {\n  let endTime = Number.POSITIVE_INFINITY;\n  let stopTime = Number.POSITIVE_INFINITY;\n\n  nativeAudioScheduledSourceNode.start = ((start, stop) => {\n    return (when = 0, offset = 0, duration = Number.POSITIVE_INFINITY) => {\n      start.call(nativeAudioScheduledSourceNode, when, offset);\n\n      if (duration >= 0 && duration < Number.POSITIVE_INFINITY) {\n        const actualStartTime = Math.max(when, nativeContext.currentTime); // @todo The playbackRate could of course also have been automated and is not always fixed.\n\n        const durationInBufferTime = duration / nativeAudioScheduledSourceNode.playbackRate.value;\n        endTime = actualStartTime + durationInBufferTime;\n        stop.call(nativeAudioScheduledSourceNode, Math.min(endTime, stopTime));\n      }\n    };\n  })(nativeAudioScheduledSourceNode.start, nativeAudioScheduledSourceNode.stop);\n\n  nativeAudioScheduledSourceNode.stop = (stop => {\n    return (when = 0) => {\n      stopTime = Math.max(when, nativeContext.currentTime);\n      stop.call(nativeAudioScheduledSourceNode, Math.min(endTime, stopTime));\n    };\n  })(nativeAudioScheduledSourceNode.stop);\n};","const handler = {\n  construct() {\n    return handler;\n  }\n\n};\nexport const isConstructible = constructible => {\n  try {\n    const proxy = new Proxy(constructible, handler);\n    new proxy(); // tslint:disable-line:no-unused-expression\n  } catch {\n    return false;\n  }\n\n  return true;\n};","/*\n * This massive regex tries to cover all the following cases.\n *\n * import './path';\n * import defaultImport from './path';\n * import { namedImport } from './path';\n * import { namedImport as renamendImport } from './path';\n * import * as namespaceImport from './path';\n * import defaultImport, { namedImport } from './path';\n * import defaultImport, { namedImport as renamendImport } from './path';\n * import defaultImport, * as namespaceImport from './path';\n */\nconst IMPORT_STATEMENT_REGEX = /^import(?:(?:[\\s]+[\\w]+|(?:[\\s]+[\\w]+[\\s]*,)?[\\s]*\\{[\\s]*[\\w]+(?:[\\s]+as[\\s]+[\\w]+)?(?:[\\s]*,[\\s]*[\\w]+(?:[\\s]+as[\\s]+[\\w]+)?)*[\\s]*}|(?:[\\s]+[\\w]+[\\s]*,)?[\\s]*\\*[\\s]+as[\\s]+[\\w]+)[\\s]+from)?(?:[\\s]*)(\"([^\"\\\\]|\\\\.)+\"|'([^'\\\\]|\\\\.)+')(?:[\\s]*);?/; // tslint:disable-line:max-line-length\n\nexport const splitImportStatements = (source, url) => {\n  const importStatements = [];\n  let sourceWithoutImportStatements = source.replace(/^[\\s]+/, '');\n  let result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);\n\n  while (result !== null) {\n    const unresolvedUrl = result[1].slice(1, -1);\n    const importStatementWithResolvedUrl = result[0].replace(/([\\s]+)?;?$/, '').replace(unresolvedUrl, new URL(unresolvedUrl, url).toString());\n    importStatements.push(importStatementWithResolvedUrl);\n    sourceWithoutImportStatements = sourceWithoutImportStatements.slice(result[0].length).replace(/^[\\s]+/, '');\n    result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);\n  }\n\n  return [importStatements.join(';'), sourceWithoutImportStatements];\n};","import { NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS } from '../globals';\nimport { isConstructible } from '../helpers/is-constructible';\nimport { splitImportStatements } from '../helpers/split-import-statements';\n\nconst verifyParameterDescriptors = parameterDescriptors => {\n  if (parameterDescriptors !== undefined && !Array.isArray(parameterDescriptors)) {\n    throw new TypeError('The parameterDescriptors property of given value for processorCtor is not an array.');\n  }\n};\n\nconst verifyProcessorCtor = processorCtor => {\n  if (!isConstructible(processorCtor)) {\n    throw new TypeError('The given value for processorCtor should be a constructor.');\n  }\n\n  if (processorCtor.prototype === null || typeof processorCtor.prototype !== 'object') {\n    throw new TypeError('The given value for processorCtor should have a prototype.');\n  }\n};\n\nexport const createAddAudioWorkletModule = (createNotSupportedError, evaluateSource, exposeCurrentFrameAndCurrentTime, fetchSource, getBackupNativeContext, getNativeContext, ongoingRequests, resolvedRequests, window) => {\n  return (context, moduleURL, options = {\n    credentials: 'omit'\n  }) => {\n    const nativeContext = getNativeContext(context);\n    const absoluteUrl = new URL(moduleURL, window.location.href).toString(); // Bug #59: Only Chrome & Opera do implement the audioWorklet property.\n\n    if (nativeContext.audioWorklet !== undefined) {\n      return fetchSource(moduleURL).then(source => {\n        const [importStatements, sourceWithoutImportStatements] = splitImportStatements(source, absoluteUrl);\n        /*\n         * Bug #170: Chrome and Opera do call process() with an array with empty channelData for each input if no input is\n         * connected.\n         *\n         * This is the unminified version of the code used below:\n         *\n         * ```js\n         * `${ importStatements };\n         * ((registerProcessor) => {${ sourceWithoutImportStatements }\n         * })((name, processorCtor) => registerProcessor(name, class extends processorCtor {\n         *\n         *     process (inputs, outputs, parameters) {\n         *         return super.process(\n         *             (inputs.map((input) => input.some((channelData) => channelData.length === 0)) ? [ ] : input),\n         *             outputs,\n         *             parameters\n         *         );\n         *     }\n         *\n         * }))`\n         * ```\n         */\n\n        const wrappedSource = `${importStatements};(registerProcessor=>{${sourceWithoutImportStatements}\n})((n,p)=>registerProcessor(n,class extends p{process(i,o,p){return super.process(i.map(j=>j.some(k=>k.length===0)?[]:j),o,p)}}))`; // tslint:disable-line:max-line-length\n\n        const blob = new Blob([wrappedSource], {\n          type: 'application/javascript; charset=utf-8'\n        });\n        const url = URL.createObjectURL(blob);\n        const backupNativeContext = getBackupNativeContext(nativeContext);\n        const nativeContextOrBackupNativeContext = backupNativeContext !== null ? backupNativeContext : nativeContext;\n        return nativeContextOrBackupNativeContext.audioWorklet.addModule(url, options).then(() => URL.revokeObjectURL(url)) // @todo This could be written more elegantly when Promise.finally() becomes avalaible.\n        .catch(err => {\n          URL.revokeObjectURL(url);\n\n          if (err.code === undefined || err.name === 'SyntaxError') {\n            err.code = 12;\n          }\n\n          throw err;\n        });\n      });\n    }\n\n    const resolvedRequestsOfContext = resolvedRequests.get(context);\n\n    if (resolvedRequestsOfContext !== undefined && resolvedRequestsOfContext.has(moduleURL)) {\n      return Promise.resolve();\n    }\n\n    const ongoingRequestsOfContext = ongoingRequests.get(context);\n\n    if (ongoingRequestsOfContext !== undefined) {\n      const promiseOfOngoingRequest = ongoingRequestsOfContext.get(moduleURL);\n\n      if (promiseOfOngoingRequest !== undefined) {\n        return promiseOfOngoingRequest;\n      }\n    }\n\n    const promise = fetchSource(moduleURL).then(source => {\n      const [importStatements, sourceWithoutImportStatements] = splitImportStatements(source, absoluteUrl);\n      /*\n       * This is the unminified version of the code used below:\n       *\n       * ```js\n       * ${ importStatements };\n       * ((a, b) => {\n       *     (a[b] = a[b] || [ ]).push(\n       *         (AudioWorkletProcessor, global, registerProcessor, sampleRate, self, window) => {\n       *             ${ sourceWithoutImportStatements }\n       *         }\n       *     );\n       * })(window, '_AWGS');\n       * ```\n       */\n      // tslint:disable-next-line:max-line-length\n\n      const wrappedSource = `${importStatements};((a,b)=>{(a[b]=a[b]||[]).push((AudioWorkletProcessor,global,registerProcessor,sampleRate,self,window)=>{${sourceWithoutImportStatements}\n})})(window,'_AWGS')`; // @todo Evaluating the given source code is a possible security problem.\n\n      return evaluateSource(wrappedSource);\n    }).then(() => {\n      const evaluateAudioWorkletGlobalScope = window._AWGS.pop();\n\n      if (evaluateAudioWorkletGlobalScope === undefined) {\n        throw new SyntaxError();\n      }\n\n      exposeCurrentFrameAndCurrentTime(nativeContext.currentTime, nativeContext.sampleRate, () => evaluateAudioWorkletGlobalScope(class AudioWorkletProcessor {}, undefined, (name, processorCtor) => {\n        if (name.trim() === '') {\n          throw createNotSupportedError();\n        }\n\n        const nodeNameToProcessorConstructorMap = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);\n\n        if (nodeNameToProcessorConstructorMap !== undefined) {\n          if (nodeNameToProcessorConstructorMap.has(name)) {\n            throw createNotSupportedError();\n          }\n\n          verifyProcessorCtor(processorCtor);\n          verifyParameterDescriptors(processorCtor.parameterDescriptors);\n          nodeNameToProcessorConstructorMap.set(name, processorCtor);\n        } else {\n          verifyProcessorCtor(processorCtor);\n          verifyParameterDescriptors(processorCtor.parameterDescriptors);\n          NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.set(nativeContext, new Map([[name, processorCtor]]));\n        }\n      }, nativeContext.sampleRate, undefined, undefined));\n    }).catch(err => {\n      if (err.code === undefined || err.name === 'SyntaxError') {\n        err.code = 12;\n      }\n\n      throw err;\n    });\n\n    if (ongoingRequestsOfContext === undefined) {\n      ongoingRequests.set(context, new Map([[moduleURL, promise]]));\n    } else {\n      ongoingRequestsOfContext.set(moduleURL, promise);\n    }\n\n    promise.then(() => {\n      const rslvdRqstsFCntxt = resolvedRequests.get(context);\n\n      if (rslvdRqstsFCntxt === undefined) {\n        resolvedRequests.set(context, new Set([moduleURL]));\n      } else {\n        rslvdRqstsFCntxt.add(moduleURL);\n      }\n    }).catch(() => {}) // tslint:disable-line:no-empty\n    // @todo Use finally when it becomes available in all supported browsers.\n    .then(() => {\n      const ngngRqstsFCntxt = ongoingRequests.get(context);\n\n      if (ngngRqstsFCntxt !== undefined) {\n        ngngRqstsFCntxt.delete(moduleURL);\n      }\n    });\n    return promise;\n  };\n};","export const testAnalyserNodeGetFloatTimeDomainDataMethodSupport = nativeAnalyserNode => {\n  return typeof nativeAnalyserNode.getFloatTimeDomainData === 'function';\n};","import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { testAnalyserNodeGetFloatTimeDomainDataMethodSupport } from '../helpers/test-analyser-node-get-float-time-domain-data-method-support';\nimport { wrapAnalyserNodeGetFloatTimeDomainDataMethod } from '../helpers/wrap-analyser-node-get-float-time-domain-data-method';\nexport const createNativeAnalyserNodeFactory = (cacheTestResult, createIndexSizeError, createNativeAudioNode) => {\n  return (nativeContext, options) => {\n    const nativeAnalyserNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createAnalyser()); // Bug #37: Firefox does not create an AnalyserNode with the default properties.\n\n    assignNativeAudioNodeOptions(nativeAnalyserNode, options); // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n\n    if (!(options.maxDecibels > options.minDecibels)) {\n      throw createIndexSizeError();\n    }\n\n    assignNativeAudioNodeOption(nativeAnalyserNode, options, 'fftSize');\n    assignNativeAudioNodeOption(nativeAnalyserNode, options, 'maxDecibels');\n    assignNativeAudioNodeOption(nativeAnalyserNode, options, 'minDecibels');\n    assignNativeAudioNodeOption(nativeAnalyserNode, options, 'smoothingTimeConstant'); // Bug #36: Safari does not support getFloatTimeDomainData() yet.\n\n    if (!cacheTestResult(testAnalyserNodeGetFloatTimeDomainDataMethodSupport, () => testAnalyserNodeGetFloatTimeDomainDataMethodSupport(nativeAnalyserNode))) {\n      wrapAnalyserNodeGetFloatTimeDomainDataMethod(nativeAnalyserNode);\n    }\n\n    return nativeAnalyserNode;\n  };\n};","export const wrapAnalyserNodeGetFloatTimeDomainDataMethod = nativeAnalyserNode => {\n  nativeAnalyserNode.getFloatTimeDomainData = array => {\n    const byteTimeDomainData = new Uint8Array(array.length);\n    nativeAnalyserNode.getByteTimeDomainData(byteTimeDomainData);\n    const length = Math.max(byteTimeDomainData.length, nativeAnalyserNode.fftSize);\n\n    for (let i = 0; i < length; i += 1) {\n      array[i] = (byteTimeDomainData[i] - 128) * 0.0078125;\n    }\n\n    return array;\n  };\n};","import { createInvalidAccessError } from '../factories/invalid-access-error';\nexport const wrapIIRFilterNodeGetFrequencyResponseMethod = nativeIIRFilterNode => {\n  nativeIIRFilterNode.getFrequencyResponse = (getFrequencyResponse => {\n    return (frequencyHz, magResponse, phaseResponse) => {\n      if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n        throw createInvalidAccessError();\n      }\n\n      return getFrequencyResponse.call(nativeIIRFilterNode, frequencyHz, magResponse, phaseResponse);\n    };\n  })(nativeIIRFilterNode.getFrequencyResponse);\n};","import { wrapIIRFilterNodeGetFrequencyResponseMethod } from '../helpers/wrap-iir-filter-node-get-frequency-response-method';\nconst DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers'\n};\nexport const createIIRFilterNodeConstructor = (audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext) => {\n  return class IIRFilterNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeIIRFilterNode = createNativeIIRFilterNode(nativeContext, isOffline ? null : context.baseLatency, mergedOptions);\n      const iirFilterNodeRenderer = isOffline ? createIIRFilterNodeRenderer(mergedOptions.feedback, mergedOptions.feedforward) : null;\n      super(context, false, nativeIIRFilterNode, iirFilterNodeRenderer); // Bug #23 & #24: FirefoxDeveloper does not throw an InvalidAccessError.\n      // @todo Write a test which allows other browsers to remain unpatched.\n\n      wrapIIRFilterNodeGetFrequencyResponseMethod(nativeIIRFilterNode);\n      this._nativeIIRFilterNode = nativeIIRFilterNode;\n    }\n\n    getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n      return this._nativeIIRFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n    }\n\n  };\n};","export const isDelayNode = audioNode => {\n  return 'delayTime' in audioNode;\n};","import { isAudioNode } from '../guards/audio-node';\nimport { isDelayNode } from '../guards/delay-node';\nexport const createDetectCycles = (audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey) => {\n  return function detectCycles(chain, nextLink) {\n    const audioNode = isAudioNode(nextLink) ? nextLink : getValueForKey(audioParamAudioNodeStore, nextLink);\n\n    if (isDelayNode(audioNode)) {\n      return [];\n    }\n\n    if (chain[0] === audioNode) {\n      return [chain];\n    }\n\n    if (chain.includes(audioNode)) {\n      return [];\n    }\n\n    const {\n      outputs\n    } = getAudioNodeConnections(audioNode);\n    return Array.from(outputs).map(outputConnection => detectCycles([...chain, audioNode], outputConnection[0])).reduce((mergedCycles, nestedCycles) => mergedCycles.concat(nestedCycles), []);\n  };\n};","import { detachArrayBuffer } from '../helpers/detach-array-buffer';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport const createDecodeAudioData = (audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, detachedArrayBuffers, getNativeContext, isNativeContext, isNativeOfflineAudioContext, nativeOfflineAudioContextConstructor, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {\n  return (anyContext, audioData) => {\n    const nativeContext = isNativeContext(anyContext) ? anyContext : getNativeContext(anyContext); // Bug #43: Only Chrome and Opera do throw a DataCloneError.\n\n    if (detachedArrayBuffers.has(audioData)) {\n      const err = createDataCloneError();\n      return Promise.reject(err);\n    } // The audioData parameter maybe of a type which can't be added to a WeakSet.\n\n\n    try {\n      detachedArrayBuffers.add(audioData);\n    } catch {} // Ignore errors.\n    // Bug #21: Safari does not support promises yet.\n\n\n    if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeContext))) {\n      // Bug #101: Edge does not decode something on a closed OfflineAudioContext.\n      const nativeContextOrBackupNativeContext = nativeContext.state === 'closed' && nativeOfflineAudioContextConstructor !== null && isNativeOfflineAudioContext(nativeContext) ? new nativeOfflineAudioContextConstructor(1, 1, nativeContext.sampleRate) : nativeContext;\n      const promise = nativeContextOrBackupNativeContext.decodeAudioData(audioData).catch(err => {\n        // Bug #27: Edge is rejecting invalid arrayBuffers with a DOMException.\n        if (err instanceof DOMException && err.name === 'NotSupportedError') {\n          throw new TypeError();\n        }\n\n        throw err;\n      });\n      return promise.then(audioBuffer => {\n        // Bug #157: Only Chrome & Opera do allow the bufferOffset to be out-of-bounds.\n        if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n          wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n        }\n\n        audioBufferStore.add(audioBuffer);\n        return audioBuffer;\n      });\n    } // Bug #21: Safari does not return a Promise yet.\n\n\n    return new Promise((resolve, reject) => {\n      const complete = () => {\n        // Bug #133: Safari does neuter the ArrayBuffer.\n        try {\n          detachArrayBuffer(audioData);\n        } catch {\n          /* Ignore errors. */\n        }\n      };\n\n      const fail = err => {\n        reject(err);\n        complete();\n      }; // Bug #26: Safari throws a synchronous error.\n\n\n      try {\n        // Bug #1: Safari requires a successCallback.\n        nativeContext.decodeAudioData(audioData, audioBuffer => {\n          // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n          // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n          if (typeof audioBuffer.copyFromChannel !== 'function') {\n            wrapAudioBufferCopyChannelMethods(audioBuffer);\n            wrapAudioBufferGetChannelDataMethod(audioBuffer);\n          }\n\n          audioBufferStore.add(audioBuffer);\n          complete();\n          resolve(audioBuffer);\n        }, err => {\n          // Bug #4: Safari returns null instead of an error.\n          if (err === null) {\n            fail(createEncodingError());\n          } else {\n            fail(err);\n          }\n        });\n      } catch (err) {\n        fail(err);\n      }\n    });\n  };\n};","export const detachArrayBuffer = arrayBuffer => {\n  const {\n    port1\n  } = new MessageChannel();\n  port1.postMessage(arrayBuffer, [arrayBuffer]);\n};","export const testClonabilityOfAudioWorkletNodeOptions = audioWorkletNodeOptions => {\n  const {\n    port1\n  } = new MessageChannel();\n\n  try {\n    // This will throw an error if the audioWorkletNodeOptions are not clonable.\n    port1.postMessage(audioWorkletNodeOptions);\n  } finally {\n    port1.close();\n  }\n};","import { testClonabilityOfAudioWorkletNodeOptions } from '../helpers/test-clonability-of-audio-worklet-node-options';\nexport const createNativeAudioWorkletNodeFactory = (createInvalidStateError, createNativeAudioNode, createNativeAudioWorkletNodeFaker, createNativeGainNode, createNotSupportedError, monitorConnections) => {\n  return (nativeContext, baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, options) => {\n    if (nativeAudioWorkletNodeConstructor !== null) {\n      try {\n        const nativeAudioWorkletNode = createNativeAudioNode(nativeContext, ntvCntxt => {\n          return new nativeAudioWorkletNodeConstructor(ntvCntxt, name, options);\n        });\n        const patchedEventListeners = new Map(); // tslint:disable-line:max-line-length\n\n        let onprocessorerror = null;\n        Object.defineProperties(nativeAudioWorkletNode, {\n          /*\n           * Bug #61: Overwriting the property accessors for channelCount and channelCountMode is necessary as long as some\n           * browsers have no native implementation to achieve a consistent behavior.\n           */\n          channelCount: {\n            get: () => options.channelCount,\n            set: () => {\n              throw createInvalidStateError();\n            }\n          },\n          channelCountMode: {\n            get: () => 'explicit',\n            set: () => {\n              throw createInvalidStateError();\n            }\n          },\n          // Bug #156: Chrome & Opera do not yet fire an ErrorEvent.\n          onprocessorerror: {\n            get: () => onprocessorerror,\n            set: value => {\n              if (typeof onprocessorerror === 'function') {\n                nativeAudioWorkletNode.removeEventListener('processorerror', onprocessorerror);\n              }\n\n              onprocessorerror = typeof value === 'function' ? value : null;\n\n              if (typeof onprocessorerror === 'function') {\n                nativeAudioWorkletNode.addEventListener('processorerror', onprocessorerror);\n              }\n            }\n          }\n        });\n\n        nativeAudioWorkletNode.addEventListener = (addEventListener => {\n          return (...args) => {\n            if (args[0] === 'processorerror') {\n              const unpatchedEventListener = typeof args[1] === 'function' ? args[1] : typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function' ? args[1].handleEvent : null;\n\n              if (unpatchedEventListener !== null) {\n                const patchedEventListener = patchedEventListeners.get(args[1]);\n\n                if (patchedEventListener !== undefined) {\n                  args[1] = patchedEventListener;\n                } else {\n                  args[1] = event => {\n                    unpatchedEventListener(new ErrorEvent(args[0], { ...event,\n                      error: new Error()\n                    }));\n                  };\n\n                  patchedEventListeners.set(unpatchedEventListener, args[1]);\n                }\n              }\n            }\n\n            return addEventListener.call(nativeAudioWorkletNode, args[0], args[1], args[2]);\n          };\n        })(nativeAudioWorkletNode.addEventListener);\n\n        nativeAudioWorkletNode.removeEventListener = (removeEventListener => {\n          return (...args) => {\n            if (args[0] === 'processorerror') {\n              const patchedEventListener = patchedEventListeners.get(args[1]);\n\n              if (patchedEventListener !== undefined) {\n                patchedEventListeners.delete(args[1]);\n                args[1] = patchedEventListener;\n              }\n            }\n\n            return removeEventListener.call(nativeAudioWorkletNode, args[0], args[1], args[2]);\n          };\n        })(nativeAudioWorkletNode.removeEventListener);\n        /*\n         * Bug #86: Chrome & Opera do not invoke the process() function if the corresponding AudioWorkletNode is unconnected but has\n         * an output.\n         */\n\n\n        if (options.numberOfOutputs !== 0) {\n          const nativeGainNode = createNativeGainNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            gain: 0\n          });\n          nativeAudioWorkletNode.connect(nativeGainNode)\n          /*\n           * Bug #50: Edge does not yet allow to create AudioNodes on a closed AudioContext. Therefore the context property is\n           * used here to make sure to connect the right destination.\n           */\n          .connect(nativeGainNode.context.destination);\n\n          const whenConnected = () => nativeGainNode.disconnect();\n          /*\n           * Bug #50: Edge does not yet allow to create AudioNodes on a closed AudioContext. Therefore the context property is\n           * used here to make sure to connect the right destination.\n           */\n\n\n          const whenDisconnected = () => nativeGainNode.connect(nativeGainNode.context.destination); // @todo Disconnect the connection when the process() function of the AudioWorkletNode returns false.\n\n\n          return monitorConnections(nativeAudioWorkletNode, whenConnected, whenDisconnected);\n        }\n\n        return nativeAudioWorkletNode;\n      } catch (err) {\n        // Bug #60: Chrome & Opera throw an InvalidStateError instead of a NotSupportedError.\n        if (err.code === 11) {\n          throw createNotSupportedError();\n        }\n\n        throw err;\n      }\n    } // Bug #61: Only Chrome & Opera have an implementation of the AudioWorkletNode yet.\n\n\n    if (processorConstructor === undefined) {\n      throw createNotSupportedError();\n    }\n\n    testClonabilityOfAudioWorkletNodeOptions(options);\n    return createNativeAudioWorkletNodeFaker(nativeContext, baseLatency, processorConstructor, options);\n  };\n};","import { copyFromChannel } from '../helpers/copy-from-channel';\nimport { copyToChannel } from '../helpers/copy-to-channel';\nimport { createNestedArrays } from '../helpers/create-nested-arrays';\nimport { getAudioNodeConnections } from '../helpers/get-audio-node-connections';\nimport { getAudioWorkletProcessor } from '../helpers/get-audio-worklet-processor';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\n\nconst processBuffer = async (proxy, renderedBuffer, nativeOfflineAudioContext, options, processorConstructor, exposeCurrentFrameAndCurrentTime) => {\n  // Ceil the length to the next full render quantum.\n  // Bug #17: Safari does not yet expose the length.\n  const length = renderedBuffer === null ? Math.ceil(proxy.context.length / 128) * 128 : renderedBuffer.length;\n  const numberOfInputChannels = options.channelCount * options.numberOfInputs;\n  const numberOfOutputChannels = options.outputChannelCount.reduce((sum, value) => sum + value, 0);\n  const processedBuffer = numberOfOutputChannels === 0 ? null : nativeOfflineAudioContext.createBuffer(numberOfOutputChannels, length, nativeOfflineAudioContext.sampleRate);\n\n  if (processorConstructor === undefined) {\n    throw new Error('Missing the processor constructor.');\n  }\n\n  const audioNodeConnections = getAudioNodeConnections(proxy);\n  const audioWorkletProcessor = await getAudioWorkletProcessor(nativeOfflineAudioContext, proxy);\n  const inputs = createNestedArrays(options.numberOfInputs, options.channelCount);\n  const outputs = createNestedArrays(options.numberOfOutputs, options.outputChannelCount);\n  const parameters = Array.from(proxy.parameters.keys()).reduce((prmtrs, name) => ({ ...prmtrs,\n    [name]: new Float32Array(128)\n  }), {});\n\n  for (let i = 0; i < length; i += 128) {\n    if (options.numberOfInputs > 0 && renderedBuffer !== null) {\n      for (let j = 0; j < options.numberOfInputs; j += 1) {\n        for (let k = 0; k < options.channelCount; k += 1) {\n          copyFromChannel(renderedBuffer, inputs[j], k, k, i);\n        }\n      }\n    }\n\n    if (processorConstructor.parameterDescriptors !== undefined && renderedBuffer !== null) {\n      processorConstructor.parameterDescriptors.forEach(({\n        name\n      }, index) => {\n        copyFromChannel(renderedBuffer, parameters, name, numberOfInputChannels + index, i);\n      });\n    }\n\n    for (let j = 0; j < options.numberOfInputs; j += 1) {\n      for (let k = 0; k < options.outputChannelCount[j]; k += 1) {\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (outputs[j][k].byteLength === 0) {\n          outputs[j][k] = new Float32Array(128);\n        }\n      }\n    }\n\n    try {\n      const potentiallyEmptyInputs = inputs.map((input, index) => {\n        if (audioNodeConnections.activeInputs[index].size === 0) {\n          return [];\n        }\n\n        return input;\n      });\n      const activeSourceFlag = exposeCurrentFrameAndCurrentTime(i / nativeOfflineAudioContext.sampleRate, nativeOfflineAudioContext.sampleRate, () => audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters));\n\n      if (processedBuffer !== null) {\n        for (let j = 0, outputChannelSplitterNodeOutput = 0; j < options.numberOfOutputs; j += 1) {\n          for (let k = 0; k < options.outputChannelCount[j]; k += 1) {\n            copyToChannel(processedBuffer, outputs[j], k, outputChannelSplitterNodeOutput + k, i);\n          }\n\n          outputChannelSplitterNodeOutput += options.outputChannelCount[j];\n        }\n      }\n\n      if (!activeSourceFlag) {\n        break;\n      }\n    } catch (error) {\n      proxy.dispatchEvent(new ErrorEvent('processorerror', {\n        error\n      }));\n      break;\n    }\n  }\n\n  return processedBuffer;\n};\n\nexport const createAudioWorkletNodeRendererFactory = (connectAudioParam, connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, deleteUnrenderedAudioWorkletNode, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getNativeAudioNode, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {\n  return (name, options, processorConstructor) => {\n    const renderedNativeAudioNodes = new WeakMap();\n    let processedBufferPromise = null;\n\n    const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeAudioWorkletNode = getNativeAudioNode(proxy);\n      let nativeOutputNodes = null;\n      const nativeAudioWorkletNodeIsOwnedByContext = isOwnedByContext(nativeAudioWorkletNode, nativeOfflineAudioContext); // Bug #61: Only Chrome & Opera have an implementation of the AudioWorkletNode yet.\n\n      if (nativeAudioWorkletNodeConstructor === null) {\n        const numberOfOutputChannels = options.outputChannelCount.reduce((sum, value) => sum + value, 0);\n        const outputChannelSplitterNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, {\n          channelCount: Math.max(1, numberOfOutputChannels),\n          channelCountMode: 'explicit',\n          channelInterpretation: 'discrete',\n          numberOfOutputs: Math.max(1, numberOfOutputChannels)\n        });\n        const outputChannelMergerNodes = [];\n\n        for (let i = 0; i < proxy.numberOfOutputs; i += 1) {\n          outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeOfflineAudioContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'speakers',\n            numberOfInputs: options.outputChannelCount[i]\n          }));\n        }\n\n        const outputGainNode = createNativeGainNode(nativeOfflineAudioContext, {\n          channelCount: options.channelCount,\n          channelCountMode: options.channelCountMode,\n          channelInterpretation: options.channelInterpretation,\n          gain: 1\n        });\n        outputGainNode.connect = connectMultipleOutputs.bind(null, outputChannelMergerNodes);\n        outputGainNode.disconnect = disconnectMultipleOutputs.bind(null, outputChannelMergerNodes);\n        nativeOutputNodes = [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode];\n      } else if (!nativeAudioWorkletNodeIsOwnedByContext) {\n        nativeAudioWorkletNode = new nativeAudioWorkletNodeConstructor(nativeOfflineAudioContext, name);\n      }\n\n      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeOutputNodes === null ? nativeAudioWorkletNode : nativeOutputNodes[2]);\n\n      if (nativeOutputNodes !== null) {\n        if (processedBufferPromise === null) {\n          if (processorConstructor === undefined) {\n            throw new Error('Missing the processor constructor.');\n          }\n\n          if (nativeOfflineAudioContextConstructor === null) {\n            throw new Error('Missing the native OfflineAudioContext constructor.');\n          } // Bug #47: The AudioDestinationNode in Edge and Safari gets not initialized correctly.\n\n\n          const numberOfInputChannels = proxy.channelCount * proxy.numberOfInputs;\n          const numberOfParameters = processorConstructor.parameterDescriptors === undefined ? 0 : processorConstructor.parameterDescriptors.length;\n          const numberOfChannels = numberOfInputChannels + numberOfParameters;\n\n          const renderBuffer = async () => {\n            const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(numberOfChannels, // Ceil the length to the next full render quantum.\n            // Bug #17: Safari does not yet expose the length.\n            Math.ceil(proxy.context.length / 128) * 128, nativeOfflineAudioContext.sampleRate);\n            const gainNodes = [];\n            const inputChannelSplitterNodes = [];\n\n            for (let i = 0; i < options.numberOfInputs; i += 1) {\n              gainNodes.push(createNativeGainNode(partialOfflineAudioContext, {\n                channelCount: options.channelCount,\n                channelCountMode: options.channelCountMode,\n                channelInterpretation: options.channelInterpretation,\n                gain: 1\n              }));\n              inputChannelSplitterNodes.push(createNativeChannelSplitterNode(partialOfflineAudioContext, {\n                channelCount: options.channelCount,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'discrete',\n                numberOfOutputs: options.channelCount\n              }));\n            }\n\n            const constantSourceNodes = await Promise.all(Array.from(proxy.parameters.values()).map(async audioParam => {\n              const constantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {\n                channelCount: 1,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'discrete',\n                offset: audioParam.value\n              });\n              await renderAutomation(partialOfflineAudioContext, audioParam, constantSourceNode.offset, trace);\n              return constantSourceNode;\n            }));\n            const inputChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {\n              channelCount: 1,\n              channelCountMode: 'explicit',\n              channelInterpretation: 'speakers',\n              numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)\n            });\n\n            for (let i = 0; i < options.numberOfInputs; i += 1) {\n              gainNodes[i].connect(inputChannelSplitterNodes[i]);\n\n              for (let j = 0; j < options.channelCount; j += 1) {\n                inputChannelSplitterNodes[i].connect(inputChannelMergerNode, j, i * options.channelCount + j);\n              }\n            }\n\n            for (const [index, constantSourceNode] of constantSourceNodes.entries()) {\n              constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);\n              constantSourceNode.start(0);\n            }\n\n            inputChannelMergerNode.connect(partialOfflineAudioContext.destination);\n            await Promise.all(gainNodes.map(gainNode => renderInputsOfAudioNode(proxy, partialOfflineAudioContext, gainNode, trace)));\n            return renderNativeOfflineAudioContext(partialOfflineAudioContext);\n          };\n\n          processedBufferPromise = processBuffer(proxy, numberOfChannels === 0 ? null : await renderBuffer(), nativeOfflineAudioContext, options, processorConstructor, exposeCurrentFrameAndCurrentTime);\n        }\n\n        const processedBuffer = await processedBufferPromise;\n        const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext);\n        const [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode] = nativeOutputNodes;\n\n        if (processedBuffer !== null) {\n          audioBufferSourceNode.buffer = processedBuffer;\n          audioBufferSourceNode.start(0);\n        }\n\n        audioBufferSourceNode.connect(outputChannelSplitterNode);\n\n        for (let i = 0, outputChannelSplitterNodeOutput = 0; i < proxy.numberOfOutputs; i += 1) {\n          const outputChannelMergerNode = outputChannelMergerNodes[i];\n\n          for (let j = 0; j < options.outputChannelCount[i]; j += 1) {\n            outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n          }\n\n          outputChannelSplitterNodeOutput += options.outputChannelCount[i];\n        }\n\n        return outputGainNode;\n      }\n\n      if (!nativeAudioWorkletNodeIsOwnedByContext) {\n        for (const [nm, audioParam] of proxy.parameters.entries()) {\n          await renderAutomation(nativeOfflineAudioContext, audioParam, // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n          nativeAudioWorkletNode.parameters.get(nm), trace);\n        }\n      } else {\n        for (const [nm, audioParam] of proxy.parameters.entries()) {\n          await connectAudioParam(nativeOfflineAudioContext, audioParam, // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n          nativeAudioWorkletNode.parameters.get(nm), trace);\n        }\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioWorkletNode, trace);\n      return nativeAudioWorkletNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        deleteUnrenderedAudioWorkletNode(nativeOfflineAudioContext, proxy);\n        const renderedNativeAudioWorkletNodeOrGainNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAudioWorkletNodeOrGainNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioWorkletNodeOrGainNode);\n        }\n\n        return createAudioNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","import { NODE_TO_PROCESSOR_MAPS } from '../globals';\nimport { getNativeAudioNode } from './get-native-audio-node';\nimport { getValueForKey } from './get-value-for-key';\nexport const getAudioWorkletProcessor = (nativeOfflineAudioContext, proxy) => {\n  const nodeToProcessorMap = getValueForKey(NODE_TO_PROCESSOR_MAPS, nativeOfflineAudioContext);\n  const nativeAudioWorkletNode = getNativeAudioNode(proxy);\n  return getValueForKey(nodeToProcessorMap, nativeAudioWorkletNode);\n};","import { createInvalidStateError } from '../factories/invalid-state-error';\nexport const wrapChannelSplitterNode = channelSplitterNode => {\n  const channelCount = channelSplitterNode.numberOfOutputs; // Bug #97: Safari does not throw an error when attempting to change the channelCount to something other than its initial value.\n\n  Object.defineProperty(channelSplitterNode, 'channelCount', {\n    get: () => channelCount,\n    set: value => {\n      if (value !== channelCount) {\n        throw createInvalidStateError();\n      }\n    }\n  });\n  /*\n   * Bug #30: Only Chrome, Firefox & Opera throw an error when attempting to change the channelCountMode to something other than\n   * explicit.\n   */\n\n  Object.defineProperty(channelSplitterNode, 'channelCountMode', {\n    get: () => 'explicit',\n    set: value => {\n      if (value !== 'explicit') {\n        throw createInvalidStateError();\n      }\n    }\n  });\n  /*\n   * Bug #32: Only Chrome, Firefox & Opera throws an error when attempting to change the channelInterpretation to something other than\n   * discrete.\n   */\n\n  Object.defineProperty(channelSplitterNode, 'channelInterpretation', {\n    get: () => 'discrete',\n    set: value => {\n      if (value !== 'discrete') {\n        throw createInvalidStateError();\n      }\n    }\n  });\n};","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapChannelSplitterNode } from '../helpers/wrap-channel-splitter-node';\nexport const createNativeChannelSplitterNodeFactory = createNativeAudioNode => {\n  return (nativeContext, options) => {\n    const nativeChannelSplitterNode = createNativeAudioNode(nativeContext, ntvCntxt => {\n      return ntvCntxt.createChannelSplitter(options.numberOfOutputs);\n    }); // Bug #96: Safari does not have the correct channelCount.\n    // Bug #29: Edge & Safari do not have the correct channelCountMode.\n    // Bug #31: Edge & Safari do not have the correct channelInterpretation.\n\n    assignNativeAudioNodeOptions(nativeChannelSplitterNode, options); // Bug #29, #30, #31, #32, #96 & #97: Only Chrome, Firefox & Opera partially support the spec yet.\n\n    wrapChannelSplitterNode(nativeChannelSplitterNode);\n    return nativeChannelSplitterNode;\n  };\n};","var arrayWithHoles = require(\"./arrayWithHoles\");\n\nvar iterableToArrayLimit = require(\"./iterableToArrayLimit\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableRest = require(\"./nonIterableRest\");\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray;","function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles;","function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit;","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableRest;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","/**\n * Assert that the statement is true, otherwise invoke the error.\n * @param statement\n * @param error The message which is passed into an Error\n */\nexport function assert(statement, error) {\n  if (!statement) {\n    throw new Error(error);\n  }\n}\n/**\n * Make sure that the given value is within the range\n */\n\nexport function assertRange(value, gte, lte = Infinity) {\n  if (!(gte <= value && value <= lte)) {\n    throw new RangeError(`Value must be within [${gte}, ${lte}], got: ${value}`);\n  }\n}\n/**\n * Make sure that the given value is within the range\n */\n\nexport function assertContextRunning(context) {\n  // add a warning if the context is not started\n  if (!context.isOffline && context.state !== \"running\") {\n    warn(\"The AudioContext is \\\"suspended\\\". Invoke Tone.start() from a user action to start the audio.\");\n  }\n}\n/**\n * The default logger is the console\n */\n\nlet defaultLogger = console;\n/**\n * Set the logging interface\n */\n\nexport function setLogger(logger) {\n  defaultLogger = logger;\n}\n/**\n * Log anything\n */\n\nexport function log(...args) {\n  defaultLogger.log(...args);\n}\n/**\n * Warn anything\n */\n\nexport function warn(...args) {\n  defaultLogger.warn(...args);\n}","/**\n * Test if the arg is undefined\n */\nexport function isUndef(arg) {\n  return typeof arg === \"undefined\";\n}\n/**\n * Test if the arg is not undefined\n */\n\nexport function isDefined(arg) {\n  return !isUndef(arg);\n}\n/**\n * Test if the arg is a function\n */\n\nexport function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n/**\n * Test if the argument is a number.\n */\n\nexport function isNumber(arg) {\n  return typeof arg === \"number\";\n}\n/**\n * Test if the given argument is an object literal (i.e. `{}`);\n */\n\nexport function isObject(arg) {\n  return Object.prototype.toString.call(arg) === \"[object Object]\" && arg.constructor === Object;\n}\n/**\n * Test if the argument is a boolean.\n */\n\nexport function isBoolean(arg) {\n  return typeof arg === \"boolean\";\n}\n/**\n * Test if the argument is an Array\n */\n\nexport function isArray(arg) {\n  return Array.isArray(arg);\n}\n/**\n * Test if the argument is a string.\n */\n\nexport function isString(arg) {\n  return typeof arg === \"string\";\n}\n/**\n * Test if the argument is in the form of a note in scientific pitch notation.\n * e.g. \"C4\"\n */\n\nexport function isNote(arg) {\n  return isString(arg) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(arg);\n}","import { AudioContext as stdAudioContext, AudioWorkletNode as stdAudioWorkletNode, OfflineAudioContext as stdOfflineAudioContext } from \"standardized-audio-context\";\nimport { assert } from \"../util/Debug\";\nimport { isDefined } from \"../util/TypeCheck\";\n/**\n * Create a new AudioContext\n */\n\nexport function createAudioContext() {\n  return new stdAudioContext();\n}\n/**\n * Create a new OfflineAudioContext\n */\n\nexport function createOfflineAudioContext(channels, length, sampleRate) {\n  return new stdOfflineAudioContext(channels, length, sampleRate);\n}\n/**\n * A reference to the window object\n * @hidden\n */\n\nexport const theWindow = typeof self === \"object\" ? self : null;\n/**\n * If the browser has a window object which has an AudioContext\n * @hidden\n */\n\nexport const hasAudioContext = theWindow && (theWindow.hasOwnProperty(\"AudioContext\") || theWindow.hasOwnProperty(\"webkitAudioContext\"));\nexport function createAudioWorkletNode(context, name, options) {\n  assert(isDefined(stdAudioWorkletNode), \"This node only works in a secure context (https or localhost)\"); // @ts-ignore\n\n  return new stdAudioWorkletNode(context, name, options);\n}\n/**\n * This promise resolves to a boolean which indicates if the\n * functionality is supported within the currently used browse.\n * Taken from [standardized-audio-context](https://github.com/chrisguttandin/standardized-audio-context#issupported)\n */\n\nexport { isSupported as supported } from \"standardized-audio-context\";","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nexport var __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\nexport function __rest(s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\nexport function __param(paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n}\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\nexport function __generator(thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n}\nexport function __exportStar(m, exports) {\n  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n}\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n}\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n}\n;\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []),\n      i,\n      q = [];\n  return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i;\n\n  function verb(n) {\n    if (g[n]) i[n] = function (v) {\n      return new Promise(function (a, b) {\n        q.push([n, v, a, b]) > 1 || resume(n, v);\n      });\n    };\n  }\n\n  function resume(n, v) {\n    try {\n      step(g[n](v));\n    } catch (e) {\n      settle(q[0][3], e);\n    }\n  }\n\n  function step(r) {\n    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n  }\n\n  function fulfill(value) {\n    resume(\"next\", value);\n  }\n\n  function reject(value) {\n    resume(\"throw\", value);\n  }\n\n  function settle(f, v) {\n    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n  }\n}\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) {\n    throw e;\n  }), verb(\"return\"), i[Symbol.iterator] = function () {\n    return this;\n  }, i;\n\n  function verb(n, f) {\n    i[n] = o[n] ? function (v) {\n      return (p = !p) ? {\n        value: __await(o[n](v)),\n        done: n === \"return\"\n      } : f ? f(v) : v;\n    } : f;\n  }\n}\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator],\n      i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i);\n\n  function verb(n) {\n    i[n] = o[n] && function (v) {\n      return new Promise(function (resolve, reject) {\n        v = o[n](v), settle(resolve, reject, v.done, v.value);\n      });\n    };\n  }\n\n  function settle(resolve, reject, d, v) {\n    Promise.resolve(v).then(function (v) {\n      resolve({\n        value: v,\n        done: d\n      });\n    }, reject);\n  }\n}\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) {\n    Object.defineProperty(cooked, \"raw\", {\n      value: raw\n    });\n  } else {\n    cooked.raw = raw;\n  }\n\n  return cooked;\n}\n;\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result.default = mod;\n  return result;\n}\nexport function __importDefault(mod) {\n  return mod && mod.__esModule ? mod : {\n    default: mod\n  };\n}\nexport function __classPrivateFieldGet(receiver, privateMap) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n\n  return privateMap.get(receiver);\n}\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to set private field on non-instance\");\n  }\n\n  privateMap.set(receiver, value);\n  return value;\n}","/**\n * A class which provides a reliable callback using either\n * a Web Worker, or if that isn't supported, falls back to setTimeout.\n */\nexport class Ticker {\n  constructor(callback, type, updateInterval) {\n    this._callback = callback;\n    this._type = type;\n    this._updateInterval = updateInterval; // create the clock source for the first time\n\n    this._createClock();\n  }\n  /**\n   * Generate a web worker\n   */\n\n\n  _createWorker() {\n    const blob = new Blob([\n    /* javascript */\n    `\n\t\t\t// the initial timeout time\n\t\t\tlet timeoutTime =  ${(this._updateInterval * 1000).toFixed(1)};\n\t\t\t// onmessage callback\n\t\t\tself.onmessage = function(msg){\n\t\t\t\ttimeoutTime = parseInt(msg.data);\n\t\t\t};\n\t\t\t// the tick function which posts a message\n\t\t\t// and schedules a new tick\n\t\t\tfunction tick(){\n\t\t\t\tsetTimeout(tick, timeoutTime);\n\t\t\t\tself.postMessage('tick');\n\t\t\t}\n\t\t\t// call tick initially\n\t\t\ttick();\n\t\t\t`], {\n      type: \"text/javascript\"\n    });\n    const blobUrl = URL.createObjectURL(blob);\n    const worker = new Worker(blobUrl);\n    worker.onmessage = this._callback.bind(this);\n    this._worker = worker;\n  }\n  /**\n   * Create a timeout loop\n   */\n\n\n  _createTimeout() {\n    this._timeout = setTimeout(() => {\n      this._createTimeout();\n\n      this._callback();\n    }, this._updateInterval * 1000);\n  }\n  /**\n   * Create the clock source.\n   */\n\n\n  _createClock() {\n    if (this._type === \"worker\") {\n      try {\n        this._createWorker();\n      } catch (e) {\n        // workers not supported, fallback to timeout\n        this._type = \"timeout\";\n\n        this._createClock();\n      }\n    } else if (this._type === \"timeout\") {\n      this._createTimeout();\n    }\n  }\n  /**\n   * Clean up the current clock source\n   */\n\n\n  _disposeClock() {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n      this._timeout = 0;\n    }\n\n    if (this._worker) {\n      this._worker.terminate();\n\n      this._worker.onmessage = null;\n    }\n  }\n  /**\n   * The rate in seconds the ticker will update\n   */\n\n\n  get updateInterval() {\n    return this._updateInterval;\n  }\n\n  set updateInterval(interval) {\n    this._updateInterval = Math.max(interval, 128 / 44100);\n\n    if (this._type === \"worker\") {\n      this._worker.postMessage(Math.max(interval * 1000, 1));\n    }\n  }\n  /**\n   * The type of the ticker, either a worker or a timeout\n   */\n\n\n  get type() {\n    return this._type;\n  }\n\n  set type(type) {\n    this._disposeClock();\n\n    this._type = type;\n\n    this._createClock();\n  }\n  /**\n   * Clean up\n   */\n\n\n  dispose() {\n    this._disposeClock();\n  }\n\n}","import { isAnyAudioContext, isAnyAudioNode, isAnyAudioParam, isAnyOfflineAudioContext } from \"standardized-audio-context\";\n/**\n * Test if the given value is an instanceof AudioParam\n */\n\nexport function isAudioParam(arg) {\n  return isAnyAudioParam(arg);\n}\n/**\n * Test if the given value is an instanceof AudioNode\n */\n\nexport function isAudioNode(arg) {\n  return isAnyAudioNode(arg);\n}\n/**\n * Test if the arg is instanceof an OfflineAudioContext\n */\n\nexport function isOfflineAudioContext(arg) {\n  return isAnyOfflineAudioContext(arg);\n}\n/**\n * Test if the arg is an instanceof AudioContext\n */\n\nexport function isAudioContext(arg) {\n  return isAnyAudioContext(arg);\n}\n/**\n * Test if the arg is instanceof an AudioBuffer\n */\n\nexport function isAudioBuffer(arg) {\n  return arg instanceof AudioBuffer;\n}","import { isAudioBuffer, isAudioNode, isAudioParam } from \"./AdvancedTypeCheck\";\nimport { isDefined, isObject, isUndef } from \"./TypeCheck\";\n/**\n * Some objects should not be merged\n */\n\nfunction noCopy(key, arg) {\n  return key === \"value\" || isAudioParam(arg) || isAudioNode(arg) || isAudioBuffer(arg);\n}\n\nexport function deepMerge(target, ...sources) {\n  if (!sources.length) {\n    return target;\n  }\n\n  const source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (noCopy(key, source[key])) {\n        target[key] = source[key];\n      } else if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, {\n            [key]: {}\n          });\n        }\n\n        deepMerge(target[key], source[key]);\n      } else {\n        Object.assign(target, {\n          [key]: source[key]\n        });\n      }\n    }\n  } // @ts-ignore\n\n\n  return deepMerge(target, ...sources);\n}\n/**\n * Returns true if the two arrays have the same value for each of the elements\n */\n\nexport function deepEquals(arrayA, arrayB) {\n  return arrayA.length === arrayB.length && arrayA.every((element, index) => arrayB[index] === element);\n}\n/**\n * Convert an args array into an object.\n */\n\nexport function optionsFromArguments(defaults, argsArray, keys = [], objKey) {\n  const opts = {};\n  const args = Array.from(argsArray); // if the first argument is an object and has an object key\n\n  if (isObject(args[0]) && objKey && !Reflect.has(args[0], objKey)) {\n    // if it's not part of the defaults\n    const partOfDefaults = Object.keys(args[0]).some(key => Reflect.has(defaults, key));\n\n    if (!partOfDefaults) {\n      // merge that key\n      deepMerge(opts, {\n        [objKey]: args[0]\n      }); // remove the obj key from the keys\n\n      keys.splice(keys.indexOf(objKey), 1); // shift the first argument off\n\n      args.shift();\n    }\n  }\n\n  if (args.length === 1 && isObject(args[0])) {\n    deepMerge(opts, args[0]);\n  } else {\n    for (let i = 0; i < keys.length; i++) {\n      if (isDefined(args[i])) {\n        opts[keys[i]] = args[i];\n      }\n    }\n  }\n\n  return deepMerge(defaults, opts);\n}\n/**\n * Return this instances default values by calling Constructor.getDefaults()\n */\n\nexport function getDefaultsFromInstance(instance) {\n  return instance.constructor.getDefaults();\n}\n/**\n * Returns the fallback if the given object is undefined.\n * Take an array of arguments and return a formatted options object.\n */\n\nexport function defaultArg(given, fallback) {\n  if (isUndef(given)) {\n    return fallback;\n  } else {\n    return given;\n  }\n}\n/**\n * Remove all of the properties belonging to omit from obj.\n */\n\nexport function omitFromObject(obj, omit) {\n  omit.forEach(prop => {\n    if (Reflect.has(obj, prop)) {\n      delete obj[prop];\n    }\n  });\n  return obj;\n}","/**\n * Tone.js\n * @author Yotam Mann\n * @license http://opensource.org/licenses/MIT MIT License\n * @copyright 2014-2019 Yotam Mann\n */\nimport { version } from \"../version\";\nimport { theWindow } from \"./context/AudioContext\";\nimport { log } from \"./util/Debug\";\n/**\n * @class  Tone is the base class of all other classes.\n * @constructor\n */\n\nexport class Tone {\n  constructor() {\n    //-------------------------------------\n    // \tDEBUGGING\n    //-------------------------------------\n\n    /**\n     * Set this debug flag to log all events that happen in this class.\n     */\n    this.debug = false; //-------------------------------------\n    // \tDISPOSING\n    //-------------------------------------\n\n    /**\n     * Indicates if the instance was disposed\n     */\n\n    this._wasDisposed = false;\n  }\n  /**\n   * Returns all of the default options belonging to the class.\n   */\n\n\n  static getDefaults() {\n    return {};\n  }\n  /**\n   * Prints the outputs to the console log for debugging purposes.\n   * Prints the contents only if either the object has a property\n   * called `debug` set to true, or a variable called TONE_DEBUG_CLASS\n   * is set to the name of the class.\n   * @example\n   * const osc = new Tone.Oscillator();\n   * // prints all logs originating from this oscillator\n   * osc.debug = true;\n   * // calls to start/stop will print in the console\n   * osc.start();\n   */\n\n\n  log(...args) {\n    // if the object is either set to debug = true\n    // or if there is a string on the Tone.global.with the class name\n    if (this.debug || theWindow && this.toString() === theWindow.TONE_DEBUG_CLASS) {\n      log(this, ...args);\n    }\n  }\n  /**\n   * disconnect and dispose.\n   */\n\n\n  dispose() {\n    this._wasDisposed = true;\n    return this;\n  }\n  /**\n   * Indicates if the instance was disposed. 'Disposing' an\n   * instance means that all of the Web Audio nodes that were\n   * created for the instance are disconnected and freed for garbage collection.\n   */\n\n\n  get disposed() {\n    return this._wasDisposed;\n  }\n  /**\n   * Convert the class to a string\n   * @example\n   * const osc = new Tone.Oscillator();\n   * console.log(osc.toString());\n   */\n\n\n  toString() {\n    return this.name;\n  }\n\n}\n/**\n * The version number semver\n */\n\nTone.version = version;","export const version = \"14.6.8\";","/**\n * The threshold for correctness for operators. Less than one sample even\n * at very high sampling rates (e.g. `1e-6 < 1 / 192000`).\n */\nconst EPSILON = 1e-6;\n/**\n * Test if A is greater than B\n */\n\nexport function GT(a, b) {\n  return a > b + EPSILON;\n}\n/**\n * Test if A is greater than or equal to B\n */\n\nexport function GTE(a, b) {\n  return GT(a, b) || EQ(a, b);\n}\n/**\n * Test if A is less than B\n */\n\nexport function LT(a, b) {\n  return a + EPSILON < b;\n}\n/**\n * Test if A is less than B\n */\n\nexport function EQ(a, b) {\n  return Math.abs(a - b) < EPSILON;\n}\n/**\n * Clamp the value within the given range\n */\n\nexport function clamp(value, min, max) {\n  return Math.max(Math.min(value, max), min);\n}","import { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"./Defaults\";\nimport { assert } from \"./Debug\";\nimport { EQ, GT, GTE, LT } from \"./Math\";\n/**\n * A Timeline class for scheduling and maintaining state\n * along a timeline. All events must have a \"time\" property.\n * Internally, events are stored in time order for fast\n * retrieval.\n */\n\nexport class Timeline extends Tone {\n  constructor() {\n    super();\n    this.name = \"Timeline\";\n    /**\n     * The array of scheduled timeline events\n     */\n\n    this._timeline = [];\n    const options = optionsFromArguments(Timeline.getDefaults(), arguments, [\"memory\"]);\n    this.memory = options.memory;\n    this.increasing = options.increasing;\n  }\n\n  static getDefaults() {\n    return {\n      memory: Infinity,\n      increasing: false\n    };\n  }\n  /**\n   * The number of items in the timeline.\n   */\n\n\n  get length() {\n    return this._timeline.length;\n  }\n  /**\n   * Insert an event object onto the timeline. Events must have a \"time\" attribute.\n   * @param event  The event object to insert into the timeline.\n   */\n\n\n  add(event) {\n    // the event needs to have a time attribute\n    assert(Reflect.has(event, \"time\"), \"Timeline: events must have a time attribute\");\n    event.time = event.time.valueOf();\n\n    if (this.increasing && this.length) {\n      const lastValue = this._timeline[this.length - 1];\n      assert(GTE(event.time, lastValue.time), \"The time must be greater than or equal to the last scheduled time\");\n\n      this._timeline.push(event);\n    } else {\n      const index = this._search(event.time);\n\n      this._timeline.splice(index + 1, 0, event);\n    } // if the length is more than the memory, remove the previous ones\n\n\n    if (this.length > this.memory) {\n      const diff = this.length - this.memory;\n\n      this._timeline.splice(0, diff);\n    }\n\n    return this;\n  }\n  /**\n   * Remove an event from the timeline.\n   * @param  {Object}  event  The event object to remove from the list.\n   * @returns {Timeline} this\n   */\n\n\n  remove(event) {\n    const index = this._timeline.indexOf(event);\n\n    if (index !== -1) {\n      this._timeline.splice(index, 1);\n    }\n\n    return this;\n  }\n  /**\n   * Get the nearest event whose time is less than or equal to the given time.\n   * @param  time  The time to query.\n   */\n\n\n  get(time, param = \"time\") {\n    const index = this._search(time, param);\n\n    if (index !== -1) {\n      return this._timeline[index];\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Return the first event in the timeline without removing it\n   * @returns {Object} The first event object\n   */\n\n\n  peek() {\n    return this._timeline[0];\n  }\n  /**\n   * Return the first event in the timeline and remove it\n   */\n\n\n  shift() {\n    return this._timeline.shift();\n  }\n  /**\n   * Get the event which is scheduled after the given time.\n   * @param  time  The time to query.\n   */\n\n\n  getAfter(time, param = \"time\") {\n    const index = this._search(time, param);\n\n    if (index + 1 < this._timeline.length) {\n      return this._timeline[index + 1];\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Get the event before the event at the given time.\n   * @param  time  The time to query.\n   */\n\n\n  getBefore(time) {\n    const len = this._timeline.length; // if it's after the last item, return the last item\n\n    if (len > 0 && this._timeline[len - 1].time < time) {\n      return this._timeline[len - 1];\n    }\n\n    const index = this._search(time);\n\n    if (index - 1 >= 0) {\n      return this._timeline[index - 1];\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Cancel events at and after the given time\n   * @param  after  The time to query.\n   */\n\n\n  cancel(after) {\n    if (this._timeline.length > 1) {\n      let index = this._search(after);\n\n      if (index >= 0) {\n        if (EQ(this._timeline[index].time, after)) {\n          // get the first item with that time\n          for (let i = index; i >= 0; i--) {\n            if (EQ(this._timeline[i].time, after)) {\n              index = i;\n            } else {\n              break;\n            }\n          }\n\n          this._timeline = this._timeline.slice(0, index);\n        } else {\n          this._timeline = this._timeline.slice(0, index + 1);\n        }\n      } else {\n        this._timeline = [];\n      }\n    } else if (this._timeline.length === 1) {\n      // the first item's time\n      if (GTE(this._timeline[0].time, after)) {\n        this._timeline = [];\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Cancel events before or equal to the given time.\n   * @param  time  The time to cancel before.\n   */\n\n\n  cancelBefore(time) {\n    const index = this._search(time);\n\n    if (index >= 0) {\n      this._timeline = this._timeline.slice(index + 1);\n    }\n\n    return this;\n  }\n  /**\n   * Returns the previous event if there is one. null otherwise\n   * @param  event The event to find the previous one of\n   * @return The event right before the given event\n   */\n\n\n  previousEvent(event) {\n    const index = this._timeline.indexOf(event);\n\n    if (index > 0) {\n      return this._timeline[index - 1];\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Does a binary search on the timeline array and returns the\n   * nearest event index whose time is after or equal to the given time.\n   * If a time is searched before the first index in the timeline, -1 is returned.\n   * If the time is after the end, the index of the last item is returned.\n   */\n\n\n  _search(time, param = \"time\") {\n    if (this._timeline.length === 0) {\n      return -1;\n    }\n\n    let beginning = 0;\n    const len = this._timeline.length;\n    let end = len;\n\n    if (len > 0 && this._timeline[len - 1][param] <= time) {\n      return len - 1;\n    }\n\n    while (beginning < end) {\n      // calculate the midpoint for roughly equal partition\n      let midPoint = Math.floor(beginning + (end - beginning) / 2);\n      const event = this._timeline[midPoint];\n      const nextEvent = this._timeline[midPoint + 1];\n\n      if (EQ(event[param], time)) {\n        // choose the last one that has the same time\n        for (let i = midPoint; i < this._timeline.length; i++) {\n          const testEvent = this._timeline[i];\n\n          if (EQ(testEvent[param], time)) {\n            midPoint = i;\n          } else {\n            break;\n          }\n        }\n\n        return midPoint;\n      } else if (LT(event[param], time) && GT(nextEvent[param], time)) {\n        return midPoint;\n      } else if (GT(event[param], time)) {\n        // search lower\n        end = midPoint;\n      } else {\n        // search upper\n        beginning = midPoint + 1;\n      }\n    }\n\n    return -1;\n  }\n  /**\n   * Internal iterator. Applies extra safety checks for\n   * removing items from the array.\n   */\n\n\n  _iterate(callback, lowerBound = 0, upperBound = this._timeline.length - 1) {\n    this._timeline.slice(lowerBound, upperBound + 1).forEach(callback);\n  }\n  /**\n   * Iterate over everything in the array\n   * @param  callback The callback to invoke with every item\n   */\n\n\n  forEach(callback) {\n    this._iterate(callback);\n\n    return this;\n  }\n  /**\n   * Iterate over everything in the array at or before the given time.\n   * @param  time The time to check if items are before\n   * @param  callback The callback to invoke with every item\n   */\n\n\n  forEachBefore(time, callback) {\n    // iterate over the items in reverse so that removing an item doesn't break things\n    const upperBound = this._search(time);\n\n    if (upperBound !== -1) {\n      this._iterate(callback, 0, upperBound);\n    }\n\n    return this;\n  }\n  /**\n   * Iterate over everything in the array after the given time.\n   * @param  time The time to check if items are before\n   * @param  callback The callback to invoke with every item\n   */\n\n\n  forEachAfter(time, callback) {\n    // iterate over the items in reverse so that removing an item doesn't break things\n    const lowerBound = this._search(time);\n\n    this._iterate(callback, lowerBound + 1);\n\n    return this;\n  }\n  /**\n   * Iterate over everything in the array between the startTime and endTime.\n   * The timerange is inclusive of the startTime, but exclusive of the endTime.\n   * range = [startTime, endTime).\n   * @param  startTime The time to check if items are before\n   * @param  endTime The end of the test interval.\n   * @param  callback The callback to invoke with every item\n   */\n\n\n  forEachBetween(startTime, endTime, callback) {\n    let lowerBound = this._search(startTime);\n\n    let upperBound = this._search(endTime);\n\n    if (lowerBound !== -1 && upperBound !== -1) {\n      if (this._timeline[lowerBound].time !== startTime) {\n        lowerBound += 1;\n      } // exclusive of the end time\n\n\n      if (this._timeline[upperBound].time === endTime) {\n        upperBound -= 1;\n      }\n\n      this._iterate(callback, lowerBound, upperBound);\n    } else if (lowerBound === -1) {\n      this._iterate(callback, 0, upperBound);\n    }\n\n    return this;\n  }\n  /**\n   * Iterate over everything in the array at or after the given time. Similar to\n   * forEachAfter, but includes the item(s) at the given time.\n   * @param  time The time to check if items are before\n   * @param  callback The callback to invoke with every item\n   */\n\n\n  forEachFrom(time, callback) {\n    // iterate over the items in reverse so that removing an item doesn't break things\n    let lowerBound = this._search(time); // work backwards until the event time is less than time\n\n\n    while (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {\n      lowerBound--;\n    }\n\n    this._iterate(callback, lowerBound + 1);\n\n    return this;\n  }\n  /**\n   * Iterate over everything in the array at the given time\n   * @param  time The time to check if items are before\n   * @param  callback The callback to invoke with every item\n   */\n\n\n  forEachAtTime(time, callback) {\n    // iterate over the items in reverse so that removing an item doesn't break things\n    const upperBound = this._search(time);\n\n    if (upperBound !== -1 && EQ(this._timeline[upperBound].time, time)) {\n      let lowerBound = upperBound;\n\n      for (let i = upperBound; i >= 0; i--) {\n        if (EQ(this._timeline[i].time, time)) {\n          lowerBound = i;\n        } else {\n          break;\n        }\n      }\n\n      this._iterate(event => {\n        callback(event);\n      }, lowerBound, upperBound);\n    }\n\n    return this;\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n    this._timeline = [];\n    return this;\n  }\n\n}","//-------------------------------------\n// INITIALIZING NEW CONTEXT\n//-------------------------------------\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyNewContext = [];\n/**\n * Used internally to setup a new Context\n */\n\nexport function onContextInit(cb) {\n  notifyNewContext.push(cb);\n}\n/**\n * Invoke any classes which need to also be initialized when a new context is created.\n */\n\nexport function initializeContext(ctx) {\n  // add any additional modules\n  notifyNewContext.forEach(cb => cb(ctx));\n}\n/**\n * Array of callbacks to invoke when a new context is created\n */\n\nconst notifyCloseContext = [];\n/**\n * Used internally to tear down a Context\n */\n\nexport function onContextClose(cb) {\n  notifyCloseContext.push(cb);\n}\nexport function closeContext(ctx) {\n  // add any additional modules\n  notifyCloseContext.forEach(cb => cb(ctx));\n}","import { Tone } from \"../Tone\";\nimport { isUndef } from \"./TypeCheck\";\n/**\n * Emitter gives classes which extend it\n * the ability to listen for and emit events.\n * Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).\n * MIT (c) 2011 Jerome Etienne.\n */\n\nexport class Emitter extends Tone {\n  constructor() {\n    super(...arguments);\n    this.name = \"Emitter\";\n  }\n  /**\n   * Bind a callback to a specific event.\n   * @param  event     The name of the event to listen for.\n   * @param  callback  The callback to invoke when the event is emitted\n   */\n\n\n  on(event, callback) {\n    // split the event\n    const events = event.split(/\\W+/);\n    events.forEach(eventName => {\n      if (isUndef(this._events)) {\n        this._events = {};\n      }\n\n      if (!this._events.hasOwnProperty(eventName)) {\n        this._events[eventName] = [];\n      }\n\n      this._events[eventName].push(callback);\n    });\n    return this;\n  }\n  /**\n   * Bind a callback which is only invoked once\n   * @param  event     The name of the event to listen for.\n   * @param  callback  The callback to invoke when the event is emitted\n   */\n\n\n  once(event, callback) {\n    const boundCallback = (...args) => {\n      // invoke the callback\n      callback(...args); // remove the event\n\n      this.off(event, boundCallback);\n    };\n\n    this.on(event, boundCallback);\n    return this;\n  }\n  /**\n   * Remove the event listener.\n   * @param  event     The event to stop listening to.\n   * @param  callback  The callback which was bound to the event with Emitter.on.\n   *                   If no callback is given, all callbacks events are removed.\n   */\n\n\n  off(event, callback) {\n    const events = event.split(/\\W+/);\n    events.forEach(eventName => {\n      if (isUndef(this._events)) {\n        this._events = {};\n      }\n\n      if (this._events.hasOwnProperty(event)) {\n        if (isUndef(callback)) {\n          this._events[event] = [];\n        } else {\n          const eventList = this._events[event];\n\n          for (let i = 0; i < eventList.length; i++) {\n            if (eventList[i] === callback) {\n              eventList.splice(i, 1);\n            }\n          }\n        }\n      }\n    });\n    return this;\n  }\n  /**\n   * Invoke all of the callbacks bound to the event\n   * with any arguments passed in.\n   * @param  event  The name of the event.\n   * @param args The arguments to pass to the functions listening.\n   */\n\n\n  emit(event, ...args) {\n    if (this._events) {\n      if (this._events.hasOwnProperty(event)) {\n        const eventList = this._events[event].slice(0);\n\n        for (let i = 0, len = eventList.length; i < len; i++) {\n          eventList[i].apply(this, args);\n        }\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Add Emitter functions (on/off/emit) to the object\n   */\n\n\n  static mixin(constr) {\n    // instance._events = {};\n    [\"on\", \"once\", \"off\", \"emit\"].forEach(name => {\n      const property = Object.getOwnPropertyDescriptor(Emitter.prototype, name);\n      Object.defineProperty(constr.prototype, name, property);\n    });\n  }\n  /**\n   * Clean up\n   */\n\n\n  dispose() {\n    super.dispose();\n    this._events = undefined;\n    return this;\n  }\n\n}","import { Emitter } from \"../util/Emitter\";\nexport class BaseContext extends Emitter {\n  constructor() {\n    super(...arguments);\n    this.isOffline = false;\n  }\n\n}","import { __awaiter } from \"tslib\";\nimport { Ticker } from \"../clock/Ticker\";\nimport { isAudioContext } from \"../util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined, isString } from \"../util/TypeCheck\";\nimport { createAudioContext, createAudioWorkletNode } from \"./AudioContext\";\nimport { closeContext, initializeContext } from \"./ContextInitialization\";\nimport { BaseContext } from \"./BaseContext\";\nimport { assert } from \"../util/Debug\";\n/**\n * Wrapper around the native AudioContext.\n * @category Core\n */\n\nexport class Context extends BaseContext {\n  constructor() {\n    super();\n    this.name = \"Context\";\n    /**\n     * An object containing all of the constants AudioBufferSourceNodes\n     */\n\n    this._constants = new Map();\n    /**\n     * All of the setTimeout events.\n     */\n\n    this._timeouts = new Timeline();\n    /**\n     * The timeout id counter\n     */\n\n    this._timeoutIds = 0;\n    /**\n     * Private indicator if the context has been initialized\n     */\n\n    this._initialized = false;\n    /**\n     * Indicates if the context is an OfflineAudioContext or an AudioContext\n     */\n\n    this.isOffline = false; //--------------------------------------------\n    // AUDIO WORKLET\n    //--------------------------------------------\n\n    /**\n     * Maps a module name to promise of the addModule method\n     */\n\n    this._workletModules = new Map();\n    const options = optionsFromArguments(Context.getDefaults(), arguments, [\"context\"]);\n\n    if (options.context) {\n      this._context = options.context;\n    } else {\n      this._context = createAudioContext();\n    }\n\n    this._latencyHint = options.latencyHint;\n    this.lookAhead = options.lookAhead;\n    this._ticker = new Ticker(this.emit.bind(this, \"tick\"), options.clockSource, options.updateInterval);\n    this.on(\"tick\", this._timeoutLoop.bind(this)); // fwd events from the context\n\n    this._context.onstatechange = () => {\n      this.emit(\"statechange\", this.state);\n    };\n  }\n\n  static getDefaults() {\n    return {\n      clockSource: \"worker\",\n      latencyHint: \"interactive\",\n      lookAhead: 0.1,\n      updateInterval: 0.05\n    };\n  }\n  /**\n   * Finish setting up the context. **You usually do not need to do this manually.**\n   */\n\n\n  initialize() {\n    if (!this._initialized) {\n      // add any additional modules\n      initializeContext(this);\n      this._initialized = true;\n    }\n\n    return this;\n  } //---------------------------\n  // BASE AUDIO CONTEXT METHODS\n  //---------------------------\n\n\n  createAnalyser() {\n    return this._context.createAnalyser();\n  }\n\n  createOscillator() {\n    return this._context.createOscillator();\n  }\n\n  createBufferSource() {\n    return this._context.createBufferSource();\n  }\n\n  createBiquadFilter() {\n    return this._context.createBiquadFilter();\n  }\n\n  createBuffer(numberOfChannels, length, sampleRate) {\n    return this._context.createBuffer(numberOfChannels, length, sampleRate);\n  }\n\n  createChannelMerger(numberOfInputs) {\n    return this._context.createChannelMerger(numberOfInputs);\n  }\n\n  createChannelSplitter(numberOfOutputs) {\n    return this._context.createChannelSplitter(numberOfOutputs);\n  }\n\n  createConstantSource() {\n    return this._context.createConstantSource();\n  }\n\n  createConvolver() {\n    return this._context.createConvolver();\n  }\n\n  createDelay(maxDelayTime) {\n    return this._context.createDelay(maxDelayTime);\n  }\n\n  createDynamicsCompressor() {\n    return this._context.createDynamicsCompressor();\n  }\n\n  createGain() {\n    return this._context.createGain();\n  }\n\n  createIIRFilter(feedForward, feedback) {\n    // @ts-ignore\n    return this._context.createIIRFilter(feedForward, feedback);\n  }\n\n  createPanner() {\n    return this._context.createPanner();\n  }\n\n  createPeriodicWave(real, imag, constraints) {\n    return this._context.createPeriodicWave(real, imag, constraints);\n  }\n\n  createStereoPanner() {\n    return this._context.createStereoPanner();\n  }\n\n  createWaveShaper() {\n    return this._context.createWaveShaper();\n  }\n\n  createMediaStreamSource(stream) {\n    assert(isAudioContext(this._context), \"Not available if OfflineAudioContext\");\n    const context = this._context;\n    return context.createMediaStreamSource(stream);\n  }\n\n  createMediaStreamDestination() {\n    assert(isAudioContext(this._context), \"Not available if OfflineAudioContext\");\n    const context = this._context;\n    return context.createMediaStreamDestination();\n  }\n\n  decodeAudioData(audioData) {\n    return this._context.decodeAudioData(audioData);\n  }\n  /**\n   * The current time in seconds of the AudioContext.\n   */\n\n\n  get currentTime() {\n    return this._context.currentTime;\n  }\n  /**\n   * The current time in seconds of the AudioContext.\n   */\n\n\n  get state() {\n    return this._context.state;\n  }\n  /**\n   * The current time in seconds of the AudioContext.\n   */\n\n\n  get sampleRate() {\n    return this._context.sampleRate;\n  }\n  /**\n   * The listener\n   */\n\n\n  get listener() {\n    this.initialize();\n    return this._listener;\n  }\n\n  set listener(l) {\n    assert(!this._initialized, \"The listener cannot be set after initialization.\");\n    this._listener = l;\n  }\n  /**\n   * There is only one Transport per Context. It is created on initialization.\n   */\n\n\n  get transport() {\n    this.initialize();\n    return this._transport;\n  }\n\n  set transport(t) {\n    assert(!this._initialized, \"The transport cannot be set after initialization.\");\n    this._transport = t;\n  }\n  /**\n   * This is the Draw object for the context which is useful for synchronizing the draw frame with the Tone.js clock.\n   */\n\n\n  get draw() {\n    this.initialize();\n    return this._draw;\n  }\n\n  set draw(d) {\n    assert(!this._initialized, \"Draw cannot be set after initialization.\");\n    this._draw = d;\n  }\n  /**\n   * A reference to the Context's destination node.\n   */\n\n\n  get destination() {\n    this.initialize();\n    return this._destination;\n  }\n\n  set destination(d) {\n    assert(!this._initialized, \"The destination cannot be set after initialization.\");\n    this._destination = d;\n  }\n  /**\n   * Create an audio worklet node from a name and options. The module\n   * must first be loaded using [[addAudioWorkletModule]].\n   */\n\n\n  createAudioWorkletNode(name, options) {\n    return createAudioWorkletNode(this.rawContext, name, options);\n  }\n  /**\n   * Add an AudioWorkletProcessor module\n   * @param url The url of the module\n   * @param name The name of the module\n   */\n\n\n  addAudioWorkletModule(url, name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      assert(isDefined(this.rawContext.audioWorklet), \"AudioWorkletNode is only available in a secure context (https or localhost)\");\n\n      if (!this._workletModules.has(name)) {\n        this._workletModules.set(name, this.rawContext.audioWorklet.addModule(url));\n      }\n\n      yield this._workletModules.get(name);\n    });\n  }\n  /**\n   * Returns a promise which resolves when all of the worklets have been loaded on this context\n   */\n\n\n  workletsAreReady() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const promises = [];\n\n      this._workletModules.forEach(promise => promises.push(promise));\n\n      yield Promise.all(promises);\n    });\n  } //---------------------------\n  // TICKER\n  //---------------------------\n\n  /**\n   * How often the interval callback is invoked.\n   * This number corresponds to how responsive the scheduling\n   * can be. context.updateInterval + context.lookAhead gives you the\n   * total latency between scheduling an event and hearing it.\n   */\n\n\n  get updateInterval() {\n    return this._ticker.updateInterval;\n  }\n\n  set updateInterval(interval) {\n    this._ticker.updateInterval = interval;\n  }\n  /**\n   * What the source of the clock is, either \"worker\" (default),\n   * \"timeout\", or \"offline\" (none).\n   */\n\n\n  get clockSource() {\n    return this._ticker.type;\n  }\n\n  set clockSource(type) {\n    this._ticker.type = type;\n  }\n  /**\n   * The type of playback, which affects tradeoffs between audio\n   * output latency and responsiveness.\n   * In addition to setting the value in seconds, the latencyHint also\n   * accepts the strings \"interactive\" (prioritizes low latency),\n   * \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n   * latency and performance), and \"fastest\" (lowest latency, might glitch more often).\n   * @example\n   * // set the latencyHint to prioritize smooth playback at the expensive of latency\n   * Tone.context.latencyHint = \"playback\";\n   */\n\n\n  get latencyHint() {\n    return this._latencyHint;\n  }\n\n  set latencyHint(hint) {\n    let lookAheadValue = 0;\n    this._latencyHint = hint;\n\n    if (isString(hint)) {\n      switch (hint) {\n        case \"interactive\":\n          lookAheadValue = 0.1;\n          break;\n\n        case \"playback\":\n          lookAheadValue = 0.8;\n          break;\n\n        case \"balanced\":\n          lookAheadValue = 0.25;\n          break;\n\n        case \"fastest\":\n          lookAheadValue = 0.01;\n          break;\n      }\n    }\n\n    this.lookAhead = lookAheadValue;\n    this.updateInterval = lookAheadValue / 2;\n  }\n  /**\n   * The unwrapped AudioContext.\n   */\n\n\n  get rawContext() {\n    return this._context;\n  }\n  /**\n   * The current audio context time plus a short [[lookAhead]].\n   */\n\n\n  now() {\n    return this._context.currentTime + this.lookAhead;\n  }\n  /**\n   * The current audio context time without the [[lookAhead]].\n   * In most cases it is better to use [[now]] instead of [[immediate]] since\n   * with [[now]] the [[lookAhead]] is applied equally to _all_ components including internal components,\n   * to making sure that everything is scheduled in sync. Mixing [[now]] and [[immediate]]\n   * can cause some timing issues. If no lookAhead is desired, you can set the [[lookAhead]] to `0`.\n   */\n\n\n  immediate() {\n    return this._context.currentTime;\n  }\n  /**\n   * Starts the audio context from a suspended state. This is required\n   * to initially start the AudioContext.\n   */\n\n\n  resume() {\n    if (this._context.state === \"suspended\" && isAudioContext(this._context)) {\n      return this._context.resume();\n    } else {\n      return Promise.resolve();\n    }\n  }\n  /**\n   * Promise which is invoked when the context is running.\n   * Tries to resume the context if it's not started.\n   */\n\n\n  close() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (isAudioContext(this._context)) {\n        yield this._context.close();\n      }\n\n      if (this._initialized) {\n        closeContext(this);\n      }\n    });\n  }\n  /**\n   * Generate a looped buffer at some constant value.\n   */\n\n\n  getConstant(val) {\n    if (this._constants.has(val)) {\n      return this._constants.get(val);\n    } else {\n      const buffer = this._context.createBuffer(1, 128, this._context.sampleRate);\n\n      const arr = buffer.getChannelData(0);\n\n      for (let i = 0; i < arr.length; i++) {\n        arr[i] = val;\n      }\n\n      const constant = this._context.createBufferSource();\n\n      constant.channelCount = 1;\n      constant.channelCountMode = \"explicit\";\n      constant.buffer = buffer;\n      constant.loop = true;\n      constant.start(0);\n\n      this._constants.set(val, constant);\n\n      return constant;\n    }\n  }\n  /**\n   * Clean up. Also closes the audio context.\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._ticker.dispose();\n\n    this._timeouts.dispose();\n\n    Object.keys(this._constants).map(val => this._constants[val].disconnect());\n    return this;\n  } //---------------------------\n  // TIMEOUTS\n  //---------------------------\n\n  /**\n   * The private loop which keeps track of the context scheduled timeouts\n   * Is invoked from the clock source\n   */\n\n\n  _timeoutLoop() {\n    const now = this.now();\n\n    let firstEvent = this._timeouts.peek();\n\n    while (this._timeouts.length && firstEvent && firstEvent.time <= now) {\n      // invoke the callback\n      firstEvent.callback(); // shift the first event off\n\n      this._timeouts.shift(); // get the next one\n\n\n      firstEvent = this._timeouts.peek();\n    }\n  }\n  /**\n   * A setTimeout which is guaranteed by the clock source.\n   * Also runs in the offline context.\n   * @param  fn       The callback to invoke\n   * @param  timeout  The timeout in seconds\n   * @returns ID to use when invoking Context.clearTimeout\n   */\n\n\n  setTimeout(fn, timeout) {\n    this._timeoutIds++;\n    const now = this.now();\n\n    this._timeouts.add({\n      callback: fn,\n      id: this._timeoutIds,\n      time: now + timeout\n    });\n\n    return this._timeoutIds;\n  }\n  /**\n   * Clears a previously scheduled timeout with Tone.context.setTimeout\n   * @param  id  The ID returned from setTimeout\n   */\n\n\n  clearTimeout(id) {\n    this._timeouts.forEach(event => {\n      if (event.id === id) {\n        this._timeouts.remove(event);\n      }\n    });\n\n    return this;\n  }\n  /**\n   * Clear the function scheduled by [[setInterval]]\n   */\n\n\n  clearInterval(id) {\n    return this.clearTimeout(id);\n  }\n  /**\n   * Adds a repeating event to the context's callback clock\n   */\n\n\n  setInterval(fn, interval) {\n    const id = ++this._timeoutIds;\n\n    const intervalFn = () => {\n      const now = this.now();\n\n      this._timeouts.add({\n        callback: () => {\n          // invoke the callback\n          fn(); // invoke the event to repeat it\n\n          intervalFn();\n        },\n        id,\n        time: now + interval\n      });\n    }; // kick it off\n\n\n    intervalFn();\n    return id;\n  }\n\n}","import { isArray } from \"./TypeCheck\";\n/**\n * Make the property not writable using `defineProperty`. Internal use only.\n */\n\nexport function readOnly(target, property) {\n  if (isArray(property)) {\n    property.forEach(str => readOnly(target, str));\n  } else {\n    Object.defineProperty(target, property, {\n      enumerable: true,\n      writable: false\n    });\n  }\n}\n/**\n * Make an attribute writeable. Internal use only.\n */\n\nexport function writable(target, property) {\n  if (isArray(property)) {\n    property.forEach(str => writable(target, str));\n  } else {\n    Object.defineProperty(target, property, {\n      writable: true\n    });\n  }\n}\nexport const noOp = () => {// no operation here!\n};","import { __awaiter } from \"tslib\";\nimport { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { isAudioBuffer } from \"../util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isArray, isNumber, isString } from \"../util/TypeCheck\";\nimport { assert } from \"../util/Debug\";\n/**\n * AudioBuffer loading and storage. ToneAudioBuffer is used internally by all\n * classes that make requests for audio files such as Tone.Player,\n * Tone.Sampler and Tone.Convolver.\n * Aside from load callbacks from individual buffers, ToneAudioBuffer\n * provides events which keep track of the loading progress\n * of _all_ of the buffers. These are ToneAudioBuffer.on(\"load\" / \"progress\" / \"error\")\n * @example\n * const buffer = new Tone.ToneAudioBuffer(\"https://tonejs.github.io/examples/audio/FWDL.mp3\", () => {\n * \tconsole.log(\"loaded\");\n * });\n * @category Core\n */\n\nexport class ToneAudioBuffer extends Tone {\n  constructor() {\n    super();\n    this.name = \"ToneAudioBuffer\";\n    /**\n     * Callback when the buffer is loaded.\n     */\n\n    this.onload = noOp;\n    const options = optionsFromArguments(ToneAudioBuffer.getDefaults(), arguments, [\"url\", \"onload\", \"onerror\"]);\n    this.reverse = options.reverse;\n    this.onload = options.onload;\n\n    if (options.url && isAudioBuffer(options.url) || options.url instanceof ToneAudioBuffer) {\n      this.set(options.url);\n    } else if (isString(options.url)) {\n      // initiate the download\n      this.load(options.url).catch(options.onerror);\n    }\n  }\n\n  static getDefaults() {\n    return {\n      onerror: noOp,\n      onload: noOp,\n      reverse: false\n    };\n  }\n  /**\n   * The sample rate of the AudioBuffer\n   */\n\n\n  get sampleRate() {\n    if (this._buffer) {\n      return this._buffer.sampleRate;\n    } else {\n      return getContext().sampleRate;\n    }\n  }\n  /**\n   * Pass in an AudioBuffer or ToneAudioBuffer to set the value of this buffer.\n   */\n\n\n  set(buffer) {\n    if (buffer instanceof ToneAudioBuffer) {\n      // if it's loaded, set it\n      if (buffer.loaded) {\n        this._buffer = buffer.get();\n      } else {\n        // otherwise when it's loaded, invoke it's callback\n        buffer.onload = () => {\n          this.set(buffer);\n          this.onload(this);\n        };\n      }\n    } else {\n      this._buffer = buffer;\n    } // reverse it initially\n\n\n    if (this._reversed) {\n      this._reverse();\n    }\n\n    return this;\n  }\n  /**\n   * The audio buffer stored in the object.\n   */\n\n\n  get() {\n    return this._buffer;\n  }\n  /**\n   * Makes an fetch request for the selected url then decodes the file as an audio buffer.\n   * Invokes the callback once the audio buffer loads.\n   * @param url The url of the buffer to load. filetype support depends on the browser.\n   * @returns A Promise which resolves with this ToneAudioBuffer\n   */\n\n\n  load(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const doneLoading = ToneAudioBuffer.load(url).then(audioBuffer => {\n        this.set(audioBuffer); // invoke the onload method\n\n        this.onload(this);\n      });\n      ToneAudioBuffer.downloads.push(doneLoading);\n\n      try {\n        yield doneLoading;\n      } finally {\n        // remove the downloaded file\n        const index = ToneAudioBuffer.downloads.indexOf(doneLoading);\n        ToneAudioBuffer.downloads.splice(index, 1);\n      }\n\n      return this;\n    });\n  }\n  /**\n   * clean up\n   */\n\n\n  dispose() {\n    super.dispose();\n    this._buffer = undefined;\n    return this;\n  }\n  /**\n   * Set the audio buffer from the array.\n   * To create a multichannel AudioBuffer, pass in a multidimensional array.\n   * @param array The array to fill the audio buffer\n   */\n\n\n  fromArray(array) {\n    const isMultidimensional = isArray(array) && array[0].length > 0;\n    const channels = isMultidimensional ? array.length : 1;\n    const len = isMultidimensional ? array[0].length : array.length;\n    const context = getContext();\n    const buffer = context.createBuffer(channels, len, context.sampleRate);\n    const multiChannelArray = !isMultidimensional && channels === 1 ? [array] : array;\n\n    for (let c = 0; c < channels; c++) {\n      buffer.copyToChannel(multiChannelArray[c], c);\n    }\n\n    this._buffer = buffer;\n    return this;\n  }\n  /**\n   * Sums multiple channels into 1 channel\n   * @param chanNum Optionally only copy a single channel from the array.\n   */\n\n\n  toMono(chanNum) {\n    if (isNumber(chanNum)) {\n      this.fromArray(this.toArray(chanNum));\n    } else {\n      let outputArray = new Float32Array(this.length);\n      const numChannels = this.numberOfChannels;\n\n      for (let channel = 0; channel < numChannels; channel++) {\n        const channelArray = this.toArray(channel);\n\n        for (let i = 0; i < channelArray.length; i++) {\n          outputArray[i] += channelArray[i];\n        }\n      } // divide by the number of channels\n\n\n      outputArray = outputArray.map(sample => sample / numChannels);\n      this.fromArray(outputArray);\n    }\n\n    return this;\n  }\n  /**\n   * Get the buffer as an array. Single channel buffers will return a 1-dimensional\n   * Float32Array, and multichannel buffers will return multidimensional arrays.\n   * @param channel Optionally only copy a single channel from the array.\n   */\n\n\n  toArray(channel) {\n    if (isNumber(channel)) {\n      return this.getChannelData(channel);\n    } else if (this.numberOfChannels === 1) {\n      return this.toArray(0);\n    } else {\n      const ret = [];\n\n      for (let c = 0; c < this.numberOfChannels; c++) {\n        ret[c] = this.getChannelData(c);\n      }\n\n      return ret;\n    }\n  }\n  /**\n   * Returns the Float32Array representing the PCM audio data for the specific channel.\n   * @param  channel  The channel number to return\n   * @return The audio as a TypedArray\n   */\n\n\n  getChannelData(channel) {\n    if (this._buffer) {\n      return this._buffer.getChannelData(channel);\n    } else {\n      return new Float32Array(0);\n    }\n  }\n  /**\n   * Cut a subsection of the array and return a buffer of the\n   * subsection. Does not modify the original buffer\n   * @param start The time to start the slice\n   * @param end The end time to slice. If none is given will default to the end of the buffer\n   */\n\n\n  slice(start, end = this.duration) {\n    const startSamples = Math.floor(start * this.sampleRate);\n    const endSamples = Math.floor(end * this.sampleRate);\n    assert(startSamples < endSamples, \"The start time must be less than the end time\");\n    const length = endSamples - startSamples;\n    const retBuffer = getContext().createBuffer(this.numberOfChannels, length, this.sampleRate);\n\n    for (let channel = 0; channel < this.numberOfChannels; channel++) {\n      retBuffer.copyToChannel(this.getChannelData(channel).subarray(startSamples, endSamples), channel);\n    }\n\n    return new ToneAudioBuffer(retBuffer);\n  }\n  /**\n   * Reverse the buffer.\n   */\n\n\n  _reverse() {\n    if (this.loaded) {\n      for (let i = 0; i < this.numberOfChannels; i++) {\n        this.getChannelData(i).reverse();\n      }\n    }\n\n    return this;\n  }\n  /**\n   * If the buffer is loaded or not\n   */\n\n\n  get loaded() {\n    return this.length > 0;\n  }\n  /**\n   * The duration of the buffer in seconds.\n   */\n\n\n  get duration() {\n    if (this._buffer) {\n      return this._buffer.duration;\n    } else {\n      return 0;\n    }\n  }\n  /**\n   * The length of the buffer in samples\n   */\n\n\n  get length() {\n    if (this._buffer) {\n      return this._buffer.length;\n    } else {\n      return 0;\n    }\n  }\n  /**\n   * The number of discrete audio channels. Returns 0 if no buffer is loaded.\n   */\n\n\n  get numberOfChannels() {\n    if (this._buffer) {\n      return this._buffer.numberOfChannels;\n    } else {\n      return 0;\n    }\n  }\n  /**\n   * Reverse the buffer.\n   */\n\n\n  get reverse() {\n    return this._reversed;\n  }\n\n  set reverse(rev) {\n    if (this._reversed !== rev) {\n      this._reversed = rev;\n\n      this._reverse();\n    }\n  }\n  /**\n   * Create a ToneAudioBuffer from the array. To create a multichannel AudioBuffer,\n   * pass in a multidimensional array.\n   * @param array The array to fill the audio buffer\n   * @return A ToneAudioBuffer created from the array\n   */\n\n\n  static fromArray(array) {\n    return new ToneAudioBuffer().fromArray(array);\n  }\n  /**\n   * Creates a ToneAudioBuffer from a URL, returns a promise which resolves to a ToneAudioBuffer\n   * @param  url The url to load.\n   * @return A promise which resolves to a ToneAudioBuffer\n   */\n\n\n  static fromUrl(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const buffer = new ToneAudioBuffer();\n      return yield buffer.load(url);\n    });\n  }\n  /**\n   * Loads a url using fetch and returns the AudioBuffer.\n   */\n\n\n  static load(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // test if the url contains multiple extensions\n      const matches = url.match(/\\[(.+\\|?)+\\]$/);\n\n      if (matches) {\n        const extensions = matches[1].split(\"|\");\n        let extension = extensions[0];\n\n        for (const ext of extensions) {\n          if (ToneAudioBuffer.supportsType(ext)) {\n            extension = ext;\n            break;\n          }\n        }\n\n        url = url.replace(matches[0], extension);\n      } // make sure there is a slash between the baseUrl and the url\n\n\n      const baseUrl = ToneAudioBuffer.baseUrl === \"\" || ToneAudioBuffer.baseUrl.endsWith(\"/\") ? ToneAudioBuffer.baseUrl : ToneAudioBuffer.baseUrl + \"/\";\n      const response = yield fetch(baseUrl + url);\n\n      if (!response.ok) {\n        throw new Error(`could not load url: ${url}`);\n      }\n\n      const arrayBuffer = yield response.arrayBuffer();\n      const audioBuffer = yield getContext().decodeAudioData(arrayBuffer);\n      return audioBuffer;\n    });\n  }\n  /**\n   * Checks a url's extension to see if the current browser can play that file type.\n   * @param url The url/extension to test\n   * @return If the file extension can be played\n   * @static\n   * @example\n   * Tone.ToneAudioBuffer.supportsType(\"wav\"); // returns true\n   * Tone.ToneAudioBuffer.supportsType(\"path/to/file.wav\"); // returns true\n   */\n\n\n  static supportsType(url) {\n    const extensions = url.split(\".\");\n    const extension = extensions[extensions.length - 1];\n    const response = document.createElement(\"audio\").canPlayType(\"audio/\" + extension);\n    return response !== \"\";\n  }\n  /**\n   * Returns a Promise which resolves when all of the buffers have loaded\n   */\n\n\n  static loaded() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // this makes sure that the function is always async\n      yield Promise.resolve();\n\n      while (ToneAudioBuffer.downloads.length) {\n        yield ToneAudioBuffer.downloads[0];\n      }\n    });\n  }\n\n} //-------------------------------------\n// STATIC METHODS\n//-------------------------------------\n\n/**\n * A path which is prefixed before every url.\n */\n\nToneAudioBuffer.baseUrl = \"\";\n/**\n * All of the downloads\n */\n\nToneAudioBuffer.downloads = [];","import { __awaiter } from \"tslib\";\nimport { createOfflineAudioContext } from \"../context/AudioContext\";\nimport { Context } from \"../context/Context\";\nimport { isOfflineAudioContext } from \"../util/AdvancedTypeCheck\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\n/**\n * Wrapper around the OfflineAudioContext\n * @category Core\n * @example\n * // generate a single channel, 0.5 second buffer\n * const context = new Tone.OfflineContext(1, 0.5);\n * const osc = new Tone.Oscillator({ context });\n * context.render().then(buffer => {\n * \tconsole.log(buffer.numberOfChannels, buffer.duration);\n * });\n */\n\nexport class OfflineContext extends Context {\n  constructor() {\n    super({\n      clockSource: \"offline\",\n      context: isOfflineAudioContext(arguments[0]) ? arguments[0] : createOfflineAudioContext(arguments[0], arguments[1] * arguments[2], arguments[2]),\n      lookAhead: 0,\n      updateInterval: isOfflineAudioContext(arguments[0]) ? 128 / arguments[0].sampleRate : 128 / arguments[2]\n    });\n    this.name = \"OfflineContext\";\n    /**\n     * An artificial clock source\n     */\n\n    this._currentTime = 0;\n    this.isOffline = true;\n    this._duration = isOfflineAudioContext(arguments[0]) ? arguments[0].length / arguments[0].sampleRate : arguments[1];\n  }\n  /**\n   * Override the now method to point to the internal clock time\n   */\n\n\n  now() {\n    return this._currentTime;\n  }\n  /**\n   * Same as this.now()\n   */\n\n\n  get currentTime() {\n    return this._currentTime;\n  }\n  /**\n   * Render just the clock portion of the audio context.\n   */\n\n\n  _renderClock(asynchronous) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let index = 0;\n\n      while (this._duration - this._currentTime >= 0) {\n        // invoke all the callbacks on that time\n        this.emit(\"tick\"); // increment the clock in block-sized chunks\n\n        this._currentTime += 128 / this.sampleRate; // yield once a second of audio\n\n        index++;\n        const yieldEvery = Math.floor(this.sampleRate / 128);\n\n        if (asynchronous && index % yieldEvery === 0) {\n          yield new Promise(done => setTimeout(done, 1));\n        }\n      }\n    });\n  }\n  /**\n   * Render the output of the OfflineContext\n   * @param asynchronous If the clock should be rendered asynchronously, which will not block the main thread, but be slightly slower.\n   */\n\n\n  render(asynchronous = true) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.workletsAreReady();\n      yield this._renderClock(asynchronous);\n      const buffer = yield this._context.startRendering();\n      return new ToneAudioBuffer(buffer);\n    });\n  }\n  /**\n   * Close the context\n   */\n\n\n  close() {\n    return Promise.resolve();\n  }\n\n}","import { version } from \"../version\";\nimport { hasAudioContext, theWindow } from \"./context/AudioContext\";\nimport { Context } from \"./context/Context\";\nimport { DummyContext } from \"./context/DummyContext\";\nimport { OfflineContext } from \"./context/OfflineContext\";\nimport { isAudioContext, isOfflineAudioContext } from \"./util/AdvancedTypeCheck\";\n/**\n * This dummy context is used to avoid throwing immediate errors when importing in Node.js\n */\n\nconst dummyContext = new DummyContext();\n/**\n * The global audio context which is getable and assignable through\n * getContext and setContext\n */\n\nlet globalContext = dummyContext;\n/**\n * Returns the default system-wide [[Context]]\n * @category Core\n */\n\nexport function getContext() {\n  if (globalContext === dummyContext && hasAudioContext) {\n    setContext(new Context());\n  }\n\n  return globalContext;\n}\n/**\n * Set the default audio context\n * @category Core\n */\n\nexport function setContext(context) {\n  if (isAudioContext(context)) {\n    globalContext = new Context(context);\n  } else if (isOfflineAudioContext(context)) {\n    globalContext = new OfflineContext(context);\n  } else {\n    globalContext = context;\n  }\n}\n/**\n * Most browsers will not play _any_ audio until a user\n * clicks something (like a play button). Invoke this method\n * on a click or keypress event handler to start the audio context.\n * More about the Autoplay policy\n * [here](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio)\n * @example\n * document.querySelector(\"button\").addEventListener(\"click\", async () => {\n * \tawait Tone.start();\n * \tconsole.log(\"context started\");\n * });\n * @category Core\n */\n\nexport function start() {\n  return globalContext.resume();\n}\n/**\n * Log Tone.js + version in the console.\n */\n\nif (theWindow && !theWindow.TONE_SILENCE_LOGGING) {\n  let prefix = \"v\";\n\n  if (version === \"dev\") {\n    prefix = \"\";\n  }\n\n  const printString = ` * Tone.js ${prefix}${version} * `; // eslint-disable-next-line no-console\n\n  console.log(`%c${printString}`, \"background: #000; color: #fff\");\n}","import { __awaiter } from \"tslib\";\nimport { BaseContext } from \"./BaseContext\";\nexport class DummyContext extends BaseContext {\n  constructor() {\n    super(...arguments);\n    this.lookAhead = 0;\n    this.latencyHint = 0;\n    this.isOffline = false;\n  } //---------------------------\n  // BASE AUDIO CONTEXT METHODS\n  //---------------------------\n\n\n  createAnalyser() {\n    return {};\n  }\n\n  createOscillator() {\n    return {};\n  }\n\n  createBufferSource() {\n    return {};\n  }\n\n  createBiquadFilter() {\n    return {};\n  }\n\n  createBuffer(_numberOfChannels, _length, _sampleRate) {\n    return {};\n  }\n\n  createChannelMerger(_numberOfInputs) {\n    return {};\n  }\n\n  createChannelSplitter(_numberOfOutputs) {\n    return {};\n  }\n\n  createConstantSource() {\n    return {};\n  }\n\n  createConvolver() {\n    return {};\n  }\n\n  createDelay(_maxDelayTime) {\n    return {};\n  }\n\n  createDynamicsCompressor() {\n    return {};\n  }\n\n  createGain() {\n    return {};\n  }\n\n  createIIRFilter(_feedForward, _feedback) {\n    return {};\n  }\n\n  createPanner() {\n    return {};\n  }\n\n  createPeriodicWave(_real, _imag, _constraints) {\n    return {};\n  }\n\n  createStereoPanner() {\n    return {};\n  }\n\n  createWaveShaper() {\n    return {};\n  }\n\n  createMediaStreamSource(_stream) {\n    return {};\n  }\n\n  createMediaStreamDestination() {\n    return {};\n  }\n\n  decodeAudioData(_audioData) {\n    return Promise.resolve({});\n  } //---------------------------\n  // TONE AUDIO CONTEXT METHODS\n  //---------------------------\n\n\n  createAudioWorkletNode(_name, _options) {\n    return {};\n  }\n\n  get rawContext() {\n    return {};\n  }\n\n  addAudioWorkletModule(_url, _name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return Promise.resolve();\n    });\n  }\n\n  resume() {\n    return Promise.resolve();\n  }\n\n  setTimeout(_fn, _timeout) {\n    return 0;\n  }\n\n  clearTimeout(_id) {\n    return this;\n  }\n\n  setInterval(_fn, _interval) {\n    return 0;\n  }\n\n  clearInterval(_id) {\n    return this;\n  }\n\n  getConstant(_val) {\n    return {};\n  }\n\n  get currentTime() {\n    return 0;\n  }\n\n  get state() {\n    return {};\n  }\n\n  get sampleRate() {\n    return 0;\n  }\n\n  get listener() {\n    return {};\n  }\n\n  get transport() {\n    return {};\n  }\n\n  get draw() {\n    return {};\n  }\n\n  set draw(_d) {}\n\n  get destination() {\n    return {};\n  }\n\n  set destination(_d) {}\n\n  now() {\n    return 0;\n  }\n\n  immediate() {\n    return 0;\n  }\n\n}","/**\n * Equal power gain scale. Good for cross-fading.\n * @param  percent (0-1)\n */\nexport function equalPowerScale(percent) {\n  const piFactor = 0.5 * Math.PI;\n  return Math.sin(percent * piFactor);\n}\n/**\n * Convert decibels into gain.\n */\n\nexport function dbToGain(db) {\n  return Math.pow(10, db / 20);\n}\n/**\n * Convert gain to decibels.\n */\n\nexport function gainToDb(gain) {\n  return 20 * (Math.log(gain) / Math.LN10);\n}\n/**\n * Convert an interval (in semitones) to a frequency ratio.\n * @param interval the number of semitones above the base note\n * @example\n * Tone.intervalToFrequencyRatio(0); // 1\n * Tone.intervalToFrequencyRatio(12); // 2\n * Tone.intervalToFrequencyRatio(-12); // 0.5\n */\n\nexport function intervalToFrequencyRatio(interval) {\n  return Math.pow(2, interval / 12);\n}\n/**\n * The Global [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n * to generate all the other pitch values from notes. A4's values in Hertz.\n */\n\nlet A4 = 440;\nexport function getA4() {\n  return A4;\n}\nexport function setA4(freq) {\n  A4 = freq;\n}\n/**\n * Convert a frequency value to a MIDI note.\n * @param frequency The value to frequency value to convert.\n * @example\n * Tone.ftom(440); // returns 69\n */\n\nexport function ftom(frequency) {\n  return Math.round(ftomf(frequency));\n}\n/**\n * Convert a frequency to a floating point midi value\n */\n\nexport function ftomf(frequency) {\n  return 69 + 12 * Math.log2(frequency / A4);\n}\n/**\n * Convert a MIDI note to frequency value.\n * @param  midi The midi number to convert.\n * @return The corresponding frequency value\n * @example\n * Tone.mtof(69); // 440\n */\n\nexport function mtof(midi) {\n  return A4 * Math.pow(2, (midi - 69) / 12);\n}","import { Tone } from \"../Tone\";\nimport { isDefined, isObject, isString, isUndef } from \"../util/TypeCheck\";\n/**\n * TimeBase is a flexible encoding of time which can be evaluated to and from a string.\n */\n\nexport class TimeBaseClass extends Tone {\n  /**\n   * @param context The context associated with the time value. Used to compute\n   * Transport and context-relative timing.\n   * @param  value  The time value as a number, string or object\n   * @param  units  Unit values\n   */\n  constructor(context, value, units) {\n    super();\n    /**\n     * The default units\n     */\n\n    this.defaultUnits = \"s\";\n    this._val = value;\n    this._units = units;\n    this.context = context;\n    this._expressions = this._getExpressions();\n  }\n  /**\n   * All of the time encoding expressions\n   */\n\n\n  _getExpressions() {\n    return {\n      hz: {\n        method: value => {\n          return this._frequencyToUnits(parseFloat(value));\n        },\n        regexp: /^(\\d+(?:\\.\\d+)?)hz$/i\n      },\n      i: {\n        method: value => {\n          return this._ticksToUnits(parseInt(value, 10));\n        },\n        regexp: /^(\\d+)i$/i\n      },\n      m: {\n        method: value => {\n          return this._beatsToUnits(parseInt(value, 10) * this._getTimeSignature());\n        },\n        regexp: /^(\\d+)m$/i\n      },\n      n: {\n        method: (value, dot) => {\n          const numericValue = parseInt(value, 10);\n          const scalar = dot === \".\" ? 1.5 : 1;\n\n          if (numericValue === 1) {\n            return this._beatsToUnits(this._getTimeSignature()) * scalar;\n          } else {\n            return this._beatsToUnits(4 / numericValue) * scalar;\n          }\n        },\n        regexp: /^(\\d+)n(\\.?)$/i\n      },\n      number: {\n        method: value => {\n          return this._expressions[this.defaultUnits].method.call(this, value);\n        },\n        regexp: /^(\\d+(?:\\.\\d+)?)$/\n      },\n      s: {\n        method: value => {\n          return this._secondsToUnits(parseFloat(value));\n        },\n        regexp: /^(\\d+(?:\\.\\d+)?)s$/\n      },\n      samples: {\n        method: value => {\n          return parseInt(value, 10) / this.context.sampleRate;\n        },\n        regexp: /^(\\d+)samples$/\n      },\n      t: {\n        method: value => {\n          const numericValue = parseInt(value, 10);\n          return this._beatsToUnits(8 / (Math.floor(numericValue) * 3));\n        },\n        regexp: /^(\\d+)t$/i\n      },\n      tr: {\n        method: (m, q, s) => {\n          let total = 0;\n\n          if (m && m !== \"0\") {\n            total += this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n          }\n\n          if (q && q !== \"0\") {\n            total += this._beatsToUnits(parseFloat(q));\n          }\n\n          if (s && s !== \"0\") {\n            total += this._beatsToUnits(parseFloat(s) / 4);\n          }\n\n          return total;\n        },\n        regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?$/\n      }\n    };\n  } //-------------------------------------\n  // \tVALUE OF\n  //-------------------------------------\n\n  /**\n   * Evaluate the time value. Returns the time in seconds.\n   */\n\n\n  valueOf() {\n    if (this._val instanceof TimeBaseClass) {\n      this.fromType(this._val);\n    }\n\n    if (isUndef(this._val)) {\n      return this._noArg();\n    } else if (isString(this._val) && isUndef(this._units)) {\n      for (const units in this._expressions) {\n        if (this._expressions[units].regexp.test(this._val.trim())) {\n          this._units = units;\n          break;\n        }\n      }\n    } else if (isObject(this._val)) {\n      let total = 0;\n\n      for (const typeName in this._val) {\n        if (isDefined(this._val[typeName])) {\n          const quantity = this._val[typeName]; // @ts-ignore\n\n          const time = new this.constructor(this.context, typeName).valueOf() * quantity;\n          total += time;\n        }\n      }\n\n      return total;\n    }\n\n    if (isDefined(this._units)) {\n      const expr = this._expressions[this._units];\n\n      const matching = this._val.toString().trim().match(expr.regexp);\n\n      if (matching) {\n        return expr.method.apply(this, matching.slice(1));\n      } else {\n        return expr.method.call(this, this._val);\n      }\n    } else if (isString(this._val)) {\n      return parseFloat(this._val);\n    } else {\n      return this._val;\n    }\n  } //-------------------------------------\n  // \tUNIT CONVERSIONS\n  //-------------------------------------\n\n  /**\n   * Returns the value of a frequency in the current units\n   */\n\n\n  _frequencyToUnits(freq) {\n    return 1 / freq;\n  }\n  /**\n   * Return the value of the beats in the current units\n   */\n\n\n  _beatsToUnits(beats) {\n    return 60 / this._getBpm() * beats;\n  }\n  /**\n   * Returns the value of a second in the current units\n   */\n\n\n  _secondsToUnits(seconds) {\n    return seconds;\n  }\n  /**\n   * Returns the value of a tick in the current time units\n   */\n\n\n  _ticksToUnits(ticks) {\n    return ticks * this._beatsToUnits(1) / this._getPPQ();\n  }\n  /**\n   * With no arguments, return 'now'\n   */\n\n\n  _noArg() {\n    return this._now();\n  } //-------------------------------------\n  // \tTEMPO CONVERSIONS\n  //-------------------------------------\n\n  /**\n   * Return the bpm\n   */\n\n\n  _getBpm() {\n    return this.context.transport.bpm.value;\n  }\n  /**\n   * Return the timeSignature\n   */\n\n\n  _getTimeSignature() {\n    return this.context.transport.timeSignature;\n  }\n  /**\n   * Return the PPQ or 192 if Transport is not available\n   */\n\n\n  _getPPQ() {\n    return this.context.transport.PPQ;\n  } //-------------------------------------\n  // \tCONVERSION INTERFACE\n  //-------------------------------------\n\n  /**\n   * Coerce a time type into this units type.\n   * @param type Any time type units\n   */\n\n\n  fromType(type) {\n    this._units = undefined;\n\n    switch (this.defaultUnits) {\n      case \"s\":\n        this._val = type.toSeconds();\n        break;\n\n      case \"i\":\n        this._val = type.toTicks();\n        break;\n\n      case \"hz\":\n        this._val = type.toFrequency();\n        break;\n\n      case \"midi\":\n        this._val = type.toMidi();\n        break;\n    }\n\n    return this;\n  }\n  /**\n   * Return the value in hertz\n   */\n\n\n  toFrequency() {\n    return 1 / this.toSeconds();\n  }\n  /**\n   * Return the time in samples\n   */\n\n\n  toSamples() {\n    return this.toSeconds() * this.context.sampleRate;\n  }\n  /**\n   * Return the time in milliseconds.\n   */\n\n\n  toMilliseconds() {\n    return this.toSeconds() * 1000;\n  }\n\n}","import { getContext } from \"../Global\";\nimport { ftom } from \"./Conversions\";\nimport { TimeBaseClass } from \"./TimeBase\";\n/**\n * TimeClass is a primitive type for encoding and decoding Time values.\n * TimeClass can be passed into the parameter of any method which takes time as an argument.\n * @param  val    The time value.\n * @param  units  The units of the value.\n * @example\n * const time = Tone.Time(\"4n\"); // a quarter note\n * @category Unit\n */\n\nexport class TimeClass extends TimeBaseClass {\n  constructor() {\n    super(...arguments);\n    this.name = \"TimeClass\";\n  }\n\n  _getExpressions() {\n    return Object.assign(super._getExpressions(), {\n      now: {\n        method: capture => {\n          return this._now() + new this.constructor(this.context, capture).valueOf();\n        },\n        regexp: /^\\+(.+)/\n      },\n      quantize: {\n        method: capture => {\n          const quantTo = new TimeClass(this.context, capture).valueOf();\n          return this._secondsToUnits(this.context.transport.nextSubdivision(quantTo));\n        },\n        regexp: /^@(.+)/\n      }\n    });\n  }\n  /**\n   * Quantize the time by the given subdivision. Optionally add a\n   * percentage which will move the time value towards the ideal\n   * quantized value by that percentage.\n   * @param  subdiv    The subdivision to quantize to\n   * @param  percent  Move the time value towards the quantized value by a percentage.\n   * @example\n   * Tone.Time(21).quantize(2); // returns 22\n   * Tone.Time(0.6).quantize(\"4n\", 0.5); // returns 0.55\n   */\n\n\n  quantize(subdiv, percent = 1) {\n    const subdivision = new this.constructor(this.context, subdiv).valueOf();\n    const value = this.valueOf();\n    const multiple = Math.round(value / subdivision);\n    const ideal = multiple * subdivision;\n    const diff = ideal - value;\n    return value + diff * percent;\n  } //-------------------------------------\n  // CONVERSIONS\n  //-------------------------------------\n\n  /**\n   * Convert a Time to Notation. The notation values are will be the\n   * closest representation between 1m to 128th note.\n   * @return {Notation}\n   * @example\n   * // if the Transport is at 120bpm:\n   * Tone.Time(2).toNotation(); // returns \"1m\"\n   */\n\n\n  toNotation() {\n    const time = this.toSeconds();\n    const testNotations = [\"1m\"];\n\n    for (let power = 1; power < 9; power++) {\n      const subdiv = Math.pow(2, power);\n      testNotations.push(subdiv + \"n.\");\n      testNotations.push(subdiv + \"n\");\n      testNotations.push(subdiv + \"t\");\n    }\n\n    testNotations.push(\"0\"); // find the closets notation representation\n\n    let closest = testNotations[0];\n    let closestSeconds = new TimeClass(this.context, testNotations[0]).toSeconds();\n    testNotations.forEach(notation => {\n      const notationSeconds = new TimeClass(this.context, notation).toSeconds();\n\n      if (Math.abs(notationSeconds - time) < Math.abs(closestSeconds - time)) {\n        closest = notation;\n        closestSeconds = notationSeconds;\n      }\n    });\n    return closest;\n  }\n  /**\n   * Return the time encoded as Bars:Beats:Sixteenths.\n   */\n\n\n  toBarsBeatsSixteenths() {\n    const quarterTime = this._beatsToUnits(1);\n\n    let quarters = this.valueOf() / quarterTime;\n    quarters = parseFloat(quarters.toFixed(4));\n    const measures = Math.floor(quarters / this._getTimeSignature());\n    let sixteenths = quarters % 1 * 4;\n    quarters = Math.floor(quarters) % this._getTimeSignature();\n    const sixteenthString = sixteenths.toString();\n\n    if (sixteenthString.length > 3) {\n      // the additional parseFloat removes insignificant trailing zeroes\n      sixteenths = parseFloat(parseFloat(sixteenthString).toFixed(3));\n    }\n\n    const progress = [measures, quarters, sixteenths];\n    return progress.join(\":\");\n  }\n  /**\n   * Return the time in ticks.\n   */\n\n\n  toTicks() {\n    const quarterTime = this._beatsToUnits(1);\n\n    const quarters = this.valueOf() / quarterTime;\n    return Math.round(quarters * this._getPPQ());\n  }\n  /**\n   * Return the time in seconds.\n   */\n\n\n  toSeconds() {\n    return this.valueOf();\n  }\n  /**\n   * Return the value as a midi note.\n   */\n\n\n  toMidi() {\n    return ftom(this.toFrequency());\n  }\n\n  _now() {\n    return this.context.now();\n  }\n\n}\n/**\n * Create a TimeClass from a time string or number.\n * @param value A value which reprsents time\n * @param units The value's units if they can't be inferred by the value.\n * @category Unit\n */\n\nexport function Time(value, units) {\n  return new TimeClass(getContext(), value, units);\n}","import { getContext } from \"../Global\";\nimport { intervalToFrequencyRatio, mtof } from \"./Conversions\";\nimport { ftom, getA4, setA4 } from \"./Conversions\";\nimport { TimeClass } from \"./Time\";\n/**\n * Frequency is a primitive type for encoding Frequency values.\n * Eventually all time values are evaluated to hertz using the `eval` method.\n * @example\n * Tone.Frequency(\"C3\"); // 261\n * Tone.Frequency(38, \"midi\");\n * Tone.Frequency(\"C3\").transpose(4);\n * @category Unit\n */\n\nexport class FrequencyClass extends TimeClass {\n  constructor() {\n    super(...arguments);\n    this.name = \"Frequency\";\n    this.defaultUnits = \"hz\";\n  }\n  /**\n   * The [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n   * to generate all the other pitch values from notes. A4's values in Hertz.\n   */\n\n\n  static get A4() {\n    return getA4();\n  }\n\n  static set A4(freq) {\n    setA4(freq);\n  } //-------------------------------------\n  // \tAUGMENT BASE EXPRESSIONS\n  //-------------------------------------\n\n\n  _getExpressions() {\n    return Object.assign({}, super._getExpressions(), {\n      midi: {\n        regexp: /^(\\d+(?:\\.\\d+)?midi)/,\n\n        method(value) {\n          if (this.defaultUnits === \"midi\") {\n            return value;\n          } else {\n            return FrequencyClass.mtof(value);\n          }\n        }\n\n      },\n      note: {\n        regexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n\n        method(pitch, octave) {\n          const index = noteToScaleIndex[pitch.toLowerCase()];\n          const noteNumber = index + (parseInt(octave, 10) + 1) * 12;\n\n          if (this.defaultUnits === \"midi\") {\n            return noteNumber;\n          } else {\n            return FrequencyClass.mtof(noteNumber);\n          }\n        }\n\n      },\n      tr: {\n        regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\n        method(m, q, s) {\n          let total = 1;\n\n          if (m && m !== \"0\") {\n            total *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n          }\n\n          if (q && q !== \"0\") {\n            total *= this._beatsToUnits(parseFloat(q));\n          }\n\n          if (s && s !== \"0\") {\n            total *= this._beatsToUnits(parseFloat(s) / 4);\n          }\n\n          return total;\n        }\n\n      }\n    });\n  } //-------------------------------------\n  // \tEXPRESSIONS\n  //-------------------------------------\n\n  /**\n   * Transposes the frequency by the given number of semitones.\n   * @return  A new transposed frequency\n   * @example\n   * Tone.Frequency(\"A4\").transpose(3); // \"C5\"\n   */\n\n\n  transpose(interval) {\n    return new FrequencyClass(this.context, this.valueOf() * intervalToFrequencyRatio(interval));\n  }\n  /**\n   * Takes an array of semitone intervals and returns\n   * an array of frequencies transposed by those intervals.\n   * @return  Returns an array of Frequencies\n   * @example\n   * Tone.Frequency(\"A4\").harmonize([0, 3, 7]); // [\"A4\", \"C5\", \"E5\"]\n   */\n\n\n  harmonize(intervals) {\n    return intervals.map(interval => {\n      return this.transpose(interval);\n    });\n  } //-------------------------------------\n  // \tUNIT CONVERSIONS\n  //-------------------------------------\n\n  /**\n   * Return the value of the frequency as a MIDI note\n   * @example\n   * Tone.Frequency(\"C4\").toMidi(); // 60\n   */\n\n\n  toMidi() {\n    return ftom(this.valueOf());\n  }\n  /**\n   * Return the value of the frequency in Scientific Pitch Notation\n   * @example\n   * Tone.Frequency(69, \"midi\").toNote(); // \"A4\"\n   */\n\n\n  toNote() {\n    const freq = this.toFrequency();\n    const log = Math.log2(freq / FrequencyClass.A4);\n    let noteNumber = Math.round(12 * log) + 57;\n    const octave = Math.floor(noteNumber / 12);\n\n    if (octave < 0) {\n      noteNumber += -12 * octave;\n    }\n\n    const noteName = scaleIndexToNote[noteNumber % 12];\n    return noteName + octave.toString();\n  }\n  /**\n   * Return the duration of one cycle in seconds.\n   */\n\n\n  toSeconds() {\n    return 1 / super.toSeconds();\n  }\n  /**\n   * Return the duration of one cycle in ticks\n   */\n\n\n  toTicks() {\n    const quarterTime = this._beatsToUnits(1);\n\n    const quarters = this.valueOf() / quarterTime;\n    return Math.floor(quarters * this._getPPQ());\n  } //-------------------------------------\n  // \tUNIT CONVERSIONS HELPERS\n  //-------------------------------------\n\n  /**\n   * With no arguments, return 0\n   */\n\n\n  _noArg() {\n    return 0;\n  }\n  /**\n   * Returns the value of a frequency in the current units\n   */\n\n\n  _frequencyToUnits(freq) {\n    return freq;\n  }\n  /**\n   * Returns the value of a tick in the current time units\n   */\n\n\n  _ticksToUnits(ticks) {\n    return 1 / (ticks * 60 / (this._getBpm() * this._getPPQ()));\n  }\n  /**\n   * Return the value of the beats in the current units\n   */\n\n\n  _beatsToUnits(beats) {\n    return 1 / super._beatsToUnits(beats);\n  }\n  /**\n   * Returns the value of a second in the current units\n   */\n\n\n  _secondsToUnits(seconds) {\n    return 1 / seconds;\n  }\n  /**\n   * Convert a MIDI note to frequency value.\n   * @param  midi The midi number to convert.\n   * @return The corresponding frequency value\n   */\n\n\n  static mtof(midi) {\n    return mtof(midi);\n  }\n  /**\n   * Convert a frequency value to a MIDI note.\n   * @param frequency The value to frequency value to convert.\n   */\n\n\n  static ftom(frequency) {\n    return ftom(frequency);\n  }\n\n} //-------------------------------------\n// \tFREQUENCY CONVERSIONS\n//-------------------------------------\n\n/**\n * Note to scale index.\n * @hidden\n */\n\nconst noteToScaleIndex = {\n  cbb: -2,\n  cb: -1,\n  c: 0,\n  \"c#\": 1,\n  cx: 2,\n  dbb: 0,\n  db: 1,\n  d: 2,\n  \"d#\": 3,\n  dx: 4,\n  ebb: 2,\n  eb: 3,\n  e: 4,\n  \"e#\": 5,\n  ex: 6,\n  fbb: 3,\n  fb: 4,\n  f: 5,\n  \"f#\": 6,\n  fx: 7,\n  gbb: 5,\n  gb: 6,\n  g: 7,\n  \"g#\": 8,\n  gx: 9,\n  abb: 7,\n  ab: 8,\n  a: 9,\n  \"a#\": 10,\n  ax: 11,\n  bbb: 9,\n  bb: 10,\n  b: 11,\n  \"b#\": 12,\n  bx: 13\n};\n/**\n * scale index to note (sharps)\n * @hidden\n */\n\nconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n */\n\nexport function Frequency(value, units) {\n  return new FrequencyClass(getContext(), value, units);\n}","import { getContext } from \"../Global\";\nimport { TimeClass } from \"./Time\";\n/**\n * TransportTime is a the time along the Transport's\n * timeline. It is similar to Tone.Time, but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n * @category Unit\n */\n\nexport class TransportTimeClass extends TimeClass {\n  constructor() {\n    super(...arguments);\n    this.name = \"TransportTime\";\n  }\n  /**\n   * Return the current time in whichever context is relevant\n   */\n\n\n  _now() {\n    return this.context.transport.seconds;\n  }\n\n}\n/**\n * TransportTime is a the time along the Transport's\n * timeline. It is similar to [[Time]], but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n * @category Unit\n */\n\nexport function TransportTime(value, units) {\n  return new TransportTimeClass(getContext(), value, units);\n}","import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { FrequencyClass } from \"../type/Frequency\";\nimport { TimeClass } from \"../type/Time\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport { getDefaultsFromInstance, optionsFromArguments } from \"../util/Defaults\";\nimport { isArray, isBoolean, isDefined, isNumber, isString, isUndef } from \"../util/TypeCheck\";\n/**\n * The Base class for all nodes that have an AudioContext.\n */\n\nexport class ToneWithContext extends Tone {\n  constructor() {\n    super();\n    const options = optionsFromArguments(ToneWithContext.getDefaults(), arguments, [\"context\"]);\n\n    if (this.defaultContext) {\n      this.context = this.defaultContext;\n    } else {\n      this.context = options.context;\n    }\n  }\n\n  static getDefaults() {\n    return {\n      context: getContext()\n    };\n  }\n  /**\n   * Return the current time of the Context clock plus the lookAhead.\n   * @example\n   * setInterval(() => {\n   * \tconsole.log(Tone.now());\n   * }, 100)\n   */\n\n\n  now() {\n    return this.context.currentTime + this.context.lookAhead;\n  }\n  /**\n   * Return the current time of the Context clock without any lookAhead.\n   * @example\n   * setInterval(() => {\n   * \tconsole.log(Tone.immediate());\n   * }, 100)\n   */\n\n\n  immediate() {\n    return this.context.currentTime;\n  }\n  /**\n   * The duration in seconds of one sample.\n   * @example\n   * console.log(Tone.Transport.sampleTime);\n   */\n\n\n  get sampleTime() {\n    return 1 / this.context.sampleRate;\n  }\n  /**\n   * The number of seconds of 1 processing block (128 samples)\n   * @example\n   * console.log(Tone.Destination.blockTime);\n   */\n\n\n  get blockTime() {\n    return 128 / this.context.sampleRate;\n  }\n  /**\n   * Convert the incoming time to seconds\n   * @example\n   * const gain = new Tone.Gain();\n   * console.log(gain.toSeconds(\"4n\"));\n   */\n\n\n  toSeconds(time) {\n    return new TimeClass(this.context, time).toSeconds();\n  }\n  /**\n   * Convert the input to a frequency number\n   * @example\n   * const gain = new Tone.Gain();\n   * console.log(gain.toFrequency(\"4n\"));\n   */\n\n\n  toFrequency(freq) {\n    return new FrequencyClass(this.context, freq).toFrequency();\n  }\n  /**\n   * Convert the input time into ticks\n   * @example\n   * const gain = new Tone.Gain();\n   * console.log(gain.toTicks(\"4n\"));\n   */\n\n\n  toTicks(time) {\n    return new TransportTimeClass(this.context, time).toTicks();\n  } //-------------------------------------\n  // \tGET/SET\n  //-------------------------------------\n\n  /**\n   * Get a subset of the properties which are in the partial props\n   */\n\n\n  _getPartialProperties(props) {\n    const options = this.get(); // remove attributes from the prop that are not in the partial\n\n    Object.keys(options).forEach(name => {\n      if (isUndef(props[name])) {\n        delete options[name];\n      }\n    });\n    return options;\n  }\n  /**\n   * Get the object's attributes.\n   * @example\n   * const osc = new Tone.Oscillator();\n   * console.log(osc.get());\n   */\n\n\n  get() {\n    const defaults = getDefaultsFromInstance(this);\n    Object.keys(defaults).forEach(attribute => {\n      if (Reflect.has(this, attribute)) {\n        const member = this[attribute];\n\n        if (isDefined(member) && isDefined(member.value) && isDefined(member.setValueAtTime)) {\n          defaults[attribute] = member.value;\n        } else if (member instanceof ToneWithContext) {\n          defaults[attribute] = member._getPartialProperties(defaults[attribute]); // otherwise make sure it's a serializable type\n        } else if (isArray(member) || isNumber(member) || isString(member) || isBoolean(member)) {\n          defaults[attribute] = member;\n        } else {\n          // remove all undefined and unserializable attributes\n          delete defaults[attribute];\n        }\n      }\n    });\n    return defaults;\n  }\n  /**\n   * Set multiple properties at once with an object.\n   * @example\n   * const filter = new Tone.Filter();\n   * // set values using an object\n   * filter.set({\n   * \tfrequency: 300,\n   * \ttype: \"highpass\"\n   * });\n   */\n\n\n  set(props) {\n    Object.keys(props).forEach(attribute => {\n      if (Reflect.has(this, attribute) && isDefined(this[attribute])) {\n        if (this[attribute] && isDefined(this[attribute].value) && isDefined(this[attribute].setValueAtTime)) {\n          // small optimization\n          if (this[attribute].value !== props[attribute]) {\n            this[attribute].value = props[attribute];\n          }\n        } else if (this[attribute] instanceof ToneWithContext) {\n          this[attribute].set(props[attribute]);\n        } else {\n          this[attribute] = props[attribute];\n        }\n      }\n    });\n    return this;\n  }\n\n}","import { Timeline } from \"./Timeline\";\nimport { assertRange } from \"./Debug\";\n/**\n * A Timeline State. Provides the methods: `setStateAtTime(\"state\", time)` and `getValueAtTime(time)`\n * @param initial The initial state of the StateTimeline.  Defaults to `undefined`\n */\n\nexport class StateTimeline extends Timeline {\n  constructor(initial = \"stopped\") {\n    super();\n    this.name = \"StateTimeline\";\n    this._initial = initial;\n    this.setStateAtTime(this._initial, 0);\n  }\n  /**\n   * Returns the scheduled state scheduled before or at\n   * the given time.\n   * @param  time  The time to query.\n   * @return  The name of the state input in setStateAtTime.\n   */\n\n\n  getValueAtTime(time) {\n    const event = this.get(time);\n\n    if (event !== null) {\n      return event.state;\n    } else {\n      return this._initial;\n    }\n  }\n  /**\n   * Add a state to the timeline.\n   * @param  state The name of the state to set.\n   * @param  time  The time to query.\n   * @param options Any additional options that are needed in the timeline.\n   */\n\n\n  setStateAtTime(state, time, options) {\n    assertRange(time, 0);\n    this.add(Object.assign({}, options, {\n      state,\n      time\n    }));\n    return this;\n  }\n  /**\n   * Return the event before the time with the given state\n   * @param  state The state to look for\n   * @param  time  When to check before\n   * @return  The event with the given state before the time\n   */\n\n\n  getLastState(state, time) {\n    // time = this.toSeconds(time);\n    const index = this._search(time);\n\n    for (let i = index; i >= 0; i--) {\n      const event = this._timeline[i];\n\n      if (event.state === state) {\n        return event;\n      }\n    }\n  }\n  /**\n   * Return the event after the time with the given state\n   * @param  state The state to look for\n   * @param  time  When to check from\n   * @return  The event with the given state after the time\n   */\n\n\n  getNextState(state, time) {\n    // time = this.toSeconds(time);\n    const index = this._search(time);\n\n    if (index !== -1) {\n      for (let i = index; i < this._timeline.length; i++) {\n        const event = this._timeline[i];\n\n        if (event.state === state) {\n          return event;\n        }\n      }\n    }\n  }\n\n}","import { dbToGain, gainToDb } from \"../type/Conversions\";\nimport { isAudioParam } from \"../util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { ToneWithContext } from \"./ToneWithContext\";\nimport { EQ } from \"../util/Math\";\nimport { assert, assertRange } from \"../util/Debug\";\n/**\n * Param wraps the native Web Audio's AudioParam to provide\n * additional unit conversion functionality. It also\n * serves as a base-class for classes which have a single,\n * automatable parameter.\n */\n\nexport class Param extends ToneWithContext {\n  constructor() {\n    super(optionsFromArguments(Param.getDefaults(), arguments, [\"param\", \"units\", \"convert\"]));\n    this.name = \"Param\";\n    this.overridden = false;\n    /**\n     * The minimum output value\n     */\n\n    this._minOutput = 1e-7;\n    const options = optionsFromArguments(Param.getDefaults(), arguments, [\"param\", \"units\", \"convert\"]);\n    assert(isDefined(options.param) && (isAudioParam(options.param) || options.param instanceof Param), \"param must be an AudioParam\");\n\n    while (!isAudioParam(options.param)) {\n      options.param = options.param._param;\n    }\n\n    this._swappable = isDefined(options.swappable) ? options.swappable : false;\n\n    if (this._swappable) {\n      this.input = this.context.createGain(); // initialize\n\n      this._param = options.param;\n      this.input.connect(this._param);\n    } else {\n      this._param = this.input = options.param;\n    }\n\n    this._events = new Timeline(1000);\n    this._initialValue = this._param.defaultValue;\n    this.units = options.units;\n    this.convert = options.convert;\n    this._minValue = options.minValue;\n    this._maxValue = options.maxValue; // if the value is defined, set it immediately\n\n    if (isDefined(options.value) && options.value !== this._toType(this._initialValue)) {\n      this.setValueAtTime(options.value, 0);\n    }\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneWithContext.getDefaults(), {\n      convert: true,\n      units: \"number\"\n    });\n  }\n\n  get value() {\n    const now = this.now();\n    return this.getValueAtTime(now);\n  }\n\n  set value(value) {\n    this.cancelScheduledValues(this.now());\n    this.setValueAtTime(value, this.now());\n  }\n\n  get minValue() {\n    // if it's not the default minValue, return it\n    if (isDefined(this._minValue)) {\n      return this._minValue;\n    } else if (this.units === \"time\" || this.units === \"frequency\" || this.units === \"normalRange\" || this.units === \"positive\" || this.units === \"transportTime\" || this.units === \"ticks\" || this.units === \"bpm\" || this.units === \"hertz\" || this.units === \"samples\") {\n      return 0;\n    } else if (this.units === \"audioRange\") {\n      return -1;\n    } else if (this.units === \"decibels\") {\n      return -Infinity;\n    } else {\n      return this._param.minValue;\n    }\n  }\n\n  get maxValue() {\n    if (isDefined(this._maxValue)) {\n      return this._maxValue;\n    } else if (this.units === \"normalRange\" || this.units === \"audioRange\") {\n      return 1;\n    } else {\n      return this._param.maxValue;\n    }\n  }\n  /**\n   * Type guard based on the unit name\n   */\n\n\n  _is(arg, type) {\n    return this.units === type;\n  }\n  /**\n   * Make sure the value is always in the defined range\n   */\n\n\n  _assertRange(value) {\n    if (isDefined(this.maxValue) && isDefined(this.minValue)) {\n      assertRange(value, this._fromType(this.minValue), this._fromType(this.maxValue));\n    }\n\n    return value;\n  }\n  /**\n   * Convert the given value from the type specified by Param.units\n   * into the destination value (such as Gain or Frequency).\n   */\n\n\n  _fromType(val) {\n    if (this.convert && !this.overridden) {\n      if (this._is(val, \"time\")) {\n        return this.toSeconds(val);\n      } else if (this._is(val, \"decibels\")) {\n        return dbToGain(val);\n      } else if (this._is(val, \"frequency\")) {\n        return this.toFrequency(val);\n      } else {\n        return val;\n      }\n    } else if (this.overridden) {\n      // if it's overridden, should only schedule 0s\n      return 0;\n    } else {\n      return val;\n    }\n  }\n  /**\n   * Convert the parameters value into the units specified by Param.units.\n   */\n\n\n  _toType(val) {\n    if (this.convert && this.units === \"decibels\") {\n      return gainToDb(val);\n    } else {\n      return val;\n    }\n  } //-------------------------------------\n  // ABSTRACT PARAM INTERFACE\n  // all docs are generated from ParamInterface.ts\n  //-------------------------------------\n\n\n  setValueAtTime(value, time) {\n    const computedTime = this.toSeconds(time);\n\n    const numericValue = this._fromType(value);\n\n    assert(isFinite(numericValue) && isFinite(computedTime), `Invalid argument(s) to setValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(time)}`);\n\n    this._assertRange(numericValue);\n\n    this.log(this.units, \"setValueAtTime\", value, computedTime);\n\n    this._events.add({\n      time: computedTime,\n      type: \"setValueAtTime\",\n      value: numericValue\n    });\n\n    this._param.setValueAtTime(numericValue, computedTime);\n\n    return this;\n  }\n\n  getValueAtTime(time) {\n    const computedTime = Math.max(this.toSeconds(time), 0);\n\n    const after = this._events.getAfter(computedTime);\n\n    const before = this._events.get(computedTime);\n\n    let value = this._initialValue; // if it was set by\n\n    if (before === null) {\n      value = this._initialValue;\n    } else if (before.type === \"setTargetAtTime\" && (after === null || after.type === \"setValueAtTime\")) {\n      const previous = this._events.getBefore(before.time);\n\n      let previousVal;\n\n      if (previous === null) {\n        previousVal = this._initialValue;\n      } else {\n        previousVal = previous.value;\n      }\n\n      if (before.type === \"setTargetAtTime\") {\n        value = this._exponentialApproach(before.time, previousVal, before.value, before.constant, computedTime);\n      }\n    } else if (after === null) {\n      value = before.value;\n    } else if (after.type === \"linearRampToValueAtTime\" || after.type === \"exponentialRampToValueAtTime\") {\n      let beforeValue = before.value;\n\n      if (before.type === \"setTargetAtTime\") {\n        const previous = this._events.getBefore(before.time);\n\n        if (previous === null) {\n          beforeValue = this._initialValue;\n        } else {\n          beforeValue = previous.value;\n        }\n      }\n\n      if (after.type === \"linearRampToValueAtTime\") {\n        value = this._linearInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n      } else {\n        value = this._exponentialInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n      }\n    } else {\n      value = before.value;\n    }\n\n    return this._toType(value);\n  }\n\n  setRampPoint(time) {\n    time = this.toSeconds(time);\n    let currentVal = this.getValueAtTime(time);\n    this.cancelAndHoldAtTime(time);\n\n    if (this._fromType(currentVal) === 0) {\n      currentVal = this._toType(this._minOutput);\n    }\n\n    this.setValueAtTime(currentVal, time);\n    return this;\n  }\n\n  linearRampToValueAtTime(value, endTime) {\n    const numericValue = this._fromType(value);\n\n    const computedTime = this.toSeconds(endTime);\n    assert(isFinite(numericValue) && isFinite(computedTime), `Invalid argument(s) to linearRampToValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(endTime)}`);\n\n    this._assertRange(numericValue);\n\n    this._events.add({\n      time: computedTime,\n      type: \"linearRampToValueAtTime\",\n      value: numericValue\n    });\n\n    this.log(this.units, \"linearRampToValueAtTime\", value, computedTime);\n\n    this._param.linearRampToValueAtTime(numericValue, computedTime);\n\n    return this;\n  }\n\n  exponentialRampToValueAtTime(value, endTime) {\n    let numericValue = this._fromType(value);\n\n    numericValue = Math.max(this._minOutput, numericValue);\n\n    this._assertRange(numericValue);\n\n    const computedTime = this.toSeconds(endTime);\n    assert(isFinite(numericValue) && isFinite(computedTime), `Invalid argument(s) to exponentialRampToValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(endTime)}`); // store the event\n\n    this._events.add({\n      time: computedTime,\n      type: \"exponentialRampToValueAtTime\",\n      value: numericValue\n    });\n\n    this.log(this.units, \"exponentialRampToValueAtTime\", value, computedTime);\n\n    this._param.exponentialRampToValueAtTime(numericValue, computedTime);\n\n    return this;\n  }\n\n  exponentialRampTo(value, rampTime, startTime) {\n    startTime = this.toSeconds(startTime);\n    this.setRampPoint(startTime);\n    this.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n    return this;\n  }\n\n  linearRampTo(value, rampTime, startTime) {\n    startTime = this.toSeconds(startTime);\n    this.setRampPoint(startTime);\n    this.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n    return this;\n  }\n\n  targetRampTo(value, rampTime, startTime) {\n    startTime = this.toSeconds(startTime);\n    this.setRampPoint(startTime);\n    this.exponentialApproachValueAtTime(value, startTime, rampTime);\n    return this;\n  }\n\n  exponentialApproachValueAtTime(value, time, rampTime) {\n    time = this.toSeconds(time);\n    rampTime = this.toSeconds(rampTime);\n    const timeConstant = Math.log(rampTime + 1) / Math.log(200);\n    this.setTargetAtTime(value, time, timeConstant); // at 90% start a linear ramp to the final value\n\n    this.cancelAndHoldAtTime(time + rampTime * 0.9);\n    this.linearRampToValueAtTime(value, time + rampTime);\n    return this;\n  }\n\n  setTargetAtTime(value, startTime, timeConstant) {\n    const numericValue = this._fromType(value); // The value will never be able to approach without timeConstant > 0.\n\n\n    assert(isFinite(timeConstant) && timeConstant > 0, \"timeConstant must be a number greater than 0\");\n    const computedTime = this.toSeconds(startTime);\n\n    this._assertRange(numericValue);\n\n    assert(isFinite(numericValue) && isFinite(computedTime), `Invalid argument(s) to setTargetAtTime: ${JSON.stringify(value)}, ${JSON.stringify(startTime)}`);\n\n    this._events.add({\n      constant: timeConstant,\n      time: computedTime,\n      type: \"setTargetAtTime\",\n      value: numericValue\n    });\n\n    this.log(this.units, \"setTargetAtTime\", value, computedTime, timeConstant);\n\n    this._param.setTargetAtTime(numericValue, computedTime, timeConstant);\n\n    return this;\n  }\n\n  setValueCurveAtTime(values, startTime, duration, scaling = 1) {\n    duration = this.toSeconds(duration);\n    startTime = this.toSeconds(startTime);\n    const startingValue = this._fromType(values[0]) * scaling;\n    this.setValueAtTime(this._toType(startingValue), startTime);\n    const segTime = duration / (values.length - 1);\n\n    for (let i = 1; i < values.length; i++) {\n      const numericValue = this._fromType(values[i]) * scaling;\n      this.linearRampToValueAtTime(this._toType(numericValue), startTime + i * segTime);\n    }\n\n    return this;\n  }\n\n  cancelScheduledValues(time) {\n    const computedTime = this.toSeconds(time);\n    assert(isFinite(computedTime), `Invalid argument to cancelScheduledValues: ${JSON.stringify(time)}`);\n\n    this._events.cancel(computedTime);\n\n    this._param.cancelScheduledValues(computedTime);\n\n    this.log(this.units, \"cancelScheduledValues\", computedTime);\n    return this;\n  }\n\n  cancelAndHoldAtTime(time) {\n    const computedTime = this.toSeconds(time);\n\n    const valueAtTime = this._fromType(this.getValueAtTime(computedTime)); // remove the schedule events\n\n\n    assert(isFinite(computedTime), `Invalid argument to cancelAndHoldAtTime: ${JSON.stringify(time)}`);\n    this.log(this.units, \"cancelAndHoldAtTime\", computedTime, \"value=\" + valueAtTime); // if there is an event at the given computedTime\n    // and that even is not a \"set\"\n\n    const before = this._events.get(computedTime);\n\n    const after = this._events.getAfter(computedTime);\n\n    if (before && EQ(before.time, computedTime)) {\n      // remove everything after\n      if (after) {\n        this._param.cancelScheduledValues(after.time);\n\n        this._events.cancel(after.time);\n      } else {\n        this._param.cancelAndHoldAtTime(computedTime);\n\n        this._events.cancel(computedTime + this.sampleTime);\n      }\n    } else if (after) {\n      this._param.cancelScheduledValues(after.time); // cancel the next event(s)\n\n\n      this._events.cancel(after.time);\n\n      if (after.type === \"linearRampToValueAtTime\") {\n        this.linearRampToValueAtTime(this._toType(valueAtTime), computedTime);\n      } else if (after.type === \"exponentialRampToValueAtTime\") {\n        this.exponentialRampToValueAtTime(this._toType(valueAtTime), computedTime);\n      }\n    } // set the value at the given time\n\n\n    this._events.add({\n      time: computedTime,\n      type: \"setValueAtTime\",\n      value: valueAtTime\n    });\n\n    this._param.setValueAtTime(valueAtTime, computedTime);\n\n    return this;\n  }\n\n  rampTo(value, rampTime = 0.1, startTime) {\n    if (this.units === \"frequency\" || this.units === \"bpm\" || this.units === \"decibels\") {\n      this.exponentialRampTo(value, rampTime, startTime);\n    } else {\n      this.linearRampTo(value, rampTime, startTime);\n    }\n\n    return this;\n  }\n  /**\n   * Apply all of the previously scheduled events to the passed in Param or AudioParam.\n   * The applied values will start at the context's current time and schedule\n   * all of the events which are scheduled on this Param onto the passed in param.\n   */\n\n\n  apply(param) {\n    const now = this.context.currentTime; // set the param's value at the current time and schedule everything else\n\n    param.setValueAtTime(this.getValueAtTime(now), now); // if the previous event was a curve, then set the rest of it\n\n    const previousEvent = this._events.get(now);\n\n    if (previousEvent && previousEvent.type === \"setTargetAtTime\") {\n      // approx it until the next event with linear ramps\n      const nextEvent = this._events.getAfter(previousEvent.time); // or for 2 seconds if there is no event\n\n\n      const endTime = nextEvent ? nextEvent.time : now + 2;\n      const subdivisions = (endTime - now) / 10;\n\n      for (let i = now; i < endTime; i += subdivisions) {\n        param.linearRampToValueAtTime(this.getValueAtTime(i), i);\n      }\n    }\n\n    this._events.forEachAfter(this.context.currentTime, event => {\n      if (event.type === \"cancelScheduledValues\") {\n        param.cancelScheduledValues(event.time);\n      } else if (event.type === \"setTargetAtTime\") {\n        param.setTargetAtTime(event.value, event.time, event.constant);\n      } else {\n        param[event.type](event.value, event.time);\n      }\n    });\n\n    return this;\n  }\n  /**\n   * Replace the Param's internal AudioParam. Will apply scheduled curves\n   * onto the parameter and replace the connections.\n   */\n\n\n  setParam(param) {\n    assert(this._swappable, \"The Param must be assigned as 'swappable' in the constructor\");\n    const input = this.input;\n    input.disconnect(this._param);\n    this.apply(param);\n    this._param = param;\n    input.connect(this._param);\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._events.dispose();\n\n    return this;\n  }\n\n  get defaultValue() {\n    return this._toType(this._param.defaultValue);\n  } //-------------------------------------\n  // \tAUTOMATION CURVE CALCULATIONS\n  // \tMIT License, copyright (c) 2014 Jordan Santell\n  //-------------------------------------\n  // Calculates the the value along the curve produced by setTargetAtTime\n\n\n  _exponentialApproach(t0, v0, v1, timeConstant, t) {\n    return v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);\n  } // Calculates the the value along the curve produced by linearRampToValueAtTime\n\n\n  _linearInterpolate(t0, v0, t1, v1, t) {\n    return v0 + (v1 - v0) * ((t - t0) / (t1 - t0));\n  } // Calculates the the value along the curve produced by exponentialRampToValueAtTime\n\n\n  _exponentialInterpolate(t0, v0, t1, v1, t) {\n    return v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));\n  }\n\n}","import { isAudioNode, isAudioParam } from \"../util/AdvancedTypeCheck\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { Param } from \"./Param\";\nimport { ToneWithContext } from \"./ToneWithContext\";\nimport { assert, warn } from \"../util/Debug\";\n/**\n * ToneAudioNode is the base class for classes which process audio.\n */\n\nexport class ToneAudioNode extends ToneWithContext {\n  constructor() {\n    super(...arguments);\n    /**\n     * The name of the class\n     */\n\n    this.name = \"ToneAudioNode\";\n    /**\n     * List all of the node that must be set to match the ChannelProperties\n     */\n\n    this._internalChannels = [];\n  }\n  /**\n   * The number of inputs feeding into the AudioNode.\n   * For source nodes, this will be 0.\n   * @example\n   * const node = new Tone.Gain();\n   * console.log(node.numberOfInputs);\n   */\n\n\n  get numberOfInputs() {\n    if (isDefined(this.input)) {\n      if (isAudioParam(this.input) || this.input instanceof Param) {\n        return 1;\n      } else {\n        return this.input.numberOfInputs;\n      }\n    } else {\n      return 0;\n    }\n  }\n  /**\n   * The number of outputs of the AudioNode.\n   * @example\n   * const node = new Tone.Gain();\n   * console.log(node.numberOfOutputs);\n   */\n\n\n  get numberOfOutputs() {\n    if (isDefined(this.output)) {\n      return this.output.numberOfOutputs;\n    } else {\n      return 0;\n    }\n  } //-------------------------------------\n  // AUDIO PROPERTIES\n  //-------------------------------------\n\n  /**\n   * Used to decide which nodes to get/set properties on\n   */\n\n\n  _isAudioNode(node) {\n    return isDefined(node) && (node instanceof ToneAudioNode || isAudioNode(node));\n  }\n  /**\n   * Get all of the audio nodes (either internal or input/output) which together\n   * make up how the class node responds to channel input/output\n   */\n\n\n  _getInternalNodes() {\n    const nodeList = this._internalChannels.slice(0);\n\n    if (this._isAudioNode(this.input)) {\n      nodeList.push(this.input);\n    }\n\n    if (this._isAudioNode(this.output)) {\n      if (this.input !== this.output) {\n        nodeList.push(this.output);\n      }\n    }\n\n    return nodeList;\n  }\n  /**\n   * Set the audio options for this node such as channelInterpretation\n   * channelCount, etc.\n   * @param options\n   */\n\n\n  _setChannelProperties(options) {\n    const nodeList = this._getInternalNodes();\n\n    nodeList.forEach(node => {\n      node.channelCount = options.channelCount;\n      node.channelCountMode = options.channelCountMode;\n      node.channelInterpretation = options.channelInterpretation;\n    });\n  }\n  /**\n   * Get the current audio options for this node such as channelInterpretation\n   * channelCount, etc.\n   */\n\n\n  _getChannelProperties() {\n    const nodeList = this._getInternalNodes();\n\n    assert(nodeList.length > 0, \"ToneAudioNode does not have any internal nodes\"); // use the first node to get properties\n    // they should all be the same\n\n    const node = nodeList[0];\n    return {\n      channelCount: node.channelCount,\n      channelCountMode: node.channelCountMode,\n      channelInterpretation: node.channelInterpretation\n    };\n  }\n  /**\n   * channelCount is the number of channels used when up-mixing and down-mixing\n   * connections to any inputs to the node. The default value is 2 except for\n   * specific nodes where its value is specially determined.\n   */\n\n\n  get channelCount() {\n    return this._getChannelProperties().channelCount;\n  }\n\n  set channelCount(channelCount) {\n    const props = this._getChannelProperties(); // merge it with the other properties\n\n\n    this._setChannelProperties(Object.assign(props, {\n      channelCount\n    }));\n  }\n  /**\n   * channelCountMode determines how channels will be counted when up-mixing and\n   * down-mixing connections to any inputs to the node.\n   * The default value is \"max\". This attribute has no effect for nodes with no inputs.\n   * * \"max\" - computedNumberOfChannels is the maximum of the number of channels of all connections to an input. In this mode channelCount is ignored.\n   * * \"clamped-max\" - computedNumberOfChannels is determined as for \"max\" and then clamped to a maximum value of the given channelCount.\n   * * \"explicit\" - computedNumberOfChannels is the exact value as specified by the channelCount.\n   */\n\n\n  get channelCountMode() {\n    return this._getChannelProperties().channelCountMode;\n  }\n\n  set channelCountMode(channelCountMode) {\n    const props = this._getChannelProperties(); // merge it with the other properties\n\n\n    this._setChannelProperties(Object.assign(props, {\n      channelCountMode\n    }));\n  }\n  /**\n   * channelInterpretation determines how individual channels will be treated\n   * when up-mixing and down-mixing connections to any inputs to the node.\n   * The default value is \"speakers\".\n   */\n\n\n  get channelInterpretation() {\n    return this._getChannelProperties().channelInterpretation;\n  }\n\n  set channelInterpretation(channelInterpretation) {\n    const props = this._getChannelProperties(); // merge it with the other properties\n\n\n    this._setChannelProperties(Object.assign(props, {\n      channelInterpretation\n    }));\n  } //-------------------------------------\n  // CONNECTIONS\n  //-------------------------------------\n\n  /**\n   * connect the output of a ToneAudioNode to an AudioParam, AudioNode, or ToneAudioNode\n   * @param destination The output to connect to\n   * @param outputNum The output to connect from\n   * @param inputNum The input to connect to\n   */\n\n\n  connect(destination, outputNum = 0, inputNum = 0) {\n    connect(this, destination, outputNum, inputNum);\n    return this;\n  }\n  /**\n   * Connect the output to the context's destination node.\n   * @example\n   * const osc = new Tone.Oscillator().start();\n   * osc.toDestination();\n   */\n\n\n  toDestination() {\n    this.connect(this.context.destination);\n    return this;\n  }\n  /**\n   * Connect the output to the context's destination node.\n   * See [[toDestination]]\n   * @deprecated\n   */\n\n\n  toMaster() {\n    warn(\"toMaster() has been renamed toDestination()\");\n    return this.toDestination();\n  }\n  /**\n   * disconnect the output\n   */\n\n\n  disconnect(destination, outputNum = 0, inputNum = 0) {\n    disconnect(this, destination, outputNum, inputNum);\n    return this;\n  }\n  /**\n   * Connect the output of this node to the rest of the nodes in series.\n   * @example\n   * const osc = new Tone.Oscillator().start();\n   * const filter = new Tone.Filter();\n   * const volume = new Tone.Volume(-8);\n   * // connect a node to the filter, volume and then to the master output\n   * osc.chain(filter, volume, Tone.Destination);\n   */\n\n\n  chain(...nodes) {\n    connectSeries(this, ...nodes);\n    return this;\n  }\n  /**\n   * connect the output of this node to the rest of the nodes in parallel.\n   */\n\n\n  fan(...nodes) {\n    nodes.forEach(node => this.connect(node));\n    return this;\n  }\n  /**\n   * Dispose and disconnect\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    if (isDefined(this.input)) {\n      if (this.input instanceof ToneAudioNode) {\n        this.input.dispose();\n      } else if (isAudioNode(this.input)) {\n        this.input.disconnect();\n      }\n    }\n\n    if (isDefined(this.output)) {\n      if (this.output instanceof ToneAudioNode) {\n        this.output.dispose();\n      } else if (isAudioNode(this.output)) {\n        this.output.disconnect();\n      }\n    }\n\n    this._internalChannels = [];\n    return this;\n  }\n\n} //-------------------------------------\n// CONNECTIONS\n//-------------------------------------\n\n/**\n * connect together all of the arguments in series\n * @param nodes\n */\n\nexport function connectSeries(...nodes) {\n  const first = nodes.shift();\n  nodes.reduce((prev, current) => {\n    if (prev instanceof ToneAudioNode) {\n      prev.connect(current);\n    } else if (isAudioNode(prev)) {\n      connect(prev, current);\n    }\n\n    return current;\n  }, first);\n}\n/**\n * Connect two nodes together so that signal flows from the\n * first node to the second. Optionally specify the input and output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\n\nexport function connect(srcNode, dstNode, outputNumber = 0, inputNumber = 0) {\n  assert(isDefined(srcNode), \"Cannot connect from undefined node\");\n  assert(isDefined(dstNode), \"Cannot connect to undefined node\");\n\n  if (dstNode instanceof ToneAudioNode || isAudioNode(dstNode)) {\n    assert(dstNode.numberOfInputs > 0, \"Cannot connect to node with no inputs\");\n  }\n\n  assert(srcNode.numberOfOutputs > 0, \"Cannot connect from node with no outputs\"); // resolve the input of the dstNode\n\n  while (dstNode instanceof ToneAudioNode || dstNode instanceof Param) {\n    if (isDefined(dstNode.input)) {\n      dstNode = dstNode.input;\n    }\n  }\n\n  while (srcNode instanceof ToneAudioNode) {\n    if (isDefined(srcNode.output)) {\n      srcNode = srcNode.output;\n    }\n  } // make the connection\n\n\n  if (isAudioParam(dstNode)) {\n    srcNode.connect(dstNode, outputNumber);\n  } else {\n    srcNode.connect(dstNode, outputNumber, inputNumber);\n  }\n}\n/**\n * Disconnect a node from all nodes or optionally include a destination node and input/output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\n\nexport function disconnect(srcNode, dstNode, outputNumber = 0, inputNumber = 0) {\n  // resolve the destination node\n  if (isDefined(dstNode)) {\n    while (dstNode instanceof ToneAudioNode) {\n      dstNode = dstNode.input;\n    }\n  } // resolve the src node\n\n\n  while (!isAudioNode(srcNode)) {\n    if (isDefined(srcNode.output)) {\n      srcNode = srcNode.output;\n    }\n  }\n\n  if (isAudioParam(dstNode)) {\n    srcNode.disconnect(dstNode, outputNumber);\n  } else if (isAudioNode(dstNode)) {\n    srcNode.disconnect(dstNode, outputNumber, inputNumber);\n  } else {\n    srcNode.disconnect();\n  }\n}","import { Param } from \"../context/Param\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode } from \"./ToneAudioNode\";\n/**\n * A thin wrapper around the Native Web Audio GainNode.\n * The GainNode is a basic building block of the Web Audio\n * API and is useful for routing audio and adjusting gains.\n * @category Core\n * @offline 0.7 1\n * @example\n * const gainNode = new Tone.Gain(0).toDestination();\n * const osc = new Tone.Oscillator().connect(gainNode);\n * gainNode.gain.rampTo(1, 0.1);\n * gainNode.gain.rampTo(0, 0.4, 0.2);\n */\n\nexport class Gain extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]));\n    this.name = \"Gain\";\n    /**\n     * The wrapped GainNode.\n     */\n\n    this._gainNode = this.context.createGain(); // input = output\n\n    this.input = this._gainNode;\n    this.output = this._gainNode;\n    const options = optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]);\n    this.gain = new Param({\n      context: this.context,\n      convert: options.convert,\n      param: this._gainNode.gain,\n      units: options.units,\n      value: options.gain,\n      minValue: options.minValue,\n      maxValue: options.maxValue\n    });\n    readOnly(this, \"gain\");\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      convert: true,\n      gain: 1,\n      units: \"gain\"\n    });\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._gainNode.disconnect();\n\n    this.gain.dispose();\n    return this;\n  }\n\n}","import { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { noOp } from \"../core/util/Interface\";\nimport { assert } from \"../core/util/Debug\";\n/**\n * Base class for fire-and-forget nodes\n */\n\nexport class OneShotSource extends ToneAudioNode {\n  constructor(options) {\n    super(options);\n    /**\n     * The callback to invoke after the\n     * source is done playing.\n     */\n\n    this.onended = noOp;\n    /**\n     * The start time\n     */\n\n    this._startTime = -1;\n    /**\n     * The stop time\n     */\n\n    this._stopTime = -1;\n    /**\n     * The id of the timeout\n     */\n\n    this._timeout = -1;\n    /**\n     * The public output node\n     */\n\n    this.output = new Gain({\n      context: this.context,\n      gain: 0\n    });\n    /**\n     * The output gain node.\n     */\n\n    this._gainNode = this.output;\n    /**\n     * Get the playback state at the given time\n     */\n\n    this.getStateAtTime = function (time) {\n      const computedTime = this.toSeconds(time);\n\n      if (this._startTime !== -1 && computedTime >= this._startTime && (this._stopTime === -1 || computedTime <= this._stopTime)) {\n        return \"started\";\n      } else {\n        return \"stopped\";\n      }\n    };\n\n    this._fadeIn = options.fadeIn;\n    this._fadeOut = options.fadeOut;\n    this._curve = options.curve;\n    this.onended = options.onended;\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      curve: \"linear\",\n      fadeIn: 0,\n      fadeOut: 0,\n      onended: noOp\n    });\n  }\n  /**\n   * Start the source at the given time\n   * @param  time When to start the source\n   */\n\n\n  _startGain(time, gain = 1) {\n    assert(this._startTime === -1, \"Source cannot be started more than once\"); // apply a fade in envelope\n\n    const fadeInTime = this.toSeconds(this._fadeIn); // record the start time\n\n    this._startTime = time + fadeInTime;\n    this._startTime = Math.max(this._startTime, this.context.currentTime); // schedule the envelope\n\n    if (fadeInTime > 0) {\n      this._gainNode.gain.setValueAtTime(0, time);\n\n      if (this._curve === \"linear\") {\n        this._gainNode.gain.linearRampToValueAtTime(gain, time + fadeInTime);\n      } else {\n        this._gainNode.gain.exponentialApproachValueAtTime(gain, time, fadeInTime);\n      }\n    } else {\n      this._gainNode.gain.setValueAtTime(gain, time);\n    }\n\n    return this;\n  }\n  /**\n   * Stop the source node at the given time.\n   * @param time When to stop the source\n   */\n\n\n  stop(time) {\n    this.log(\"stop\", time);\n\n    this._stopGain(this.toSeconds(time));\n\n    return this;\n  }\n  /**\n   * Stop the source at the given time\n   * @param  time When to stop the source\n   */\n\n\n  _stopGain(time) {\n    assert(this._startTime !== -1, \"'start' must be called before 'stop'\"); // cancel the previous stop\n\n    this.cancelStop(); // the fadeOut time\n\n    const fadeOutTime = this.toSeconds(this._fadeOut); // schedule the stop callback\n\n    this._stopTime = this.toSeconds(time) + fadeOutTime;\n    this._stopTime = Math.max(this._stopTime, this.context.currentTime);\n\n    if (fadeOutTime > 0) {\n      // start the fade out curve at the given time\n      if (this._curve === \"linear\") {\n        this._gainNode.gain.linearRampTo(0, fadeOutTime, time);\n      } else {\n        this._gainNode.gain.targetRampTo(0, fadeOutTime, time);\n      }\n    } else {\n      // stop any ongoing ramps, and set the value to 0\n      this._gainNode.gain.cancelAndHoldAtTime(time);\n\n      this._gainNode.gain.setValueAtTime(0, time);\n    }\n\n    this.context.clearTimeout(this._timeout);\n    this._timeout = this.context.setTimeout(() => {\n      // allow additional time for the exponential curve to fully decay\n      const additionalTail = this._curve === \"exponential\" ? fadeOutTime * 2 : 0;\n\n      this._stopSource(this.now() + additionalTail);\n\n      this._onended();\n    }, this._stopTime - this.context.currentTime);\n    return this;\n  }\n  /**\n   * Invoke the onended callback\n   */\n\n\n  _onended() {\n    if (this.onended !== noOp) {\n      this.onended(this); // overwrite onended to make sure it only is called once\n\n      this.onended = noOp; // dispose when it's ended to free up for garbage collection only in the online context\n\n      if (!this.context.isOffline) {\n        setTimeout(() => this.dispose(), 1000);\n      }\n    }\n  }\n  /**\n   * Get the playback state at the current time\n   */\n\n\n  get state() {\n    return this.getStateAtTime(this.now());\n  }\n  /**\n   * Cancel a scheduled stop event\n   */\n\n\n  cancelStop() {\n    this.log(\"cancelStop\");\n    assert(this._startTime !== -1, \"Source is not started\"); // cancel the stop envelope\n\n    this._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);\n\n    this.context.clearTimeout(this._timeout);\n    this._stopTime = -1;\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._gainNode.disconnect();\n\n    return this;\n  }\n\n}","import { connect } from \"../core/context/ToneAudioNode\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { OneShotSource } from \"../source/OneShotSource\";\n/**\n * Wrapper around the native fire-and-forget ConstantSource.\n * Adds the ability to reschedule the stop method.\n * @category Signal\n */\n\nexport class ToneConstantSource extends OneShotSource {\n  constructor() {\n    super(optionsFromArguments(ToneConstantSource.getDefaults(), arguments, [\"offset\"]));\n    this.name = \"ToneConstantSource\";\n    /**\n     * The signal generator\n     */\n\n    this._source = this.context.createConstantSource();\n    const options = optionsFromArguments(ToneConstantSource.getDefaults(), arguments, [\"offset\"]);\n    connect(this._source, this._gainNode);\n    this.offset = new Param({\n      context: this.context,\n      convert: options.convert,\n      param: this._source.offset,\n      units: options.units,\n      value: options.offset,\n      minValue: options.minValue,\n      maxValue: options.maxValue\n    });\n  }\n\n  static getDefaults() {\n    return Object.assign(OneShotSource.getDefaults(), {\n      convert: true,\n      offset: 1,\n      units: \"number\"\n    });\n  }\n  /**\n   * Start the source node at the given time\n   * @param  time When to start the source\n   */\n\n\n  start(time) {\n    const computedTime = this.toSeconds(time);\n    this.log(\"start\", computedTime);\n\n    this._startGain(computedTime);\n\n    this._source.start(computedTime);\n\n    return this;\n  }\n\n  _stopSource(time) {\n    this._source.stop(time);\n  }\n\n  dispose() {\n    super.dispose();\n\n    if (this.state === \"started\") {\n      this.stop();\n    }\n\n    this._source.disconnect();\n\n    this.offset.dispose();\n    return this;\n  }\n\n}","import { Param } from \"../core/context/Param\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { connect } from \"../core/context/ToneAudioNode\";\nimport { isAudioParam } from \"../core/util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { ToneConstantSource } from \"./ToneConstantSource\";\n/**\n * A signal is an audio-rate value. Tone.Signal is a core component of the library.\n * Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n * has all of the methods available to native Web Audio\n * [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n * as well as additional conveniences. Read more about working with signals\n * [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n *\n * @example\n * const osc = new Tone.Oscillator().toDestination().start();\n * // a scheduleable signal which can be connected to control an AudioParam or another Signal\n * const signal = new Tone.Signal({\n * \tvalue: \"C4\",\n * \tunits: \"frequency\"\n * }).connect(osc.frequency);\n * // the scheduled ramp controls the connected signal\n * signal.rampTo(\"C2\", 4, \"+0.5\");\n * @category Signal\n */\n\nexport class Signal extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]));\n    this.name = \"Signal\";\n    /**\n     * Indicates if the value should be overridden on connection.\n     */\n\n    this.override = true;\n    const options = optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]);\n    this.output = this._constantSource = new ToneConstantSource({\n      context: this.context,\n      convert: options.convert,\n      offset: options.value,\n      units: options.units,\n      minValue: options.minValue,\n      maxValue: options.maxValue\n    });\n\n    this._constantSource.start(0);\n\n    this.input = this._param = this._constantSource.offset;\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      convert: true,\n      units: \"number\",\n      value: 0\n    });\n  }\n\n  connect(destination, outputNum = 0, inputNum = 0) {\n    // start it only when connected to something\n    connectSignal(this, destination, outputNum, inputNum);\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._param.dispose();\n\n    this._constantSource.dispose();\n\n    return this;\n  } //-------------------------------------\n  // ABSTRACT PARAM INTERFACE\n  // just a proxy for the ConstantSourceNode's offset AudioParam\n  // all docs are generated from AbstractParam.ts\n  //-------------------------------------\n\n\n  setValueAtTime(value, time) {\n    this._param.setValueAtTime(value, time);\n\n    return this;\n  }\n\n  getValueAtTime(time) {\n    return this._param.getValueAtTime(time);\n  }\n\n  setRampPoint(time) {\n    this._param.setRampPoint(time);\n\n    return this;\n  }\n\n  linearRampToValueAtTime(value, time) {\n    this._param.linearRampToValueAtTime(value, time);\n\n    return this;\n  }\n\n  exponentialRampToValueAtTime(value, time) {\n    this._param.exponentialRampToValueAtTime(value, time);\n\n    return this;\n  }\n\n  exponentialRampTo(value, rampTime, startTime) {\n    this._param.exponentialRampTo(value, rampTime, startTime);\n\n    return this;\n  }\n\n  linearRampTo(value, rampTime, startTime) {\n    this._param.linearRampTo(value, rampTime, startTime);\n\n    return this;\n  }\n\n  targetRampTo(value, rampTime, startTime) {\n    this._param.targetRampTo(value, rampTime, startTime);\n\n    return this;\n  }\n\n  exponentialApproachValueAtTime(value, time, rampTime) {\n    this._param.exponentialApproachValueAtTime(value, time, rampTime);\n\n    return this;\n  }\n\n  setTargetAtTime(value, startTime, timeConstant) {\n    this._param.setTargetAtTime(value, startTime, timeConstant);\n\n    return this;\n  }\n\n  setValueCurveAtTime(values, startTime, duration, scaling) {\n    this._param.setValueCurveAtTime(values, startTime, duration, scaling);\n\n    return this;\n  }\n\n  cancelScheduledValues(time) {\n    this._param.cancelScheduledValues(time);\n\n    return this;\n  }\n\n  cancelAndHoldAtTime(time) {\n    this._param.cancelAndHoldAtTime(time);\n\n    return this;\n  }\n\n  rampTo(value, rampTime, startTime) {\n    this._param.rampTo(value, rampTime, startTime);\n\n    return this;\n  }\n\n  get value() {\n    return this._param.value;\n  }\n\n  set value(value) {\n    this._param.value = value;\n  }\n\n  get convert() {\n    return this._param.convert;\n  }\n\n  set convert(convert) {\n    this._param.convert = convert;\n  }\n\n  get units() {\n    return this._param.units;\n  }\n\n  get overridden() {\n    return this._param.overridden;\n  }\n\n  set overridden(overridden) {\n    this._param.overridden = overridden;\n  }\n\n  get maxValue() {\n    return this._param.maxValue;\n  }\n\n  get minValue() {\n    return this._param.minValue;\n  }\n  /**\n   * See [[Param.apply]].\n   */\n\n\n  apply(param) {\n    this._param.apply(param);\n\n    return this;\n  }\n\n}\n/**\n * When connecting from a signal, it's necessary to zero out the node destination\n * node if that node is also a signal. If the destination is not 0, then the values\n * will be summed. This method insures that the output of the destination signal will\n * be the same as the source signal, making the destination signal a pass through node.\n * @param signal The output signal to connect from\n * @param destination the destination to connect to\n * @param outputNum the optional output number\n * @param inputNum the input number\n */\n\nexport function connectSignal(signal, destination, outputNum, inputNum) {\n  if (destination instanceof Param || isAudioParam(destination) || destination instanceof Signal && destination.override) {\n    // cancel changes\n    destination.cancelScheduledValues(0); // reset the value\n\n    destination.setValueAtTime(0, 0); // mark the value as overridden\n\n    if (destination instanceof Signal) {\n      destination.overridden = true;\n    }\n  }\n\n  connect(signal, destination, outputNum, inputNum);\n}","import { Param } from \"../context/Param\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isUndef } from \"../util/TypeCheck\";\n/**\n * A Param class just for computing ticks. Similar to the [[Param]] class,\n * but offers conversion to BPM values as well as ability to compute tick\n * duration and elapsed ticks\n */\n\nexport class TickParam extends Param {\n  constructor() {\n    super(optionsFromArguments(TickParam.getDefaults(), arguments, [\"value\"]));\n    this.name = \"TickParam\";\n    /**\n     * The timeline which tracks all of the automations.\n     */\n\n    this._events = new Timeline(Infinity);\n    /**\n     * The internal holder for the multiplier value\n     */\n\n    this._multiplier = 1;\n    const options = optionsFromArguments(TickParam.getDefaults(), arguments, [\"value\"]); // set the multiplier\n\n    this._multiplier = options.multiplier; // clear the ticks from the beginning\n\n    this._events.cancel(0); // set an initial event\n\n\n    this._events.add({\n      ticks: 0,\n      time: 0,\n      type: \"setValueAtTime\",\n      value: this._fromType(options.value)\n    });\n\n    this.setValueAtTime(options.value, 0);\n  }\n\n  static getDefaults() {\n    return Object.assign(Param.getDefaults(), {\n      multiplier: 1,\n      units: \"hertz\",\n      value: 1\n    });\n  }\n\n  setTargetAtTime(value, time, constant) {\n    // approximate it with multiple linear ramps\n    time = this.toSeconds(time);\n    this.setRampPoint(time);\n\n    const computedValue = this._fromType(value); // start from previously scheduled value\n\n\n    const prevEvent = this._events.get(time);\n\n    const segments = Math.round(Math.max(1 / constant, 1));\n\n    for (let i = 0; i <= segments; i++) {\n      const segTime = constant * i + time;\n\n      const rampVal = this._exponentialApproach(prevEvent.time, prevEvent.value, computedValue, constant, segTime);\n\n      this.linearRampToValueAtTime(this._toType(rampVal), segTime);\n    }\n\n    return this;\n  }\n\n  setValueAtTime(value, time) {\n    const computedTime = this.toSeconds(time);\n    super.setValueAtTime(value, time);\n\n    const event = this._events.get(computedTime);\n\n    const previousEvent = this._events.previousEvent(event);\n\n    const ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\n    event.ticks = Math.max(ticksUntilTime, 0);\n    return this;\n  }\n\n  linearRampToValueAtTime(value, time) {\n    const computedTime = this.toSeconds(time);\n    super.linearRampToValueAtTime(value, time);\n\n    const event = this._events.get(computedTime);\n\n    const previousEvent = this._events.previousEvent(event);\n\n    const ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\n    event.ticks = Math.max(ticksUntilTime, 0);\n    return this;\n  }\n\n  exponentialRampToValueAtTime(value, time) {\n    // aproximate it with multiple linear ramps\n    time = this.toSeconds(time);\n\n    const computedVal = this._fromType(value); // start from previously scheduled value\n\n\n    const prevEvent = this._events.get(time); // approx 10 segments per second\n\n\n    const segments = Math.round(Math.max((time - prevEvent.time) * 10, 1));\n    const segmentDur = (time - prevEvent.time) / segments;\n\n    for (let i = 0; i <= segments; i++) {\n      const segTime = segmentDur * i + prevEvent.time;\n\n      const rampVal = this._exponentialInterpolate(prevEvent.time, prevEvent.value, time, computedVal, segTime);\n\n      this.linearRampToValueAtTime(this._toType(rampVal), segTime);\n    }\n\n    return this;\n  }\n  /**\n   * Returns the tick value at the time. Takes into account\n   * any automation curves scheduled on the signal.\n   * @param  event The time to get the tick count at\n   * @return The number of ticks which have elapsed at the time given any automations.\n   */\n\n\n  _getTicksUntilEvent(event, time) {\n    if (event === null) {\n      event = {\n        ticks: 0,\n        time: 0,\n        type: \"setValueAtTime\",\n        value: 0\n      };\n    } else if (isUndef(event.ticks)) {\n      const previousEvent = this._events.previousEvent(event);\n\n      event.ticks = this._getTicksUntilEvent(previousEvent, event.time);\n    }\n\n    const val0 = this._fromType(this.getValueAtTime(event.time));\n\n    let val1 = this._fromType(this.getValueAtTime(time)); // if it's right on the line, take the previous value\n\n\n    const onTheLineEvent = this._events.get(time);\n\n    if (onTheLineEvent && onTheLineEvent.time === time && onTheLineEvent.type === \"setValueAtTime\") {\n      val1 = this._fromType(this.getValueAtTime(time - this.sampleTime));\n    }\n\n    return 0.5 * (time - event.time) * (val0 + val1) + event.ticks;\n  }\n  /**\n   * Returns the tick value at the time. Takes into account\n   * any automation curves scheduled on the signal.\n   * @param  time The time to get the tick count at\n   * @return The number of ticks which have elapsed at the time given any automations.\n   */\n\n\n  getTicksAtTime(time) {\n    const computedTime = this.toSeconds(time);\n\n    const event = this._events.get(computedTime);\n\n    return Math.max(this._getTicksUntilEvent(event, computedTime), 0);\n  }\n  /**\n   * Return the elapsed time of the number of ticks from the given time\n   * @param ticks The number of ticks to calculate\n   * @param  time The time to get the next tick from\n   * @return The duration of the number of ticks from the given time in seconds\n   */\n\n\n  getDurationOfTicks(ticks, time) {\n    const computedTime = this.toSeconds(time);\n    const currentTick = this.getTicksAtTime(time);\n    return this.getTimeOfTick(currentTick + ticks) - computedTime;\n  }\n  /**\n   * Given a tick, returns the time that tick occurs at.\n   * @return The time that the tick occurs.\n   */\n\n\n  getTimeOfTick(tick) {\n    const before = this._events.get(tick, \"ticks\");\n\n    const after = this._events.getAfter(tick, \"ticks\");\n\n    if (before && before.ticks === tick) {\n      return before.time;\n    } else if (before && after && after.type === \"linearRampToValueAtTime\" && before.value !== after.value) {\n      const val0 = this._fromType(this.getValueAtTime(before.time));\n\n      const val1 = this._fromType(this.getValueAtTime(after.time));\n\n      const delta = (val1 - val0) / (after.time - before.time);\n      const k = Math.sqrt(Math.pow(val0, 2) - 2 * delta * (before.ticks - tick));\n      const sol1 = (-val0 + k) / delta;\n      const sol2 = (-val0 - k) / delta;\n      return (sol1 > 0 ? sol1 : sol2) + before.time;\n    } else if (before) {\n      if (before.value === 0) {\n        return Infinity;\n      } else {\n        return before.time + (tick - before.ticks) / before.value;\n      }\n    } else {\n      return tick / this._initialValue;\n    }\n  }\n  /**\n   * Convert some number of ticks their the duration in seconds accounting\n   * for any automation curves starting at the given time.\n   * @param  ticks The number of ticks to convert to seconds.\n   * @param  when  When along the automation timeline to convert the ticks.\n   * @return The duration in seconds of the ticks.\n   */\n\n\n  ticksToTime(ticks, when) {\n    return this.getDurationOfTicks(ticks, when);\n  }\n  /**\n   * The inverse of [[ticksToTime]]. Convert a duration in\n   * seconds to the corresponding number of ticks accounting for any\n   * automation curves starting at the given time.\n   * @param  duration The time interval to convert to ticks.\n   * @param  when When along the automation timeline to convert the ticks.\n   * @return The duration in ticks.\n   */\n\n\n  timeToTicks(duration, when) {\n    const computedTime = this.toSeconds(when);\n    const computedDuration = this.toSeconds(duration);\n    const startTicks = this.getTicksAtTime(computedTime);\n    const endTicks = this.getTicksAtTime(computedTime + computedDuration);\n    return endTicks - startTicks;\n  }\n  /**\n   * Convert from the type when the unit value is BPM\n   */\n\n\n  _fromType(val) {\n    if (this.units === \"bpm\" && this.multiplier) {\n      return 1 / (60 / val / this.multiplier);\n    } else {\n      return super._fromType(val);\n    }\n  }\n  /**\n   * Special case of type conversion where the units === \"bpm\"\n   */\n\n\n  _toType(val) {\n    if (this.units === \"bpm\" && this.multiplier) {\n      return val / this.multiplier * 60;\n    } else {\n      return super._toType(val);\n    }\n  }\n  /**\n   * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n   */\n\n\n  get multiplier() {\n    return this._multiplier;\n  }\n\n  set multiplier(m) {\n    // get and reset the current value with the new multiplier\n    // might be necessary to clear all the previous values\n    const currentVal = this.value;\n    this._multiplier = m;\n    this.cancelScheduledValues(0);\n    this.setValueAtTime(currentVal, 0);\n  }\n\n}","import { Signal } from \"../../signal/Signal\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { TickParam } from \"./TickParam\";\n/**\n * TickSignal extends Tone.Signal, but adds the capability\n * to calculate the number of elapsed ticks. exponential and target curves\n * are approximated with multiple linear ramps.\n *\n * Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos,\n * for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)\n * describing integrating timing functions for tempo calculations.\n */\n\nexport class TickSignal extends Signal {\n  constructor() {\n    super(optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]));\n    this.name = \"TickSignal\";\n    const options = optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]);\n    this.input = this._param = new TickParam({\n      context: this.context,\n      convert: options.convert,\n      multiplier: options.multiplier,\n      param: this._constantSource.offset,\n      units: options.units,\n      value: options.value\n    });\n  }\n\n  static getDefaults() {\n    return Object.assign(Signal.getDefaults(), {\n      multiplier: 1,\n      units: \"hertz\",\n      value: 1\n    });\n  }\n\n  ticksToTime(ticks, when) {\n    return this._param.ticksToTime(ticks, when);\n  }\n\n  timeToTicks(duration, when) {\n    return this._param.timeToTicks(duration, when);\n  }\n\n  getTimeOfTick(tick) {\n    return this._param.getTimeOfTick(tick);\n  }\n\n  getDurationOfTicks(ticks, time) {\n    return this._param.getDurationOfTicks(ticks, time);\n  }\n\n  getTicksAtTime(time) {\n    return this._param.getTicksAtTime(time);\n  }\n  /**\n   * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n   */\n\n\n  get multiplier() {\n    return this._param.multiplier;\n  }\n\n  set multiplier(m) {\n    this._param.multiplier = m;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._param.dispose();\n\n    return this;\n  }\n\n}","import { ToneWithContext } from \"../context/ToneWithContext\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { StateTimeline } from \"../util/StateTimeline\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { TickSignal } from \"./TickSignal\";\nimport { EQ } from \"../util/Math\";\n/**\n * Uses [TickSignal](TickSignal) to track elapsed ticks with complex automation curves.\n */\n\nexport class TickSource extends ToneWithContext {\n  constructor() {\n    super(optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]));\n    this.name = \"TickSource\";\n    /**\n     * The state timeline\n     */\n\n    this._state = new StateTimeline();\n    /**\n     * The offset values of the ticks\n     */\n\n    this._tickOffset = new Timeline();\n    const options = optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]);\n    this.frequency = new TickSignal({\n      context: this.context,\n      units: options.units,\n      value: options.frequency\n    });\n    readOnly(this, \"frequency\"); // set the initial state\n\n    this._state.setStateAtTime(\"stopped\", 0); // add the first event\n\n\n    this.setTicksAtTime(0, 0);\n  }\n\n  static getDefaults() {\n    return Object.assign({\n      frequency: 1,\n      units: \"hertz\"\n    }, ToneWithContext.getDefaults());\n  }\n  /**\n   * Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n   */\n\n\n  get state() {\n    return this.getStateAtTime(this.now());\n  }\n  /**\n   * Start the clock at the given time. Optionally pass in an offset\n   * of where to start the tick counter from.\n   * @param  time    The time the clock should start\n   * @param offset The number of ticks to start the source at\n   */\n\n\n  start(time, offset) {\n    const computedTime = this.toSeconds(time);\n\n    if (this._state.getValueAtTime(computedTime) !== \"started\") {\n      this._state.setStateAtTime(\"started\", computedTime);\n\n      if (isDefined(offset)) {\n        this.setTicksAtTime(offset, computedTime);\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Stop the clock. Stopping the clock resets the tick counter to 0.\n   * @param time The time when the clock should stop.\n   */\n\n\n  stop(time) {\n    const computedTime = this.toSeconds(time); // cancel the previous stop\n\n    if (this._state.getValueAtTime(computedTime) === \"stopped\") {\n      const event = this._state.get(computedTime);\n\n      if (event && event.time > 0) {\n        this._tickOffset.cancel(event.time);\n\n        this._state.cancel(event.time);\n      }\n    }\n\n    this._state.cancel(computedTime);\n\n    this._state.setStateAtTime(\"stopped\", computedTime);\n\n    this.setTicksAtTime(0, computedTime);\n    return this;\n  }\n  /**\n   * Pause the clock. Pausing does not reset the tick counter.\n   * @param time The time when the clock should stop.\n   */\n\n\n  pause(time) {\n    const computedTime = this.toSeconds(time);\n\n    if (this._state.getValueAtTime(computedTime) === \"started\") {\n      this._state.setStateAtTime(\"paused\", computedTime);\n    }\n\n    return this;\n  }\n  /**\n   * Cancel start/stop/pause and setTickAtTime events scheduled after the given time.\n   * @param time When to clear the events after\n   */\n\n\n  cancel(time) {\n    time = this.toSeconds(time);\n\n    this._state.cancel(time);\n\n    this._tickOffset.cancel(time);\n\n    return this;\n  }\n  /**\n   * Get the elapsed ticks at the given time\n   * @param  time  When to get the tick value\n   * @return The number of ticks\n   */\n\n\n  getTicksAtTime(time) {\n    const computedTime = this.toSeconds(time);\n\n    const stopEvent = this._state.getLastState(\"stopped\", computedTime); // this event allows forEachBetween to iterate until the current time\n\n\n    const tmpEvent = {\n      state: \"paused\",\n      time: computedTime\n    };\n\n    this._state.add(tmpEvent); // keep track of the previous offset event\n\n\n    let lastState = stopEvent;\n    let elapsedTicks = 0; // iterate through all the events since the last stop\n\n    this._state.forEachBetween(stopEvent.time, computedTime + this.sampleTime, e => {\n      let periodStartTime = lastState.time; // if there is an offset event in this period use that\n\n      const offsetEvent = this._tickOffset.get(e.time);\n\n      if (offsetEvent && offsetEvent.time >= lastState.time) {\n        elapsedTicks = offsetEvent.ticks;\n        periodStartTime = offsetEvent.time;\n      }\n\n      if (lastState.state === \"started\" && e.state !== \"started\") {\n        elapsedTicks += this.frequency.getTicksAtTime(e.time) - this.frequency.getTicksAtTime(periodStartTime);\n      }\n\n      lastState = e;\n    }); // remove the temporary event\n\n\n    this._state.remove(tmpEvent); // return the ticks\n\n\n    return elapsedTicks;\n  }\n  /**\n   * The number of times the callback was invoked. Starts counting at 0\n   * and increments after the callback was invoked. Returns -1 when stopped.\n   */\n\n\n  get ticks() {\n    return this.getTicksAtTime(this.now());\n  }\n\n  set ticks(t) {\n    this.setTicksAtTime(t, this.now());\n  }\n  /**\n   * The time since ticks=0 that the TickSource has been running. Accounts\n   * for tempo curves\n   */\n\n\n  get seconds() {\n    return this.getSecondsAtTime(this.now());\n  }\n\n  set seconds(s) {\n    const now = this.now();\n    const ticks = this.frequency.timeToTicks(s, now);\n    this.setTicksAtTime(ticks, now);\n  }\n  /**\n   * Return the elapsed seconds at the given time.\n   * @param  time  When to get the elapsed seconds\n   * @return  The number of elapsed seconds\n   */\n\n\n  getSecondsAtTime(time) {\n    time = this.toSeconds(time);\n\n    const stopEvent = this._state.getLastState(\"stopped\", time); // this event allows forEachBetween to iterate until the current time\n\n\n    const tmpEvent = {\n      state: \"paused\",\n      time\n    };\n\n    this._state.add(tmpEvent); // keep track of the previous offset event\n\n\n    let lastState = stopEvent;\n    let elapsedSeconds = 0; // iterate through all the events since the last stop\n\n    this._state.forEachBetween(stopEvent.time, time + this.sampleTime, e => {\n      let periodStartTime = lastState.time; // if there is an offset event in this period use that\n\n      const offsetEvent = this._tickOffset.get(e.time);\n\n      if (offsetEvent && offsetEvent.time >= lastState.time) {\n        elapsedSeconds = offsetEvent.seconds;\n        periodStartTime = offsetEvent.time;\n      }\n\n      if (lastState.state === \"started\" && e.state !== \"started\") {\n        elapsedSeconds += e.time - periodStartTime;\n      }\n\n      lastState = e;\n    }); // remove the temporary event\n\n\n    this._state.remove(tmpEvent); // return the ticks\n\n\n    return elapsedSeconds;\n  }\n  /**\n   * Set the clock's ticks at the given time.\n   * @param  ticks The tick value to set\n   * @param  time  When to set the tick value\n   */\n\n\n  setTicksAtTime(ticks, time) {\n    time = this.toSeconds(time);\n\n    this._tickOffset.cancel(time);\n\n    this._tickOffset.add({\n      seconds: this.frequency.getDurationOfTicks(ticks, time),\n      ticks,\n      time\n    });\n\n    return this;\n  }\n  /**\n   * Returns the scheduled state at the given time.\n   * @param  time  The time to query.\n   */\n\n\n  getStateAtTime(time) {\n    time = this.toSeconds(time);\n    return this._state.getValueAtTime(time);\n  }\n  /**\n   * Get the time of the given tick. The second argument\n   * is when to test before. Since ticks can be set (with setTicksAtTime)\n   * there may be multiple times for a given tick value.\n   * @param  tick The tick number.\n   * @param  before When to measure the tick value from.\n   * @return The time of the tick\n   */\n\n\n  getTimeOfTick(tick, before = this.now()) {\n    const offset = this._tickOffset.get(before);\n\n    const event = this._state.get(before);\n\n    const startTime = Math.max(offset.time, event.time);\n    const absoluteTicks = this.frequency.getTicksAtTime(startTime) + tick - offset.ticks;\n    return this.frequency.getTimeOfTick(absoluteTicks);\n  }\n  /**\n   * Invoke the callback event at all scheduled ticks between the\n   * start time and the end time\n   * @param  startTime  The beginning of the search range\n   * @param  endTime    The end of the search range\n   * @param  callback   The callback to invoke with each tick\n   */\n\n\n  forEachTickBetween(startTime, endTime, callback) {\n    // only iterate through the sections where it is \"started\"\n    let lastStateEvent = this._state.get(startTime);\n\n    this._state.forEachBetween(startTime, endTime, event => {\n      if (lastStateEvent && lastStateEvent.state === \"started\" && event.state !== \"started\") {\n        this.forEachTickBetween(Math.max(lastStateEvent.time, startTime), event.time - this.sampleTime, callback);\n      }\n\n      lastStateEvent = event;\n    });\n\n    let error = null;\n\n    if (lastStateEvent && lastStateEvent.state === \"started\") {\n      const maxStartTime = Math.max(lastStateEvent.time, startTime); // figure out the difference between the frequency ticks and the\n\n      const startTicks = this.frequency.getTicksAtTime(maxStartTime);\n      const ticksAtStart = this.frequency.getTicksAtTime(lastStateEvent.time);\n      const diff = startTicks - ticksAtStart;\n      let offset = Math.ceil(diff) - diff; // guard against floating point issues\n\n      offset = EQ(offset, 1) ? 0 : offset;\n      let nextTickTime = this.frequency.getTimeOfTick(startTicks + offset);\n\n      while (nextTickTime < endTime) {\n        try {\n          callback(nextTickTime, Math.round(this.getTicksAtTime(nextTickTime)));\n        } catch (e) {\n          error = e;\n          break;\n        }\n\n        nextTickTime += this.frequency.getDurationOfTicks(1, nextTickTime);\n      }\n    }\n\n    if (error) {\n      throw error;\n    }\n\n    return this;\n  }\n  /**\n   * Clean up\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._state.dispose();\n\n    this._tickOffset.dispose();\n\n    this.frequency.dispose();\n    return this;\n  }\n\n}","import { ToneWithContext } from \"../context/ToneWithContext\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { noOp, readOnly } from \"../util/Interface\";\nimport { StateTimeline } from \"../util/StateTimeline\";\nimport { TickSource } from \"./TickSource\";\nimport { assertContextRunning } from \"../util/Debug\";\n/**\n * A sample accurate clock which provides a callback at the given rate.\n * While the callback is not sample-accurate (it is still susceptible to\n * loose JS timing), the time passed in as the argument to the callback\n * is precise. For most applications, it is better to use Tone.Transport\n * instead of the Clock by itself since you can synchronize multiple callbacks.\n * @example\n * // the callback will be invoked approximately once a second\n * // and will print the time exactly once a second apart.\n * const clock = new Tone.Clock(time => {\n * \tconsole.log(time);\n * }, 1);\n * clock.start();\n * @category Core\n */\n\nexport class Clock extends ToneWithContext {\n  constructor() {\n    super(optionsFromArguments(Clock.getDefaults(), arguments, [\"callback\", \"frequency\"]));\n    this.name = \"Clock\";\n    /**\n     * The callback function to invoke at the scheduled tick.\n     */\n\n    this.callback = noOp;\n    /**\n     * The last time the loop callback was invoked\n     */\n\n    this._lastUpdate = 0;\n    /**\n     * Keep track of the playback state\n     */\n\n    this._state = new StateTimeline(\"stopped\");\n    /**\n     * Context bound reference to the _loop method\n     * This is necessary to remove the event in the end.\n     */\n\n    this._boundLoop = this._loop.bind(this);\n    const options = optionsFromArguments(Clock.getDefaults(), arguments, [\"callback\", \"frequency\"]);\n    this.callback = options.callback;\n    this._tickSource = new TickSource({\n      context: this.context,\n      frequency: options.frequency,\n      units: options.units\n    });\n    this._lastUpdate = 0;\n    this.frequency = this._tickSource.frequency;\n    readOnly(this, \"frequency\"); // add an initial state\n\n    this._state.setStateAtTime(\"stopped\", 0); // bind a callback to the worker thread\n\n\n    this.context.on(\"tick\", this._boundLoop);\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneWithContext.getDefaults(), {\n      callback: noOp,\n      frequency: 1,\n      units: \"hertz\"\n    });\n  }\n  /**\n   * Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n   */\n\n\n  get state() {\n    return this._state.getValueAtTime(this.now());\n  }\n  /**\n   * Start the clock at the given time. Optionally pass in an offset\n   * of where to start the tick counter from.\n   * @param  time    The time the clock should start\n   * @param offset  Where the tick counter starts counting from.\n   */\n\n\n  start(time, offset) {\n    // make sure the context is running\n    assertContextRunning(this.context); // start the loop\n\n    const computedTime = this.toSeconds(time);\n    this.log(\"start\", computedTime);\n\n    if (this._state.getValueAtTime(computedTime) !== \"started\") {\n      this._state.setStateAtTime(\"started\", computedTime);\n\n      this._tickSource.start(computedTime, offset);\n\n      if (computedTime < this._lastUpdate) {\n        this.emit(\"start\", computedTime, offset);\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Stop the clock. Stopping the clock resets the tick counter to 0.\n   * @param time The time when the clock should stop.\n   * @example\n   * const clock = new Tone.Clock(time => {\n   * \tconsole.log(time);\n   * }, 1);\n   * clock.start();\n   * // stop the clock after 10 seconds\n   * clock.stop(\"+10\");\n   */\n\n\n  stop(time) {\n    const computedTime = this.toSeconds(time);\n    this.log(\"stop\", computedTime);\n\n    this._state.cancel(computedTime);\n\n    this._state.setStateAtTime(\"stopped\", computedTime);\n\n    this._tickSource.stop(computedTime);\n\n    if (computedTime < this._lastUpdate) {\n      this.emit(\"stop\", computedTime);\n    }\n\n    return this;\n  }\n  /**\n   * Pause the clock. Pausing does not reset the tick counter.\n   * @param time The time when the clock should stop.\n   */\n\n\n  pause(time) {\n    const computedTime = this.toSeconds(time);\n\n    if (this._state.getValueAtTime(computedTime) === \"started\") {\n      this._state.setStateAtTime(\"paused\", computedTime);\n\n      this._tickSource.pause(computedTime);\n\n      if (computedTime < this._lastUpdate) {\n        this.emit(\"pause\", computedTime);\n      }\n    }\n\n    return this;\n  }\n  /**\n   * The number of times the callback was invoked. Starts counting at 0\n   * and increments after the callback was invoked.\n   */\n\n\n  get ticks() {\n    return Math.ceil(this.getTicksAtTime(this.now()));\n  }\n\n  set ticks(t) {\n    this._tickSource.ticks = t;\n  }\n  /**\n   * The time since ticks=0 that the Clock has been running. Accounts for tempo curves\n   */\n\n\n  get seconds() {\n    return this._tickSource.seconds;\n  }\n\n  set seconds(s) {\n    this._tickSource.seconds = s;\n  }\n  /**\n   * Return the elapsed seconds at the given time.\n   * @param  time  When to get the elapsed seconds\n   * @return  The number of elapsed seconds\n   */\n\n\n  getSecondsAtTime(time) {\n    return this._tickSource.getSecondsAtTime(time);\n  }\n  /**\n   * Set the clock's ticks at the given time.\n   * @param  ticks The tick value to set\n   * @param  time  When to set the tick value\n   */\n\n\n  setTicksAtTime(ticks, time) {\n    this._tickSource.setTicksAtTime(ticks, time);\n\n    return this;\n  }\n  /**\n   * Get the time of the given tick. The second argument\n   * is when to test before. Since ticks can be set (with setTicksAtTime)\n   * there may be multiple times for a given tick value.\n   * @param  tick The tick number.\n   * @param  before When to measure the tick value from.\n   * @return The time of the tick\n   */\n\n\n  getTimeOfTick(tick, before = this.now()) {\n    return this._tickSource.getTimeOfTick(tick, before);\n  }\n  /**\n   * Get the clock's ticks at the given time.\n   * @param  time  When to get the tick value\n   * @return The tick value at the given time.\n   */\n\n\n  getTicksAtTime(time) {\n    return this._tickSource.getTicksAtTime(time);\n  }\n  /**\n   * Get the time of the next tick\n   * @param  offset The tick number.\n   */\n\n\n  nextTickTime(offset, when) {\n    const computedTime = this.toSeconds(when);\n    const currentTick = this.getTicksAtTime(computedTime);\n    return this._tickSource.getTimeOfTick(currentTick + offset, computedTime);\n  }\n  /**\n   * The scheduling loop.\n   */\n\n\n  _loop() {\n    const startTime = this._lastUpdate;\n    const endTime = this.now();\n    this._lastUpdate = endTime;\n    this.log(\"loop\", startTime, endTime);\n\n    if (startTime !== endTime) {\n      // the state change events\n      this._state.forEachBetween(startTime, endTime, e => {\n        switch (e.state) {\n          case \"started\":\n            const offset = this._tickSource.getTicksAtTime(e.time);\n\n            this.emit(\"start\", e.time, offset);\n            break;\n\n          case \"stopped\":\n            if (e.time !== 0) {\n              this.emit(\"stop\", e.time);\n            }\n\n            break;\n\n          case \"paused\":\n            this.emit(\"pause\", e.time);\n            break;\n        }\n      }); // the tick callbacks\n\n\n      this._tickSource.forEachTickBetween(startTime, endTime, (time, ticks) => {\n        this.callback(time, ticks);\n      });\n    }\n  }\n  /**\n   * Returns the scheduled state at the given time.\n   * @param  time  The time to query.\n   * @return  The name of the state input in setStateAtTime.\n   * @example\n   * const clock = new Tone.Clock();\n   * clock.start(\"+0.1\");\n   * clock.getStateAtTime(\"+0.1\"); // returns \"started\"\n   */\n\n\n  getStateAtTime(time) {\n    const computedTime = this.toSeconds(time);\n    return this._state.getValueAtTime(computedTime);\n  }\n  /**\n   * Clean up\n   */\n\n\n  dispose() {\n    super.dispose();\n    this.context.off(\"tick\", this._boundLoop);\n\n    this._tickSource.dispose();\n\n    this._state.dispose();\n\n    return this;\n  }\n\n}\nEmitter.mixin(Clock);","import { Timeline } from \"./Timeline\";\nimport { Tone } from \"../Tone\";\n/**\n * Represents a single value which is gettable and settable in a timed way\n */\n\nexport class TimelineValue extends Tone {\n  /**\n   * @param initialValue The value to return if there is no scheduled values\n   */\n  constructor(initialValue) {\n    super();\n    this.name = \"TimelineValue\";\n    /**\n     * The timeline which stores the values\n     */\n\n    this._timeline = new Timeline({\n      memory: 10\n    });\n    this._initialValue = initialValue;\n  }\n  /**\n   * Set the value at the given time\n   */\n\n\n  set(value, time) {\n    this._timeline.add({\n      value,\n      time\n    });\n\n    return this;\n  }\n  /**\n   * Get the value at the given time\n   */\n\n\n  get(time) {\n    const event = this._timeline.get(time);\n\n    if (event) {\n      return event.value;\n    } else {\n      return this._initialValue;\n    }\n  }\n\n}","import { getContext } from \"../Global\";\nimport { TransportTimeClass } from \"./TransportTime\";\n/**\n * Ticks is a primitive type for encoding Time values.\n * Ticks can be constructed with or without the `new` keyword. Ticks can be passed\n * into the parameter of any method which takes time as an argument.\n * @example\n * const t = Tone.Ticks(\"4n\"); // a quarter note as ticks\n * @category Unit\n */\n\nexport class TicksClass extends TransportTimeClass {\n  constructor() {\n    super(...arguments);\n    this.name = \"Ticks\";\n    this.defaultUnits = \"i\";\n  }\n  /**\n   * Get the current time in the given units\n   */\n\n\n  _now() {\n    return this.context.transport.ticks;\n  }\n  /**\n   * Return the value of the beats in the current units\n   */\n\n\n  _beatsToUnits(beats) {\n    return this._getPPQ() * beats;\n  }\n  /**\n   * Returns the value of a second in the current units\n   */\n\n\n  _secondsToUnits(seconds) {\n    return Math.floor(seconds / (60 / this._getBpm()) * this._getPPQ());\n  }\n  /**\n   * Returns the value of a tick in the current time units\n   */\n\n\n  _ticksToUnits(ticks) {\n    return ticks;\n  }\n  /**\n   * Return the time in ticks\n   */\n\n\n  toTicks() {\n    return this.valueOf();\n  }\n  /**\n   * Return the time in seconds\n   */\n\n\n  toSeconds() {\n    return this.valueOf() / this._getPPQ() * (60 / this._getBpm());\n  }\n\n}\n/**\n * Convert a time representation to ticks\n * @category Unit\n */\n\nexport function Ticks(value, units) {\n  return new TicksClass(getContext(), value, units);\n}","import { Tone } from \"../Tone\";\nimport { isDefined } from \"./TypeCheck\";\nimport { assert } from \"./Debug\";\n/**\n * Similar to Tone.Timeline, but all events represent\n * intervals with both \"time\" and \"duration\" times. The\n * events are placed in a tree structure optimized\n * for querying an intersection point with the timeline\n * events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n * to represent the data.\n */\n\nexport class IntervalTimeline extends Tone {\n  constructor() {\n    super(...arguments);\n    this.name = \"IntervalTimeline\";\n    /**\n     * The root node of the inteval tree\n     */\n\n    this._root = null;\n    /**\n     * Keep track of the length of the timeline.\n     */\n\n    this._length = 0;\n  }\n  /**\n   * The event to add to the timeline. All events must\n   * have a time and duration value\n   * @param  event  The event to add to the timeline\n   */\n\n\n  add(event) {\n    assert(isDefined(event.time), \"Events must have a time property\");\n    assert(isDefined(event.duration), \"Events must have a duration parameter\");\n    event.time = event.time.valueOf();\n    let node = new IntervalNode(event.time, event.time + event.duration, event);\n\n    if (this._root === null) {\n      this._root = node;\n    } else {\n      this._root.insert(node);\n    }\n\n    this._length++; // Restructure tree to be balanced\n\n    while (node !== null) {\n      node.updateHeight();\n      node.updateMax();\n\n      this._rebalance(node);\n\n      node = node.parent;\n    }\n\n    return this;\n  }\n  /**\n   * Remove an event from the timeline.\n   * @param  event  The event to remove from the timeline\n   */\n\n\n  remove(event) {\n    if (this._root !== null) {\n      const results = [];\n\n      this._root.search(event.time, results);\n\n      for (const node of results) {\n        if (node.event === event) {\n          this._removeNode(node);\n\n          this._length--;\n          break;\n        }\n      }\n    }\n\n    return this;\n  }\n  /**\n   * The number of items in the timeline.\n   * @readOnly\n   */\n\n\n  get length() {\n    return this._length;\n  }\n  /**\n   * Remove events whose time time is after the given time\n   * @param  after  The time to query.\n   */\n\n\n  cancel(after) {\n    this.forEachFrom(after, event => this.remove(event));\n    return this;\n  }\n  /**\n   * Set the root node as the given node\n   */\n\n\n  _setRoot(node) {\n    this._root = node;\n\n    if (this._root !== null) {\n      this._root.parent = null;\n    }\n  }\n  /**\n   * Replace the references to the node in the node's parent\n   * with the replacement node.\n   */\n\n\n  _replaceNodeInParent(node, replacement) {\n    if (node.parent !== null) {\n      if (node.isLeftChild()) {\n        node.parent.left = replacement;\n      } else {\n        node.parent.right = replacement;\n      }\n\n      this._rebalance(node.parent);\n    } else {\n      this._setRoot(replacement);\n    }\n  }\n  /**\n   * Remove the node from the tree and replace it with\n   * a successor which follows the schema.\n   */\n\n\n  _removeNode(node) {\n    if (node.left === null && node.right === null) {\n      this._replaceNodeInParent(node, null);\n    } else if (node.right === null) {\n      this._replaceNodeInParent(node, node.left);\n    } else if (node.left === null) {\n      this._replaceNodeInParent(node, node.right);\n    } else {\n      const balance = node.getBalance();\n      let replacement;\n      let temp = null;\n\n      if (balance > 0) {\n        if (node.left.right === null) {\n          replacement = node.left;\n          replacement.right = node.right;\n          temp = replacement;\n        } else {\n          replacement = node.left.right;\n\n          while (replacement.right !== null) {\n            replacement = replacement.right;\n          }\n\n          if (replacement.parent) {\n            replacement.parent.right = replacement.left;\n            temp = replacement.parent;\n            replacement.left = node.left;\n            replacement.right = node.right;\n          }\n        }\n      } else if (node.right.left === null) {\n        replacement = node.right;\n        replacement.left = node.left;\n        temp = replacement;\n      } else {\n        replacement = node.right.left;\n\n        while (replacement.left !== null) {\n          replacement = replacement.left;\n        }\n\n        if (replacement.parent) {\n          replacement.parent.left = replacement.right;\n          temp = replacement.parent;\n          replacement.left = node.left;\n          replacement.right = node.right;\n        }\n      }\n\n      if (node.parent !== null) {\n        if (node.isLeftChild()) {\n          node.parent.left = replacement;\n        } else {\n          node.parent.right = replacement;\n        }\n      } else {\n        this._setRoot(replacement);\n      }\n\n      if (temp) {\n        this._rebalance(temp);\n      }\n    }\n\n    node.dispose();\n  }\n  /**\n   * Rotate the tree to the left\n   */\n\n\n  _rotateLeft(node) {\n    const parent = node.parent;\n    const isLeftChild = node.isLeftChild(); // Make node.right the new root of this sub tree (instead of node)\n\n    const pivotNode = node.right;\n\n    if (pivotNode) {\n      node.right = pivotNode.left;\n      pivotNode.left = node;\n    }\n\n    if (parent !== null) {\n      if (isLeftChild) {\n        parent.left = pivotNode;\n      } else {\n        parent.right = pivotNode;\n      }\n    } else {\n      this._setRoot(pivotNode);\n    }\n  }\n  /**\n   * Rotate the tree to the right\n   */\n\n\n  _rotateRight(node) {\n    const parent = node.parent;\n    const isLeftChild = node.isLeftChild(); // Make node.left the new root of this sub tree (instead of node)\n\n    const pivotNode = node.left;\n\n    if (pivotNode) {\n      node.left = pivotNode.right;\n      pivotNode.right = node;\n    }\n\n    if (parent !== null) {\n      if (isLeftChild) {\n        parent.left = pivotNode;\n      } else {\n        parent.right = pivotNode;\n      }\n    } else {\n      this._setRoot(pivotNode);\n    }\n  }\n  /**\n   * Balance the BST\n   */\n\n\n  _rebalance(node) {\n    const balance = node.getBalance();\n\n    if (balance > 1 && node.left) {\n      if (node.left.getBalance() < 0) {\n        this._rotateLeft(node.left);\n      } else {\n        this._rotateRight(node);\n      }\n    } else if (balance < -1 && node.right) {\n      if (node.right.getBalance() > 0) {\n        this._rotateRight(node.right);\n      } else {\n        this._rotateLeft(node);\n      }\n    }\n  }\n  /**\n   * Get an event whose time and duration span the give time. Will\n   * return the match whose \"time\" value is closest to the given time.\n   * @return  The event which spans the desired time\n   */\n\n\n  get(time) {\n    if (this._root !== null) {\n      const results = [];\n\n      this._root.search(time, results);\n\n      if (results.length > 0) {\n        let max = results[0];\n\n        for (let i = 1; i < results.length; i++) {\n          if (results[i].low > max.low) {\n            max = results[i];\n          }\n        }\n\n        return max.event;\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Iterate over everything in the timeline.\n   * @param  callback The callback to invoke with every item\n   */\n\n\n  forEach(callback) {\n    if (this._root !== null) {\n      const allNodes = [];\n\n      this._root.traverse(node => allNodes.push(node));\n\n      allNodes.forEach(node => {\n        if (node.event) {\n          callback(node.event);\n        }\n      });\n    }\n\n    return this;\n  }\n  /**\n   * Iterate over everything in the array in which the given time\n   * overlaps with the time and duration time of the event.\n   * @param  time The time to check if items are overlapping\n   * @param  callback The callback to invoke with every item\n   */\n\n\n  forEachAtTime(time, callback) {\n    if (this._root !== null) {\n      const results = [];\n\n      this._root.search(time, results);\n\n      results.forEach(node => {\n        if (node.event) {\n          callback(node.event);\n        }\n      });\n    }\n\n    return this;\n  }\n  /**\n   * Iterate over everything in the array in which the time is greater\n   * than or equal to the given time.\n   * @param  time The time to check if items are before\n   * @param  callback The callback to invoke with every item\n   */\n\n\n  forEachFrom(time, callback) {\n    if (this._root !== null) {\n      const results = [];\n\n      this._root.searchAfter(time, results);\n\n      results.forEach(node => {\n        if (node.event) {\n          callback(node.event);\n        }\n      });\n    }\n\n    return this;\n  }\n  /**\n   * Clean up\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    if (this._root !== null) {\n      this._root.traverse(node => node.dispose());\n    }\n\n    this._root = null;\n    return this;\n  }\n\n} //-------------------------------------\n// \tINTERVAL NODE HELPER\n//-------------------------------------\n\n/**\n * Represents a node in the binary search tree, with the addition\n * of a \"high\" value which keeps track of the highest value of\n * its children.\n * References:\n * https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/\n * http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf\n * @param low\n * @param high\n */\n\nclass IntervalNode {\n  constructor(low, high, event) {\n    // the nodes to the left\n    this._left = null; // the nodes to the right\n\n    this._right = null; // the parent node\n\n    this.parent = null; // the number of child nodes\n\n    this.height = 0;\n    this.event = event; // the low value\n\n    this.low = low; // the high value\n\n    this.high = high; // the high value for this and all child nodes\n\n    this.max = this.high;\n  }\n  /**\n   * Insert a node into the correct spot in the tree\n   */\n\n\n  insert(node) {\n    if (node.low <= this.low) {\n      if (this.left === null) {\n        this.left = node;\n      } else {\n        this.left.insert(node);\n      }\n    } else if (this.right === null) {\n      this.right = node;\n    } else {\n      this.right.insert(node);\n    }\n  }\n  /**\n   * Search the tree for nodes which overlap\n   * with the given point\n   * @param  point  The point to query\n   * @param  results  The array to put the results\n   */\n\n\n  search(point, results) {\n    // If p is to the right of the rightmost point of any interval\n    // in this node and all children, there won't be any matches.\n    if (point > this.max) {\n      return;\n    } // Search left children\n\n\n    if (this.left !== null) {\n      this.left.search(point, results);\n    } // Check this node\n\n\n    if (this.low <= point && this.high > point) {\n      results.push(this);\n    } // If p is to the left of the time of this interval,\n    // then it can't be in any child to the right.\n\n\n    if (this.low > point) {\n      return;\n    } // Search right children\n\n\n    if (this.right !== null) {\n      this.right.search(point, results);\n    }\n  }\n  /**\n   * Search the tree for nodes which are less\n   * than the given point\n   * @param  point  The point to query\n   * @param  results  The array to put the results\n   */\n\n\n  searchAfter(point, results) {\n    // Check this node\n    if (this.low >= point) {\n      results.push(this);\n\n      if (this.left !== null) {\n        this.left.searchAfter(point, results);\n      }\n    } // search the right side\n\n\n    if (this.right !== null) {\n      this.right.searchAfter(point, results);\n    }\n  }\n  /**\n   * Invoke the callback on this element and both it's branches\n   * @param  {Function}  callback\n   */\n\n\n  traverse(callback) {\n    callback(this);\n\n    if (this.left !== null) {\n      this.left.traverse(callback);\n    }\n\n    if (this.right !== null) {\n      this.right.traverse(callback);\n    }\n  }\n  /**\n   * Update the height of the node\n   */\n\n\n  updateHeight() {\n    if (this.left !== null && this.right !== null) {\n      this.height = Math.max(this.left.height, this.right.height) + 1;\n    } else if (this.right !== null) {\n      this.height = this.right.height + 1;\n    } else if (this.left !== null) {\n      this.height = this.left.height + 1;\n    } else {\n      this.height = 0;\n    }\n  }\n  /**\n   * Update the height of the node\n   */\n\n\n  updateMax() {\n    this.max = this.high;\n\n    if (this.left !== null) {\n      this.max = Math.max(this.max, this.left.max);\n    }\n\n    if (this.right !== null) {\n      this.max = Math.max(this.max, this.right.max);\n    }\n  }\n  /**\n   * The balance is how the leafs are distributed on the node\n   * @return  Negative numbers are balanced to the right\n   */\n\n\n  getBalance() {\n    let balance = 0;\n\n    if (this.left !== null && this.right !== null) {\n      balance = this.left.height - this.right.height;\n    } else if (this.left !== null) {\n      balance = this.left.height + 1;\n    } else if (this.right !== null) {\n      balance = -(this.right.height + 1);\n    }\n\n    return balance;\n  }\n  /**\n   * @returns true if this node is the left child of its parent\n   */\n\n\n  isLeftChild() {\n    return this.parent !== null && this.parent.left === this;\n  }\n  /**\n   * get/set the left node\n   */\n\n\n  get left() {\n    return this._left;\n  }\n\n  set left(node) {\n    this._left = node;\n\n    if (node !== null) {\n      node.parent = this;\n    }\n\n    this.updateHeight();\n    this.updateMax();\n  }\n  /**\n   * get/set the right node\n   */\n\n\n  get right() {\n    return this._right;\n  }\n\n  set right(node) {\n    this._right = node;\n\n    if (node !== null) {\n      node.parent = this;\n    }\n\n    this.updateHeight();\n    this.updateMax();\n  }\n  /**\n   * null out references.\n   */\n\n\n  dispose() {\n    this.parent = null;\n    this._left = null;\n    this._right = null;\n    this.event = null;\n  }\n\n}","import { noOp } from \"../util/Interface\";\n/**\n * TransportEvent is an internal class used by [[Transport]]\n * to schedule events. Do no invoke this class directly, it is\n * handled from within Tone.Transport.\n */\n\nexport class TransportEvent {\n  /**\n   * @param transport The transport object which the event belongs to\n   */\n  constructor(transport, opts) {\n    /**\n     * The unique id of the event\n     */\n    this.id = TransportEvent._eventId++;\n    const options = Object.assign(TransportEvent.getDefaults(), opts);\n    this.transport = transport;\n    this.callback = options.callback;\n    this._once = options.once;\n    this.time = options.time;\n  }\n\n  static getDefaults() {\n    return {\n      callback: noOp,\n      once: false,\n      time: 0\n    };\n  }\n  /**\n   * Invoke the event callback.\n   * @param  time  The AudioContext time in seconds of the event\n   */\n\n\n  invoke(time) {\n    if (this.callback) {\n      this.callback(time);\n\n      if (this._once) {\n        this.transport.clear(this.id);\n      }\n    }\n  }\n  /**\n   * Clean up\n   */\n\n\n  dispose() {\n    this.callback = undefined;\n    return this;\n  }\n\n}\n/**\n * Current ID counter\n */\n\nTransportEvent._eventId = 0;","import { TicksClass } from \"../type/Ticks\";\nimport { TransportEvent } from \"./TransportEvent\";\n/**\n * TransportRepeatEvent is an internal class used by Tone.Transport\n * to schedule repeat events. This class should not be instantiated directly.\n */\n\nexport class TransportRepeatEvent extends TransportEvent {\n  /**\n   * @param transport The transport object which the event belongs to\n   */\n  constructor(transport, opts) {\n    super(transport, opts);\n    /**\n     * The ID of the current timeline event\n     */\n\n    this._currentId = -1;\n    /**\n     * The ID of the next timeline event\n     */\n\n    this._nextId = -1;\n    /**\n     * The time of the next event\n     */\n\n    this._nextTick = this.time;\n    /**\n     * a reference to the bound start method\n     */\n\n    this._boundRestart = this._restart.bind(this);\n    const options = Object.assign(TransportRepeatEvent.getDefaults(), opts);\n    this.duration = new TicksClass(transport.context, options.duration).valueOf();\n    this._interval = new TicksClass(transport.context, options.interval).valueOf();\n    this._nextTick = options.time;\n    this.transport.on(\"start\", this._boundRestart);\n    this.transport.on(\"loopStart\", this._boundRestart);\n    this.context = this.transport.context;\n\n    this._restart();\n  }\n\n  static getDefaults() {\n    return Object.assign({}, TransportEvent.getDefaults(), {\n      duration: Infinity,\n      interval: 1,\n      once: false\n    });\n  }\n  /**\n   * Invoke the callback. Returns the tick time which\n   * the next event should be scheduled at.\n   * @param  time  The AudioContext time in seconds of the event\n   */\n\n\n  invoke(time) {\n    // create more events if necessary\n    this._createEvents(time); // call the super class\n\n\n    super.invoke(time);\n  }\n  /**\n   * Push more events onto the timeline to keep up with the position of the timeline\n   */\n\n\n  _createEvents(time) {\n    // schedule the next event\n    const ticks = this.transport.getTicksAtTime(time);\n\n    if (ticks >= this.time && ticks >= this._nextTick && this._nextTick + this._interval < this.time + this.duration) {\n      this._nextTick += this._interval;\n      this._currentId = this._nextId;\n      this._nextId = this.transport.scheduleOnce(this.invoke.bind(this), new TicksClass(this.context, this._nextTick).toSeconds());\n    }\n  }\n  /**\n   * Push more events onto the timeline to keep up with the position of the timeline\n   */\n\n\n  _restart(time) {\n    this.transport.clear(this._currentId);\n    this.transport.clear(this._nextId);\n    this._nextTick = this.time;\n    const ticks = this.transport.getTicksAtTime(time);\n\n    if (ticks > this.time) {\n      this._nextTick = this.time + Math.ceil((ticks - this.time) / this._interval) * this._interval;\n    }\n\n    this._currentId = this.transport.scheduleOnce(this.invoke.bind(this), new TicksClass(this.context, this._nextTick).toSeconds());\n    this._nextTick += this._interval;\n    this._nextId = this.transport.scheduleOnce(this.invoke.bind(this), new TicksClass(this.context, this._nextTick).toSeconds());\n  }\n  /**\n   * Clean up\n   */\n\n\n  dispose() {\n    super.dispose();\n    this.transport.clear(this._currentId);\n    this.transport.clear(this._nextId);\n    this.transport.off(\"start\", this._boundRestart);\n    this.transport.off(\"loopStart\", this._boundRestart);\n    return this;\n  }\n\n}","import { TimeClass } from \"../../core/type/Time\";\nimport { TimelineValue } from \"../../core/util/TimelineValue\";\nimport { onContextClose, onContextInit } from \"../context/ContextInitialization\";\nimport { Gain } from \"../context/Gain\";\nimport { ToneWithContext } from \"../context/ToneWithContext\";\nimport { TicksClass } from \"../type/Ticks\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { readOnly, writable } from \"../util/Interface\";\nimport { IntervalTimeline } from \"../util/IntervalTimeline\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isArray, isDefined } from \"../util/TypeCheck\";\nimport { Clock } from \"./Clock\";\nimport { TransportEvent } from \"./TransportEvent\";\nimport { TransportRepeatEvent } from \"./TransportRepeatEvent\";\n/**\n * Transport for timing musical events.\n * Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)\n * Transport timing events pass in the exact time of the scheduled event\n * in the argument of the callback function. Pass that time value to the object\n * you're scheduling. <br><br>\n * A single transport is created for you when the library is initialized.\n * <br><br>\n * The transport emits the events: \"start\", \"stop\", \"pause\", and \"loop\" which are\n * called with the time of that event as the argument.\n *\n * @example\n * const osc = new Tone.Oscillator().toDestination();\n * // repeated event every 8th note\n * Tone.Transport.scheduleRepeat((time) => {\n * \t// use the callback time to schedule events\n * \tosc.start(time).stop(time + 0.1);\n * }, \"8n\");\n * // transport must be started before it starts invoking events\n * Tone.Transport.start();\n * @category Core\n */\n\nexport class Transport extends ToneWithContext {\n  constructor() {\n    super(optionsFromArguments(Transport.getDefaults(), arguments));\n    this.name = \"Transport\"; //-------------------------------------\n    // \tLOOPING\n    //-------------------------------------\n\n    /**\n     * If the transport loops or not.\n     */\n\n    this._loop = new TimelineValue(false);\n    /**\n     * The loop start position in ticks\n     */\n\n    this._loopStart = 0;\n    /**\n     * The loop end position in ticks\n     */\n\n    this._loopEnd = 0; //-------------------------------------\n    // \tTIMELINE EVENTS\n    //-------------------------------------\n\n    /**\n     * All the events in an object to keep track by ID\n     */\n\n    this._scheduledEvents = {};\n    /**\n     * The scheduled events.\n     */\n\n    this._timeline = new Timeline();\n    /**\n     * Repeated events\n     */\n\n    this._repeatedEvents = new IntervalTimeline();\n    /**\n     * All of the synced Signals\n     */\n\n    this._syncedSignals = [];\n    /**\n     * The swing amount\n     */\n\n    this._swingAmount = 0;\n    const options = optionsFromArguments(Transport.getDefaults(), arguments); // CLOCK/TEMPO\n\n    this._ppq = options.ppq;\n    this._clock = new Clock({\n      callback: this._processTick.bind(this),\n      context: this.context,\n      frequency: 0,\n      units: \"bpm\"\n    });\n\n    this._bindClockEvents();\n\n    this.bpm = this._clock.frequency;\n    this._clock.frequency.multiplier = options.ppq;\n    this.bpm.setValueAtTime(options.bpm, 0);\n    readOnly(this, \"bpm\");\n    this._timeSignature = options.timeSignature; // SWING\n\n    this._swingTicks = options.ppq / 2; // 8n\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneWithContext.getDefaults(), {\n      bpm: 120,\n      loopEnd: \"4m\",\n      loopStart: 0,\n      ppq: 192,\n      swing: 0,\n      swingSubdivision: \"8n\",\n      timeSignature: 4\n    });\n  } //-------------------------------------\n  // \tTICKS\n  //-------------------------------------\n\n  /**\n   * called on every tick\n   * @param  tickTime clock relative tick time\n   */\n\n\n  _processTick(tickTime, ticks) {\n    // handle swing\n    if (this._swingAmount > 0 && ticks % this._ppq !== 0 && // not on a downbeat\n    ticks % (this._swingTicks * 2) !== 0) {\n      // add some swing\n      const progress = ticks % (this._swingTicks * 2) / (this._swingTicks * 2);\n\n      const amount = Math.sin(progress * Math.PI) * this._swingAmount;\n\n      tickTime += new TicksClass(this.context, this._swingTicks * 2 / 3).toSeconds() * amount;\n    } // do the loop test\n\n\n    if (this._loop.get(tickTime)) {\n      if (ticks >= this._loopEnd) {\n        this.emit(\"loopEnd\", tickTime);\n\n        this._clock.setTicksAtTime(this._loopStart, tickTime);\n\n        ticks = this._loopStart;\n        this.emit(\"loopStart\", tickTime, this._clock.getSecondsAtTime(tickTime));\n        this.emit(\"loop\", tickTime);\n      }\n    } // invoke the timeline events scheduled on this tick\n\n\n    this._timeline.forEachAtTime(ticks, event => event.invoke(tickTime));\n  } //-------------------------------------\n  // \tSCHEDULABLE EVENTS\n  //-------------------------------------\n\n  /**\n   * Schedule an event along the timeline.\n   * @param callback The callback to be invoked at the time.\n   * @param time The time to invoke the callback at.\n   * @return The id of the event which can be used for canceling the event.\n   * @example\n   * // schedule an event on the 16th measure\n   * Tone.Transport.schedule((time) => {\n   * \t// invoked on measure 16\n   * \tconsole.log(\"measure 16!\");\n   * }, \"16:0:0\");\n   */\n\n\n  schedule(callback, time) {\n    const event = new TransportEvent(this, {\n      callback,\n      time: new TransportTimeClass(this.context, time).toTicks()\n    });\n    return this._addEvent(event, this._timeline);\n  }\n  /**\n   * Schedule a repeated event along the timeline. The event will fire\n   * at the `interval` starting at the `startTime` and for the specified\n   * `duration`.\n   * @param  callback   The callback to invoke.\n   * @param  interval   The duration between successive callbacks. Must be a positive number.\n   * @param  startTime  When along the timeline the events should start being invoked.\n   * @param  duration How long the event should repeat.\n   * @return  The ID of the scheduled event. Use this to cancel the event.\n   * @example\n   * const osc = new Tone.Oscillator().toDestination().start();\n   * // a callback invoked every eighth note after the first measure\n   * Tone.Transport.scheduleRepeat((time) => {\n   * \tosc.start(time).stop(time + 0.1);\n   * }, \"8n\", \"1m\");\n   */\n\n\n  scheduleRepeat(callback, interval, startTime, duration = Infinity) {\n    const event = new TransportRepeatEvent(this, {\n      callback,\n      duration: new TimeClass(this.context, duration).toTicks(),\n      interval: new TimeClass(this.context, interval).toTicks(),\n      time: new TransportTimeClass(this.context, startTime).toTicks()\n    }); // kick it off if the Transport is started\n    // @ts-ignore\n\n    return this._addEvent(event, this._repeatedEvents);\n  }\n  /**\n   * Schedule an event that will be removed after it is invoked.\n   * @param callback The callback to invoke once.\n   * @param time The time the callback should be invoked.\n   * @returns The ID of the scheduled event.\n   */\n\n\n  scheduleOnce(callback, time) {\n    const event = new TransportEvent(this, {\n      callback,\n      once: true,\n      time: new TransportTimeClass(this.context, time).toTicks()\n    });\n    return this._addEvent(event, this._timeline);\n  }\n  /**\n   * Clear the passed in event id from the timeline\n   * @param eventId The id of the event.\n   */\n\n\n  clear(eventId) {\n    if (this._scheduledEvents.hasOwnProperty(eventId)) {\n      const item = this._scheduledEvents[eventId.toString()];\n\n      item.timeline.remove(item.event);\n      item.event.dispose();\n      delete this._scheduledEvents[eventId.toString()];\n    }\n\n    return this;\n  }\n  /**\n   * Add an event to the correct timeline. Keep track of the\n   * timeline it was added to.\n   * @returns the event id which was just added\n   */\n\n\n  _addEvent(event, timeline) {\n    this._scheduledEvents[event.id.toString()] = {\n      event,\n      timeline\n    };\n    timeline.add(event);\n    return event.id;\n  }\n  /**\n   * Remove scheduled events from the timeline after\n   * the given time. Repeated events will be removed\n   * if their startTime is after the given time\n   * @param after Clear all events after this time.\n   */\n\n\n  cancel(after = 0) {\n    const computedAfter = this.toTicks(after);\n\n    this._timeline.forEachFrom(computedAfter, event => this.clear(event.id));\n\n    this._repeatedEvents.forEachFrom(computedAfter, event => this.clear(event.id));\n\n    return this;\n  } //-------------------------------------\n  // \tSTART/STOP/PAUSE\n  //-------------------------------------\n\n  /**\n   * Bind start/stop/pause events from the clock and emit them.\n   */\n\n\n  _bindClockEvents() {\n    this._clock.on(\"start\", (time, offset) => {\n      offset = new TicksClass(this.context, offset).toSeconds();\n      this.emit(\"start\", time, offset);\n    });\n\n    this._clock.on(\"stop\", time => {\n      this.emit(\"stop\", time);\n    });\n\n    this._clock.on(\"pause\", time => {\n      this.emit(\"pause\", time);\n    });\n  }\n  /**\n   * Returns the playback state of the source, either \"started\", \"stopped\", or \"paused\"\n   */\n\n\n  get state() {\n    return this._clock.getStateAtTime(this.now());\n  }\n  /**\n   * Start the transport and all sources synced to the transport.\n   * @param  time The time when the transport should start.\n   * @param  offset The timeline offset to start the transport.\n   * @example\n   * // start the transport in one second starting at beginning of the 5th measure.\n   * Tone.Transport.start(\"+1\", \"4:0:0\");\n   */\n\n\n  start(time, offset) {\n    let offsetTicks;\n\n    if (isDefined(offset)) {\n      offsetTicks = this.toTicks(offset);\n    } // start the clock\n\n\n    this._clock.start(time, offsetTicks);\n\n    return this;\n  }\n  /**\n   * Stop the transport and all sources synced to the transport.\n   * @param time The time when the transport should stop.\n   * @example\n   * Tone.Transport.stop();\n   */\n\n\n  stop(time) {\n    this._clock.stop(time);\n\n    return this;\n  }\n  /**\n   * Pause the transport and all sources synced to the transport.\n   */\n\n\n  pause(time) {\n    this._clock.pause(time);\n\n    return this;\n  }\n  /**\n   * Toggle the current state of the transport. If it is\n   * started, it will stop it, otherwise it will start the Transport.\n   * @param  time The time of the event\n   */\n\n\n  toggle(time) {\n    time = this.toSeconds(time);\n\n    if (this._clock.getStateAtTime(time) !== \"started\") {\n      this.start(time);\n    } else {\n      this.stop(time);\n    }\n\n    return this;\n  } //-------------------------------------\n  // \tSETTERS/GETTERS\n  //-------------------------------------\n\n  /**\n   * The time signature as just the numerator over 4.\n   * For example 4/4 would be just 4 and 6/8 would be 3.\n   * @example\n   * // common time\n   * Tone.Transport.timeSignature = 4;\n   * // 7/8\n   * Tone.Transport.timeSignature = [7, 8];\n   * // this will be reduced to a single number\n   * Tone.Transport.timeSignature; // returns 3.5\n   */\n\n\n  get timeSignature() {\n    return this._timeSignature;\n  }\n\n  set timeSignature(timeSig) {\n    if (isArray(timeSig)) {\n      timeSig = timeSig[0] / timeSig[1] * 4;\n    }\n\n    this._timeSignature = timeSig;\n  }\n  /**\n   * When the Transport.loop = true, this is the starting position of the loop.\n   */\n\n\n  get loopStart() {\n    return new TimeClass(this.context, this._loopStart, \"i\").toSeconds();\n  }\n\n  set loopStart(startPosition) {\n    this._loopStart = this.toTicks(startPosition);\n  }\n  /**\n   * When the Transport.loop = true, this is the ending position of the loop.\n   */\n\n\n  get loopEnd() {\n    return new TimeClass(this.context, this._loopEnd, \"i\").toSeconds();\n  }\n\n  set loopEnd(endPosition) {\n    this._loopEnd = this.toTicks(endPosition);\n  }\n  /**\n   * If the transport loops or not.\n   */\n\n\n  get loop() {\n    return this._loop.get(this.now());\n  }\n\n  set loop(loop) {\n    this._loop.set(loop, this.now());\n  }\n  /**\n   * Set the loop start and stop at the same time.\n   * @example\n   * // loop over the first measure\n   * Tone.Transport.setLoopPoints(0, \"1m\");\n   * Tone.Transport.loop = true;\n   */\n\n\n  setLoopPoints(startPosition, endPosition) {\n    this.loopStart = startPosition;\n    this.loopEnd = endPosition;\n    return this;\n  }\n  /**\n   * The swing value. Between 0-1 where 1 equal to the note + half the subdivision.\n   */\n\n\n  get swing() {\n    return this._swingAmount;\n  }\n\n  set swing(amount) {\n    // scale the values to a normal range\n    this._swingAmount = amount;\n  }\n  /**\n   * Set the subdivision which the swing will be applied to.\n   * The default value is an 8th note. Value must be less\n   * than a quarter note.\n   */\n\n\n  get swingSubdivision() {\n    return new TicksClass(this.context, this._swingTicks).toNotation();\n  }\n\n  set swingSubdivision(subdivision) {\n    this._swingTicks = this.toTicks(subdivision);\n  }\n  /**\n   * The Transport's position in Bars:Beats:Sixteenths.\n   * Setting the value will jump to that position right away.\n   */\n\n\n  get position() {\n    const now = this.now();\n\n    const ticks = this._clock.getTicksAtTime(now);\n\n    return new TicksClass(this.context, ticks).toBarsBeatsSixteenths();\n  }\n\n  set position(progress) {\n    const ticks = this.toTicks(progress);\n    this.ticks = ticks;\n  }\n  /**\n   * The Transport's position in seconds\n   * Setting the value will jump to that position right away.\n   */\n\n\n  get seconds() {\n    return this._clock.seconds;\n  }\n\n  set seconds(s) {\n    const now = this.now();\n\n    const ticks = this._clock.frequency.timeToTicks(s, now);\n\n    this.ticks = ticks;\n  }\n  /**\n   * The Transport's loop position as a normalized value. Always\n   * returns 0 if the transport if loop is not true.\n   */\n\n\n  get progress() {\n    if (this.loop) {\n      const now = this.now();\n\n      const ticks = this._clock.getTicksAtTime(now);\n\n      return (ticks - this._loopStart) / (this._loopEnd - this._loopStart);\n    } else {\n      return 0;\n    }\n  }\n  /**\n   * The transports current tick position.\n   */\n\n\n  get ticks() {\n    return this._clock.ticks;\n  }\n\n  set ticks(t) {\n    if (this._clock.ticks !== t) {\n      const now = this.now(); // stop everything synced to the transport\n\n      if (this.state === \"started\") {\n        const ticks = this._clock.getTicksAtTime(now); // schedule to start on the next tick, #573\n\n\n        const time = this._clock.getTimeOfTick(Math.ceil(ticks));\n\n        this.emit(\"stop\", time);\n\n        this._clock.setTicksAtTime(t, time); // restart it with the new time\n\n\n        this.emit(\"start\", time, this._clock.getSecondsAtTime(time));\n      } else {\n        this._clock.setTicksAtTime(t, now);\n      }\n    }\n  }\n  /**\n   * Get the clock's ticks at the given time.\n   * @param  time  When to get the tick value\n   * @return The tick value at the given time.\n   */\n\n\n  getTicksAtTime(time) {\n    return Math.round(this._clock.getTicksAtTime(time));\n  }\n  /**\n   * Return the elapsed seconds at the given time.\n   * @param  time  When to get the elapsed seconds\n   * @return  The number of elapsed seconds\n   */\n\n\n  getSecondsAtTime(time) {\n    return this._clock.getSecondsAtTime(time);\n  }\n  /**\n   * Pulses Per Quarter note. This is the smallest resolution\n   * the Transport timing supports. This should be set once\n   * on initialization and not set again. Changing this value\n   * after other objects have been created can cause problems.\n   */\n\n\n  get PPQ() {\n    return this._clock.frequency.multiplier;\n  }\n\n  set PPQ(ppq) {\n    this._clock.frequency.multiplier = ppq;\n  } //-------------------------------------\n  // \tSYNCING\n  //-------------------------------------\n\n  /**\n   * Returns the time aligned to the next subdivision\n   * of the Transport. If the Transport is not started,\n   * it will return 0.\n   * Note: this will not work precisely during tempo ramps.\n   * @param  subdivision  The subdivision to quantize to\n   * @return  The context time of the next subdivision.\n   * @example\n   * // the transport must be started, otherwise returns 0\n   * Tone.Transport.start();\n   * Tone.Transport.nextSubdivision(\"4n\");\n   */\n\n\n  nextSubdivision(subdivision) {\n    subdivision = this.toTicks(subdivision);\n\n    if (this.state !== \"started\") {\n      // if the transport's not started, return 0\n      return 0;\n    } else {\n      const now = this.now(); // the remainder of the current ticks and the subdivision\n\n      const transportPos = this.getTicksAtTime(now);\n      const remainingTicks = subdivision - transportPos % subdivision;\n      return this._clock.nextTickTime(remainingTicks, now);\n    }\n  }\n  /**\n   * Attaches the signal to the tempo control signal so that\n   * any changes in the tempo will change the signal in the same\n   * ratio.\n   *\n   * @param signal\n   * @param ratio Optionally pass in the ratio between the two signals.\n   * \t\t\tOtherwise it will be computed based on their current values.\n   */\n\n\n  syncSignal(signal, ratio) {\n    if (!ratio) {\n      // get the sync ratio\n      const now = this.now();\n\n      if (signal.getValueAtTime(now) !== 0) {\n        const bpm = this.bpm.getValueAtTime(now);\n        const computedFreq = 1 / (60 / bpm / this.PPQ);\n        ratio = signal.getValueAtTime(now) / computedFreq;\n      } else {\n        ratio = 0;\n      }\n    }\n\n    const ratioSignal = new Gain(ratio); // @ts-ignore\n\n    this.bpm.connect(ratioSignal); // @ts-ignore\n\n    ratioSignal.connect(signal._param);\n\n    this._syncedSignals.push({\n      initial: signal.value,\n      ratio: ratioSignal,\n      signal\n    });\n\n    signal.value = 0;\n    return this;\n  }\n  /**\n   * Unsyncs a previously synced signal from the transport's control.\n   * See Transport.syncSignal.\n   */\n\n\n  unsyncSignal(signal) {\n    for (let i = this._syncedSignals.length - 1; i >= 0; i--) {\n      const syncedSignal = this._syncedSignals[i];\n\n      if (syncedSignal.signal === signal) {\n        syncedSignal.ratio.dispose();\n        syncedSignal.signal.value = syncedSignal.initial;\n\n        this._syncedSignals.splice(i, 1);\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._clock.dispose();\n\n    writable(this, \"bpm\");\n\n    this._timeline.dispose();\n\n    this._repeatedEvents.dispose();\n\n    return this;\n  }\n\n}\nEmitter.mixin(Transport); //-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\n\nonContextInit(context => {\n  context.transport = new Transport({\n    context\n  });\n});\nonContextClose(context => {\n  context.transport.dispose();\n});","import { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * Volume is a simple volume node, useful for creating a volume fader.\n *\n * @example\n * const vol = new Tone.Volume(-12).toDestination();\n * const osc = new Tone.Oscillator().connect(vol).start();\n * @category Component\n */\n\nexport class Volume extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]));\n    this.name = \"Volume\";\n    const options = optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]);\n    this.input = this.output = new Gain({\n      context: this.context,\n      gain: options.volume,\n      units: \"decibels\"\n    });\n    this.volume = this.output.gain;\n    readOnly(this, \"volume\");\n    this._unmutedVolume = options.volume; // set the mute initially\n\n    this.mute = options.mute;\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      mute: false,\n      volume: 0\n    });\n  }\n  /**\n   * Mute the output.\n   * @example\n   * const vol = new Tone.Volume(-12).toDestination();\n   * const osc = new Tone.Oscillator().connect(vol).start();\n   * // mute the output\n   * vol.mute = true;\n   */\n\n\n  get mute() {\n    return this.volume.value === -Infinity;\n  }\n\n  set mute(mute) {\n    if (!this.mute && mute) {\n      this._unmutedVolume = this.volume.value; // maybe it should ramp here?\n\n      this.volume.value = -Infinity;\n    } else if (this.mute && !mute) {\n      this.volume.value = this._unmutedVolume;\n    }\n  }\n  /**\n   * clean up\n   */\n\n\n  dispose() {\n    super.dispose();\n    this.input.dispose();\n    this.volume.dispose();\n    return this;\n  }\n\n}","import { Volume } from \"../../component/channel/Volume\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { onContextClose, onContextInit } from \"./ContextInitialization\";\nimport { Gain } from \"./Gain\";\nimport { connectSeries, ToneAudioNode } from \"./ToneAudioNode\";\n/**\n * A single master output which is connected to the\n * AudioDestinationNode (aka your speakers).\n * It provides useful conveniences such as the ability\n * to set the volume and mute the entire application.\n * It also gives you the ability to apply master effects to your application.\n *\n * @example\n * const oscillator = new Tone.Oscillator().start();\n * // the audio will go from the oscillator to the speakers\n * oscillator.connect(Tone.Destination);\n * // a convenience for connecting to the master output is also provided:\n * oscillator.toDestination();\n * @category Core\n */\n\nexport class Destination extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Destination.getDefaults(), arguments));\n    this.name = \"Destination\";\n    this.input = new Volume({\n      context: this.context\n    });\n    this.output = new Gain({\n      context: this.context\n    });\n    /**\n     * The volume of the master output.\n     */\n\n    this.volume = this.input.volume;\n    const options = optionsFromArguments(Destination.getDefaults(), arguments);\n    connectSeries(this.input, this.output, this.context.rawContext.destination);\n    this.mute = options.mute;\n    this._internalChannels = [this.input, this.context.rawContext.destination, this.output];\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      mute: false,\n      volume: 0\n    });\n  }\n  /**\n   * Mute the output.\n   * @example\n   * const oscillator = new Tone.Oscillator().start().toDestination();\n   * setTimeout(() => {\n   * \t// mute the output\n   * \tTone.Destination.mute = true;\n   * }, 1000);\n   */\n\n\n  get mute() {\n    return this.input.mute;\n  }\n\n  set mute(mute) {\n    this.input.mute = mute;\n  }\n  /**\n   * Add a master effects chain. NOTE: this will disconnect any nodes which were previously\n   * chained in the master effects chain.\n   * @param args All arguments will be connected in a row and the Master will be routed through it.\n   * @example\n   * // route all audio through a filter and compressor\n   * const lowpass = new Tone.Filter(800, \"lowpass\");\n   * const compressor = new Tone.Compressor(-18);\n   * Tone.Destination.chain(lowpass, compressor);\n   */\n\n\n  chain(...args) {\n    this.input.disconnect();\n    args.unshift(this.input);\n    args.push(this.output);\n    connectSeries(...args);\n    return this;\n  }\n  /**\n   * The maximum number of channels the system can output\n   * @example\n   * console.log(Tone.Destination.maxChannelCount);\n   */\n\n\n  get maxChannelCount() {\n    return this.context.rawContext.destination.maxChannelCount;\n  }\n  /**\n   * Clean up\n   */\n\n\n  dispose() {\n    super.dispose();\n    this.volume.dispose();\n    return this;\n  }\n\n} //-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\n\nonContextInit(context => {\n  context.destination = new Destination({\n    context\n  });\n});\nonContextClose(context => {\n  context.destination.dispose();\n});","import { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isString } from \"../util/TypeCheck\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\nimport { assert } from \"../util/Debug\";\n/**\n * A data structure for holding multiple buffers in a Map-like datastructure.\n *\n * @example\n * const pianoSamples = new Tone.ToneAudioBuffers({\n * \tC1: \"https://tonejs.github.io/examples/audio/casio/C1.mp3\",\n * \tC2: \"https://tonejs.github.io/examples/audio/casio/C2.mp3\",\n * }, () => {\n * \tconst player = new Tone.Player().toDestination();\n * \t// play one of the samples when they all load\n * \tplayer.buffer = pianoSamples.get(\"C2\");\n * \tplayer.start();\n * });\n * @example\n * // To pass in additional parameters in the second parameter\n * const buffers = new Tone.ToneAudioBuffers({\n * \t urls: {\n * \t\t C1: \"C1.mp3\",\n * \t\t C2: \"C2.mp3\",\n * \t },\n * \t onload: () => console.log(\"loaded\"),\n * \t baseUrl: \"https://tonejs.github.io/examples/audio/casio/\"\n * });\n * @category Core\n */\n\nexport class ToneAudioBuffers extends Tone {\n  constructor() {\n    super();\n    this.name = \"ToneAudioBuffers\";\n    /**\n     * All of the buffers\n     */\n\n    this._buffers = new Map();\n    /**\n     * Keep track of the number of loaded buffers\n     */\n\n    this._loadingCount = 0;\n    const options = optionsFromArguments(ToneAudioBuffers.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\");\n    this.baseUrl = options.baseUrl; // add each one\n\n    Object.keys(options.urls).forEach(name => {\n      this._loadingCount++;\n      const url = options.urls[name];\n      this.add(name, url, this._bufferLoaded.bind(this, options.onload), options.onerror);\n    });\n  }\n\n  static getDefaults() {\n    return {\n      baseUrl: \"\",\n      onerror: noOp,\n      onload: noOp,\n      urls: {}\n    };\n  }\n  /**\n   * True if the buffers object has a buffer by that name.\n   * @param  name  The key or index of the buffer.\n   */\n\n\n  has(name) {\n    return this._buffers.has(name.toString());\n  }\n  /**\n   * Get a buffer by name. If an array was loaded,\n   * then use the array index.\n   * @param  name  The key or index of the buffer.\n   */\n\n\n  get(name) {\n    assert(this.has(name), `ToneAudioBuffers has no buffer named: ${name}`);\n    return this._buffers.get(name.toString());\n  }\n  /**\n   * A buffer was loaded. decrement the counter.\n   */\n\n\n  _bufferLoaded(callback) {\n    this._loadingCount--;\n\n    if (this._loadingCount === 0 && callback) {\n      callback();\n    }\n  }\n  /**\n   * If the buffers are loaded or not\n   */\n\n\n  get loaded() {\n    return Array.from(this._buffers).every(([_, buffer]) => buffer.loaded);\n  }\n  /**\n   * Add a buffer by name and url to the Buffers\n   * @param  name      A unique name to give the buffer\n   * @param  url  Either the url of the bufer, or a buffer which will be added with the given name.\n   * @param  callback  The callback to invoke when the url is loaded.\n   * @param  onerror  Invoked if the buffer can't be loaded\n   */\n\n\n  add(name, url, callback = noOp, onerror = noOp) {\n    if (isString(url)) {\n      this._buffers.set(name.toString(), new ToneAudioBuffer(this.baseUrl + url, callback, onerror));\n    } else {\n      this._buffers.set(name.toString(), new ToneAudioBuffer(url, callback, onerror));\n    }\n\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._buffers.forEach(buffer => buffer.dispose());\n\n    this._buffers.clear();\n\n    return this;\n  }\n\n}","import { ToneWithContext } from \"../context/ToneWithContext\";\nimport { Timeline } from \"./Timeline\";\nimport { onContextClose, onContextInit } from \"../context/ContextInitialization\";\n/**\n * Draw is useful for synchronizing visuals and audio events.\n * Callbacks from Tone.Transport or any of the Tone.Event classes\n * always happen _before_ the scheduled time and are not synchronized\n * to the animation frame so they are not good for triggering tightly\n * synchronized visuals and sound. Draw makes it easy to schedule\n * callbacks using the AudioContext time and uses requestAnimationFrame.\n * @example\n * Tone.Transport.schedule((time) => {\n * \t// use the time argument to schedule a callback with Draw\n * \tTone.Draw.schedule(() => {\n * \t\t// do drawing or DOM manipulation here\n * \t\tconsole.log(time);\n * \t}, time);\n * }, \"+0.5\");\n * Tone.Transport.start();\n * @category Core\n */\n\nexport class Draw extends ToneWithContext {\n  constructor() {\n    super(...arguments);\n    this.name = \"Draw\";\n    /**\n     * The duration after which events are not invoked.\n     */\n\n    this.expiration = 0.25;\n    /**\n     * The amount of time before the scheduled time\n     * that the callback can be invoked. Default is\n     * half the time of an animation frame (0.008 seconds).\n     */\n\n    this.anticipation = 0.008;\n    /**\n     * All of the events.\n     */\n\n    this._events = new Timeline();\n    /**\n     * The draw loop\n     */\n\n    this._boundDrawLoop = this._drawLoop.bind(this);\n    /**\n     * The animation frame id\n     */\n\n    this._animationFrame = -1;\n  }\n  /**\n   * Schedule a function at the given time to be invoked\n   * on the nearest animation frame.\n   * @param  callback  Callback is invoked at the given time.\n   * @param  time      The time relative to the AudioContext time to invoke the callback.\n   * @example\n   * Tone.Transport.scheduleRepeat(time => {\n   * \tTone.Draw.schedule(() => console.log(time), time);\n   * }, 1);\n   * Tone.Transport.start();\n   */\n\n\n  schedule(callback, time) {\n    this._events.add({\n      callback,\n      time: this.toSeconds(time)\n    }); // start the draw loop on the first event\n\n\n    if (this._events.length === 1) {\n      this._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n    }\n\n    return this;\n  }\n  /**\n   * Cancel events scheduled after the given time\n   * @param  after  Time after which scheduled events will be removed from the scheduling timeline.\n   */\n\n\n  cancel(after) {\n    this._events.cancel(this.toSeconds(after));\n\n    return this;\n  }\n  /**\n   * The draw loop\n   */\n\n\n  _drawLoop() {\n    const now = this.context.currentTime;\n\n    while (this._events.length && this._events.peek().time - this.anticipation <= now) {\n      const event = this._events.shift();\n\n      if (event && now - event.time <= this.expiration) {\n        event.callback();\n      }\n    }\n\n    if (this._events.length > 0) {\n      this._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n    }\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._events.dispose();\n\n    cancelAnimationFrame(this._animationFrame);\n    return this;\n  }\n\n} //-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\n\nonContextInit(context => {\n  context.draw = new Draw({\n    context\n  });\n});\nonContextClose(context => {\n  context.draw.dispose();\n});","import { Volume } from \"../component/channel/Volume\";\nimport \"../core/context/Destination\";\nimport \"../core/clock/Transport\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { defaultArg } from \"../core/util/Defaults\";\nimport { noOp, readOnly } from \"../core/util/Interface\";\nimport { StateTimeline } from \"../core/util/StateTimeline\";\nimport { isDefined, isUndef } from \"../core/util/TypeCheck\";\nimport { assert, assertContextRunning } from \"../core/util/Debug\";\nimport { GT } from \"../core/util/Math\";\n/**\n * Base class for sources.\n * start/stop of this.context.transport.\n *\n * ```\n * // Multiple state change events can be chained together,\n * // but must be set in the correct order and with ascending times\n * // OK\n * state.start().stop(\"+0.2\");\n * // OK\n * state.start().stop(\"+0.2\").start(\"+0.4\").stop(\"+0.7\")\n * // BAD\n * state.stop(\"+0.2\").start();\n * // BAD\n * state.start(\"+0.3\").stop(\"+0.2\");\n * ```\n */\n\nexport class Source extends ToneAudioNode {\n  constructor(options) {\n    super(options);\n    /**\n     * Sources have no inputs\n     */\n\n    this.input = undefined;\n    /**\n     * Keep track of the scheduled state.\n     */\n\n    this._state = new StateTimeline(\"stopped\");\n    /**\n     * The synced `start` callback function from the transport\n     */\n\n    this._synced = false;\n    /**\n     * Keep track of all of the scheduled event ids\n     */\n\n    this._scheduled = [];\n    /**\n     * Placeholder functions for syncing/unsyncing to transport\n     */\n\n    this._syncedStart = noOp;\n    this._syncedStop = noOp;\n    this._state.memory = 100;\n    this._state.increasing = true;\n    this._volume = this.output = new Volume({\n      context: this.context,\n      mute: options.mute,\n      volume: options.volume\n    });\n    this.volume = this._volume.volume;\n    readOnly(this, \"volume\");\n    this.onstop = options.onstop;\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      mute: false,\n      onstop: noOp,\n      volume: 0\n    });\n  }\n  /**\n   * Returns the playback state of the source, either \"started\" or \"stopped\".\n   * @example\n   * const player = new Tone.Player(\"https://tonejs.github.io/examples/audio/FWDL.mp3\", () => {\n   * \tplayer.start();\n   * \tconsole.log(player.state);\n   * }).toDestination();\n   */\n\n\n  get state() {\n    if (this._synced) {\n      if (this.context.transport.state === \"started\") {\n        return this._state.getValueAtTime(this.context.transport.seconds);\n      } else {\n        return \"stopped\";\n      }\n    } else {\n      return this._state.getValueAtTime(this.now());\n    }\n  }\n  /**\n   * Mute the output.\n   * @example\n   * const osc = new Tone.Oscillator().toDestination().start();\n   * // mute the output\n   * osc.mute = true;\n   */\n\n\n  get mute() {\n    return this._volume.mute;\n  }\n\n  set mute(mute) {\n    this._volume.mute = mute;\n  }\n  /**\n   * Ensure that the scheduled time is not before the current time.\n   * Should only be used when scheduled unsynced.\n   */\n\n\n  _clampToCurrentTime(time) {\n    if (this._synced) {\n      return time;\n    } else {\n      return Math.max(time, this.context.currentTime);\n    }\n  }\n  /**\n   * Start the source at the specified time. If no time is given,\n   * start the source now.\n   * @param  time When the source should be started.\n   * @example\n   * const source = new Tone.Oscillator().toDestination();\n   * source.start(\"+0.5\"); // starts the source 0.5 seconds from now\n   */\n\n\n  start(time, offset, duration) {\n    let computedTime = isUndef(time) && this._synced ? this.context.transport.seconds : this.toSeconds(time);\n    computedTime = this._clampToCurrentTime(computedTime); // if it's started, stop it and restart it\n\n    if (!this._synced && this._state.getValueAtTime(computedTime) === \"started\") {\n      // time should be strictly greater than the previous start time\n      assert(GT(computedTime, this._state.get(computedTime).time), \"Start time must be strictly greater than previous start time\");\n\n      this._state.cancel(computedTime);\n\n      this._state.setStateAtTime(\"started\", computedTime);\n\n      this.log(\"restart\", computedTime);\n      this.restart(computedTime, offset, duration);\n    } else {\n      this.log(\"start\", computedTime);\n\n      this._state.setStateAtTime(\"started\", computedTime);\n\n      if (this._synced) {\n        // add the offset time to the event\n        const event = this._state.get(computedTime);\n\n        if (event) {\n          event.offset = this.toSeconds(defaultArg(offset, 0));\n          event.duration = duration ? this.toSeconds(duration) : undefined;\n        }\n\n        const sched = this.context.transport.schedule(t => {\n          this._start(t, offset, duration);\n        }, computedTime);\n\n        this._scheduled.push(sched); // if it's already started\n\n\n        if (this.context.transport.state === \"started\") {\n          this._syncedStart(this.now(), this.context.transport.seconds);\n        }\n      } else {\n        this._start(computedTime, offset, duration);\n      }\n\n      assertContextRunning(this.context);\n    }\n\n    return this;\n  }\n  /**\n   * Stop the source at the specified time. If no time is given,\n   * stop the source now.\n   * @param  time When the source should be stopped.\n   * @example\n   * const source = new Tone.Oscillator().toDestination();\n   * source.start();\n   * source.stop(\"+0.5\"); // stops the source 0.5 seconds from now\n   */\n\n\n  stop(time) {\n    let computedTime = isUndef(time) && this._synced ? this.context.transport.seconds : this.toSeconds(time);\n    computedTime = this._clampToCurrentTime(computedTime);\n\n    if (this._state.getValueAtTime(computedTime) === \"started\" || isDefined(this._state.getNextState(\"started\", computedTime))) {\n      this.log(\"stop\", computedTime);\n\n      if (!this._synced) {\n        this._stop(computedTime);\n      } else {\n        const sched = this.context.transport.schedule(this._stop.bind(this), computedTime);\n\n        this._scheduled.push(sched);\n      }\n\n      this._state.cancel(computedTime);\n\n      this._state.setStateAtTime(\"stopped\", computedTime);\n    }\n\n    return this;\n  }\n  /**\n   * Restart the source.\n   */\n\n\n  restart(time, offset, duration) {\n    time = this.toSeconds(time);\n\n    if (this._state.getValueAtTime(time) === \"started\") {\n      this._state.cancel(time);\n\n      this._restart(time, offset, duration);\n    }\n\n    return this;\n  }\n  /**\n   * Sync the source to the Transport so that all subsequent\n   * calls to `start` and `stop` are synced to the TransportTime\n   * instead of the AudioContext time.\n   *\n   * @example\n   * const osc = new Tone.Oscillator().toDestination();\n   * // sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n   * osc.sync().start(0).stop(0.3);\n   * // start the transport.\n   * Tone.Transport.start();\n   * // set it to loop once a second\n   * Tone.Transport.loop = true;\n   * Tone.Transport.loopEnd = 1;\n   */\n\n\n  sync() {\n    if (!this._synced) {\n      this._synced = true;\n\n      this._syncedStart = (time, offset) => {\n        if (offset > 0) {\n          // get the playback state at that time\n          const stateEvent = this._state.get(offset); // listen for start events which may occur in the middle of the sync'ed time\n\n\n          if (stateEvent && stateEvent.state === \"started\" && stateEvent.time !== offset) {\n            // get the offset\n            const startOffset = offset - this.toSeconds(stateEvent.time);\n            let duration;\n\n            if (stateEvent.duration) {\n              duration = this.toSeconds(stateEvent.duration) - startOffset;\n            }\n\n            this._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);\n          }\n        }\n      };\n\n      this._syncedStop = time => {\n        const seconds = this.context.transport.getSecondsAtTime(Math.max(time - this.sampleTime, 0));\n\n        if (this._state.getValueAtTime(seconds) === \"started\") {\n          this._stop(time);\n        }\n      };\n\n      this.context.transport.on(\"start\", this._syncedStart);\n      this.context.transport.on(\"loopStart\", this._syncedStart);\n      this.context.transport.on(\"stop\", this._syncedStop);\n      this.context.transport.on(\"pause\", this._syncedStop);\n      this.context.transport.on(\"loopEnd\", this._syncedStop);\n    }\n\n    return this;\n  }\n  /**\n   * Unsync the source to the Transport. See Source.sync\n   */\n\n\n  unsync() {\n    if (this._synced) {\n      this.context.transport.off(\"stop\", this._syncedStop);\n      this.context.transport.off(\"pause\", this._syncedStop);\n      this.context.transport.off(\"loopEnd\", this._syncedStop);\n      this.context.transport.off(\"start\", this._syncedStart);\n      this.context.transport.off(\"loopStart\", this._syncedStart);\n    }\n\n    this._synced = false; // clear all of the scheduled ids\n\n    this._scheduled.forEach(id => this.context.transport.clear(id));\n\n    this._scheduled = [];\n\n    this._state.cancel(0);\n\n    return this;\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n    this.onstop = noOp;\n    this.unsync();\n\n    this._volume.dispose();\n\n    this._state.dispose();\n\n    return this;\n  }\n\n}","import { connect } from \"../../core/context/ToneAudioNode\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isDefined } from \"../../core/util/TypeCheck\";\nimport { assert } from \"../../core/util/Debug\";\nimport { OneShotSource } from \"../OneShotSource\";\nimport { EQ, GTE, LT } from \"../../core/util/Math\";\n/**\n * Wrapper around the native BufferSourceNode.\n * @category Source\n */\n\nexport class ToneBufferSource extends OneShotSource {\n  constructor() {\n    super(optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"url\", \"onload\"]));\n    this.name = \"ToneBufferSource\";\n    /**\n     * The oscillator\n     */\n\n    this._source = this.context.createBufferSource();\n    this._internalChannels = [this._source];\n    /**\n     * indicators if the source has started/stopped\n     */\n\n    this._sourceStarted = false;\n    this._sourceStopped = false;\n    const options = optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"url\", \"onload\"]);\n    connect(this._source, this._gainNode);\n\n    this._source.onended = () => this._stopSource();\n    /**\n     * The playbackRate of the buffer\n     */\n\n\n    this.playbackRate = new Param({\n      context: this.context,\n      param: this._source.playbackRate,\n      units: \"positive\",\n      value: options.playbackRate\n    }); // set some values initially\n\n    this.loop = options.loop;\n    this.loopStart = options.loopStart;\n    this.loopEnd = options.loopEnd;\n    this._buffer = new ToneAudioBuffer(options.url, options.onload, options.onerror);\n\n    this._internalChannels.push(this._source);\n  }\n\n  static getDefaults() {\n    return Object.assign(OneShotSource.getDefaults(), {\n      url: new ToneAudioBuffer(),\n      loop: false,\n      loopEnd: 0,\n      loopStart: 0,\n      onload: noOp,\n      onerror: noOp,\n      playbackRate: 1\n    });\n  }\n  /**\n   * The fadeIn time of the amplitude envelope.\n   */\n\n\n  get fadeIn() {\n    return this._fadeIn;\n  }\n\n  set fadeIn(t) {\n    this._fadeIn = t;\n  }\n  /**\n   * The fadeOut time of the amplitude envelope.\n   */\n\n\n  get fadeOut() {\n    return this._fadeOut;\n  }\n\n  set fadeOut(t) {\n    this._fadeOut = t;\n  }\n  /**\n   * The curve applied to the fades, either \"linear\" or \"exponential\"\n   */\n\n\n  get curve() {\n    return this._curve;\n  }\n\n  set curve(t) {\n    this._curve = t;\n  }\n  /**\n   * Start the buffer\n   * @param  time When the player should start.\n   * @param  offset The offset from the beginning of the sample to start at.\n   * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)\n   * @param  gain  The gain to play the buffer back at.\n   */\n\n\n  start(time, offset, duration, gain = 1) {\n    assert(this.buffer.loaded, \"buffer is either not set or not loaded\");\n    const computedTime = this.toSeconds(time); // apply the gain envelope\n\n    this._startGain(computedTime, gain); // if it's a loop the default offset is the loopstart point\n\n\n    if (this.loop) {\n      offset = defaultArg(offset, this.loopStart);\n    } else {\n      // otherwise the default offset is 0\n      offset = defaultArg(offset, 0);\n    } // make sure the offset is not less than 0\n\n\n    let computedOffset = Math.max(this.toSeconds(offset), 0); // start the buffer source\n\n    if (this.loop) {\n      // modify the offset if it's greater than the loop time\n      const loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n      const loopStart = this.toSeconds(this.loopStart);\n      const loopDuration = loopEnd - loopStart; // move the offset back\n\n      if (GTE(computedOffset, loopEnd)) {\n        computedOffset = (computedOffset - loopStart) % loopDuration + loopStart;\n      } // when the offset is very close to the duration, set it to 0\n\n\n      if (EQ(computedOffset, this.buffer.duration)) {\n        computedOffset = 0;\n      }\n    } // this.buffer.loaded would have return false if the AudioBuffer was undefined\n\n\n    this._source.buffer = this.buffer.get();\n    this._source.loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n\n    if (LT(computedOffset, this.buffer.duration)) {\n      this._sourceStarted = true;\n\n      this._source.start(computedTime, computedOffset);\n    } // if a duration is given, schedule a stop\n\n\n    if (isDefined(duration)) {\n      let computedDur = this.toSeconds(duration); // make sure it's never negative\n\n      computedDur = Math.max(computedDur, 0);\n      this.stop(computedTime + computedDur);\n    }\n\n    return this;\n  }\n\n  _stopSource(time) {\n    if (!this._sourceStopped && this._sourceStarted) {\n      this._sourceStopped = true;\n\n      this._source.stop(this.toSeconds(time));\n\n      this._onended();\n    }\n  }\n  /**\n   * If loop is true, the loop will start at this position.\n   */\n\n\n  get loopStart() {\n    return this._source.loopStart;\n  }\n\n  set loopStart(loopStart) {\n    this._source.loopStart = this.toSeconds(loopStart);\n  }\n  /**\n   * If loop is true, the loop will end at this position.\n   */\n\n\n  get loopEnd() {\n    return this._source.loopEnd;\n  }\n\n  set loopEnd(loopEnd) {\n    this._source.loopEnd = this.toSeconds(loopEnd);\n  }\n  /**\n   * The audio buffer belonging to the player.\n   */\n\n\n  get buffer() {\n    return this._buffer;\n  }\n\n  set buffer(buffer) {\n    this._buffer.set(buffer);\n  }\n  /**\n   * If the buffer should loop once it's over.\n   */\n\n\n  get loop() {\n    return this._source.loop;\n  }\n\n  set loop(loop) {\n    this._source.loop = loop;\n\n    if (this._sourceStarted) {\n      this.cancelStop();\n    }\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n    this._source.onended = null;\n\n    this._source.disconnect();\n\n    this._buffer.dispose();\n\n    this.playbackRate.dispose();\n    return this;\n  }\n\n}","import { __awaiter } from \"tslib\";\nimport { OfflineContext } from \"../../core/context/OfflineContext\";\n/**\n * Render a segment of the oscillator to an offline context and return the results as an array\n */\n\nexport function generateWaveform(instance, length) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const duration = length / instance.context.sampleRate;\n    const context = new OfflineContext(1, duration, instance.context.sampleRate);\n    const clone = new instance.constructor(Object.assign(instance.get(), {\n      // should do 2 iterations\n      frequency: 2 / duration,\n      // zero out the detune\n      detune: 0,\n      context\n    })).toDestination();\n    clone.start(0);\n    const buffer = yield context.render();\n    return buffer.getChannelData(0);\n  });\n}","import { connect } from \"../../core/context/ToneAudioNode\";\nimport { Param } from \"../../core/context/Param\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OneShotSource } from \"../OneShotSource\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * Wrapper around the native fire-and-forget OscillatorNode.\n * Adds the ability to reschedule the stop method.\n * ***[[Oscillator]] is better for most use-cases***\n * @category Source\n */\n\nexport class ToneOscillatorNode extends OneShotSource {\n  constructor() {\n    super(optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]));\n    this.name = \"ToneOscillatorNode\";\n    /**\n     * The oscillator\n     */\n\n    this._oscillator = this.context.createOscillator();\n    this._internalChannels = [this._oscillator];\n    const options = optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]);\n    connect(this._oscillator, this._gainNode);\n    this.type = options.type;\n    this.frequency = new Param({\n      context: this.context,\n      param: this._oscillator.frequency,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    this.detune = new Param({\n      context: this.context,\n      param: this._oscillator.detune,\n      units: \"cents\",\n      value: options.detune\n    });\n    readOnly(this, [\"frequency\", \"detune\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(OneShotSource.getDefaults(), {\n      detune: 0,\n      frequency: 440,\n      type: \"sine\"\n    });\n  }\n  /**\n   * Start the oscillator node at the given time\n   * @param  time When to start the oscillator\n   */\n\n\n  start(time) {\n    const computedTime = this.toSeconds(time);\n    this.log(\"start\", computedTime);\n\n    this._startGain(computedTime);\n\n    this._oscillator.start(computedTime);\n\n    return this;\n  }\n\n  _stopSource(time) {\n    this._oscillator.stop(time);\n  }\n  /**\n   * Sets an arbitrary custom periodic waveform given a PeriodicWave.\n   * @param  periodicWave PeriodicWave should be created with context.createPeriodicWave\n   */\n\n\n  setPeriodicWave(periodicWave) {\n    this._oscillator.setPeriodicWave(periodicWave);\n\n    return this;\n  }\n  /**\n   * The oscillator type. Either 'sine', 'sawtooth', 'square', or 'triangle'\n   */\n\n\n  get type() {\n    return this._oscillator.type;\n  }\n\n  set type(type) {\n    this._oscillator.type = type;\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    if (this.state === \"started\") {\n      this.stop();\n    }\n\n    this._oscillator.disconnect();\n\n    this.frequency.dispose();\n    this.detune.dispose();\n    return this;\n  }\n\n}","import { __awaiter } from \"tslib\";\nimport { deepEquals, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { isDefined } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { generateWaveform } from \"./OscillatorInterface\";\nimport { ToneOscillatorNode } from \"./ToneOscillatorNode\";\nimport { assertRange } from \"../../core/util/Debug\";\nimport { clamp } from \"../../core/util/Math\";\n/**\n * Oscillator supports a number of features including\n * phase rotation, multiple oscillator types (see Oscillator.type),\n * and Transport syncing (see Oscillator.syncFrequency).\n *\n * @example\n * // make and start a 440hz sine tone\n * const osc = new Tone.Oscillator(440, \"sine\").toDestination().start();\n * @category Source\n */\n\nexport class Oscillator extends Source {\n  constructor() {\n    super(optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]));\n    this.name = \"Oscillator\";\n    /**\n     * the main oscillator\n     */\n\n    this._oscillator = null;\n    const options = optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n    this.frequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    readOnly(this, \"frequency\");\n    this.detune = new Signal({\n      context: this.context,\n      units: \"cents\",\n      value: options.detune\n    });\n    readOnly(this, \"detune\");\n    this._partials = options.partials;\n    this._partialCount = options.partialCount;\n    this._type = options.type;\n\n    if (options.partialCount && options.type !== \"custom\") {\n      this._type = this.baseType + options.partialCount.toString();\n    }\n\n    this.phase = options.phase;\n  }\n\n  static getDefaults() {\n    return Object.assign(Source.getDefaults(), {\n      detune: 0,\n      frequency: 440,\n      partialCount: 0,\n      partials: [],\n      phase: 0,\n      type: \"sine\"\n    });\n  }\n  /**\n   * start the oscillator\n   */\n\n\n  _start(time) {\n    const computedTime = this.toSeconds(time); // new oscillator with previous values\n\n    const oscillator = new ToneOscillatorNode({\n      context: this.context,\n      onended: () => this.onstop(this)\n    });\n    this._oscillator = oscillator;\n\n    if (this._wave) {\n      this._oscillator.setPeriodicWave(this._wave);\n    } else {\n      this._oscillator.type = this._type;\n    } // connect the control signal to the oscillator frequency & detune\n\n\n    this._oscillator.connect(this.output);\n\n    this.frequency.connect(this._oscillator.frequency);\n    this.detune.connect(this._oscillator.detune); // start the oscillator\n\n    this._oscillator.start(computedTime);\n  }\n  /**\n   * stop the oscillator\n   */\n\n\n  _stop(time) {\n    const computedTime = this.toSeconds(time);\n\n    if (this._oscillator) {\n      this._oscillator.stop(computedTime);\n    }\n  }\n  /**\n   * Restart the oscillator. Does not stop the oscillator, but instead\n   * just cancels any scheduled 'stop' from being invoked.\n   */\n\n\n  _restart(time) {\n    const computedTime = this.toSeconds(time);\n    this.log(\"restart\", computedTime);\n\n    if (this._oscillator) {\n      this._oscillator.cancelStop();\n    }\n\n    this._state.cancel(computedTime);\n\n    return this;\n  }\n  /**\n   * Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n   * will also affect the oscillators frequency.\n   * @example\n   * const osc = new Tone.Oscillator().toDestination().start();\n   * osc.frequency.value = 440;\n   * // the ratio between the bpm and the frequency will be maintained\n   * osc.syncFrequency();\n   * // double the tempo\n   * Tone.Transport.bpm.value *= 2;\n   * // the frequency of the oscillator is doubled to 880\n   */\n\n\n  syncFrequency() {\n    this.context.transport.syncSignal(this.frequency);\n    return this;\n  }\n  /**\n   * Unsync the oscillator's frequency from the Transport.\n   * See Oscillator.syncFrequency\n   */\n\n\n  unsyncFrequency() {\n    this.context.transport.unsyncSignal(this.frequency);\n    return this;\n  }\n  /**\n   * Get a cached periodic wave. Avoids having to recompute\n   * the oscillator values when they have already been computed\n   * with the same values.\n   */\n\n\n  _getCachedPeriodicWave() {\n    if (this._type === \"custom\") {\n      const oscProps = Oscillator._periodicWaveCache.find(description => {\n        return description.phase === this._phase && deepEquals(description.partials, this._partials);\n      });\n\n      return oscProps;\n    } else {\n      const oscProps = Oscillator._periodicWaveCache.find(description => {\n        return description.type === this._type && description.phase === this._phase;\n      });\n\n      this._partialCount = oscProps ? oscProps.partialCount : this._partialCount;\n      return oscProps;\n    }\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  set type(type) {\n    this._type = type;\n    const isBasicType = [\"sine\", \"square\", \"sawtooth\", \"triangle\"].indexOf(type) !== -1;\n\n    if (this._phase === 0 && isBasicType) {\n      this._wave = undefined;\n      this._partialCount = 0; // just go with the basic approach\n\n      if (this._oscillator !== null) {\n        // already tested that it's a basic type\n        this._oscillator.type = type;\n      }\n    } else {\n      // first check if the value is cached\n      const cache = this._getCachedPeriodicWave();\n\n      if (isDefined(cache)) {\n        const {\n          partials,\n          wave\n        } = cache;\n        this._wave = wave;\n        this._partials = partials;\n\n        if (this._oscillator !== null) {\n          this._oscillator.setPeriodicWave(this._wave);\n        }\n      } else {\n        const [real, imag] = this._getRealImaginary(type, this._phase);\n\n        const periodicWave = this.context.createPeriodicWave(real, imag);\n        this._wave = periodicWave;\n\n        if (this._oscillator !== null) {\n          this._oscillator.setPeriodicWave(this._wave);\n        } // set the cache\n\n\n        Oscillator._periodicWaveCache.push({\n          imag,\n          partialCount: this._partialCount,\n          partials: this._partials,\n          phase: this._phase,\n          real,\n          type: this._type,\n          wave: this._wave\n        });\n\n        if (Oscillator._periodicWaveCache.length > 100) {\n          Oscillator._periodicWaveCache.shift();\n        }\n      }\n    }\n  }\n\n  get baseType() {\n    return this._type.replace(this.partialCount.toString(), \"\");\n  }\n\n  set baseType(baseType) {\n    if (this.partialCount && this._type !== \"custom\" && baseType !== \"custom\") {\n      this.type = baseType + this.partialCount;\n    } else {\n      this.type = baseType;\n    }\n  }\n\n  get partialCount() {\n    return this._partialCount;\n  }\n\n  set partialCount(p) {\n    assertRange(p, 0);\n    let type = this._type;\n    const partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(this._type);\n\n    if (partial) {\n      type = partial[1];\n    }\n\n    if (this._type !== \"custom\") {\n      if (p === 0) {\n        this.type = type;\n      } else {\n        this.type = type + p.toString();\n      }\n    } else {\n      // extend or shorten the partials array\n      const fullPartials = new Float32Array(p); // copy over the partials array\n\n      this._partials.forEach((v, i) => fullPartials[i] = v);\n\n      this._partials = Array.from(fullPartials);\n      this.type = this._type;\n    }\n  }\n  /**\n   * Returns the real and imaginary components based\n   * on the oscillator type.\n   * @returns [real: Float32Array, imaginary: Float32Array]\n   */\n\n\n  _getRealImaginary(type, phase) {\n    const fftSize = 4096;\n    let periodicWaveSize = fftSize / 2;\n    const real = new Float32Array(periodicWaveSize);\n    const imag = new Float32Array(periodicWaveSize);\n    let partialCount = 1;\n\n    if (type === \"custom\") {\n      partialCount = this._partials.length + 1;\n      this._partialCount = this._partials.length;\n      periodicWaveSize = partialCount; // if the partial count is 0, don't bother doing any computation\n\n      if (this._partials.length === 0) {\n        return [real, imag];\n      }\n    } else {\n      const partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(type);\n\n      if (partial) {\n        partialCount = parseInt(partial[2], 10) + 1;\n        this._partialCount = parseInt(partial[2], 10);\n        type = partial[1];\n        partialCount = Math.max(partialCount, 2);\n        periodicWaveSize = partialCount;\n      } else {\n        this._partialCount = 0;\n      }\n\n      this._partials = [];\n    }\n\n    for (let n = 1; n < periodicWaveSize; ++n) {\n      const piFactor = 2 / (n * Math.PI);\n      let b;\n\n      switch (type) {\n        case \"sine\":\n          b = n <= partialCount ? 1 : 0;\n          this._partials[n - 1] = b;\n          break;\n\n        case \"square\":\n          b = n & 1 ? 2 * piFactor : 0;\n          this._partials[n - 1] = b;\n          break;\n\n        case \"sawtooth\":\n          b = piFactor * (n & 1 ? 1 : -1);\n          this._partials[n - 1] = b;\n          break;\n\n        case \"triangle\":\n          if (n & 1) {\n            b = 2 * (piFactor * piFactor) * (n - 1 >> 1 & 1 ? -1 : 1);\n          } else {\n            b = 0;\n          }\n\n          this._partials[n - 1] = b;\n          break;\n\n        case \"custom\":\n          b = this._partials[n - 1];\n          break;\n\n        default:\n          throw new TypeError(\"Oscillator: invalid type: \" + type);\n      }\n\n      if (b !== 0) {\n        real[n] = -b * Math.sin(phase * n);\n        imag[n] = b * Math.cos(phase * n);\n      } else {\n        real[n] = 0;\n        imag[n] = 0;\n      }\n    }\n\n    return [real, imag];\n  }\n  /**\n   * Compute the inverse FFT for a given phase.\n   */\n\n\n  _inverseFFT(real, imag, phase) {\n    let sum = 0;\n    const len = real.length;\n\n    for (let i = 0; i < len; i++) {\n      sum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);\n    }\n\n    return sum;\n  }\n  /**\n   * Returns the initial value of the oscillator when stopped.\n   * E.g. a \"sine\" oscillator with phase = 90 would return an initial value of -1.\n   */\n\n\n  getInitialValue() {\n    const [real, imag] = this._getRealImaginary(this._type, 0);\n\n    let maxValue = 0;\n    const twoPi = Math.PI * 2;\n    const testPositions = 32; // check for peaks in 16 places\n\n    for (let i = 0; i < testPositions; i++) {\n      maxValue = Math.max(this._inverseFFT(real, imag, i / testPositions * twoPi), maxValue);\n    }\n\n    return clamp(-this._inverseFFT(real, imag, this._phase) / maxValue, -1, 1);\n  }\n\n  get partials() {\n    return this._partials.slice(0, this.partialCount);\n  }\n\n  set partials(partials) {\n    this._partials = partials;\n    this._partialCount = this._partials.length;\n\n    if (partials.length) {\n      this.type = \"custom\";\n    }\n  }\n\n  get phase() {\n    return this._phase * (180 / Math.PI);\n  }\n\n  set phase(phase) {\n    this._phase = phase * Math.PI / 180; // reset the type\n\n    this.type = this._type;\n  }\n\n  asArray(length = 1024) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return generateWaveform(this, length);\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    if (this._oscillator !== null) {\n      this._oscillator.dispose();\n    }\n\n    this._wave = undefined;\n    this.frequency.dispose();\n    this.detune.dispose();\n    return this;\n  }\n\n}\n/**\n * Cache the periodic waves to avoid having to redo computations\n */\n\nOscillator._periodicWaveCache = [];","import { optionsFromArguments } from \"../core/util/Defaults\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { connectSignal } from \"./Signal\";\n/**\n * A signal operator has an input and output and modifies the signal.\n */\n\nexport class SignalOperator extends ToneAudioNode {\n  constructor() {\n    super(Object.assign(optionsFromArguments(SignalOperator.getDefaults(), arguments, [\"context\"])));\n  }\n\n  connect(destination, outputNum = 0, inputNum = 0) {\n    connectSignal(this, destination, outputNum, inputNum);\n    return this;\n  }\n\n}","import { optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isFunction } from \"../core/util/TypeCheck\";\nimport { assert } from \"../core/util/Debug\";\nimport { Signal } from \"./Signal\";\nimport { SignalOperator } from \"./SignalOperator\";\n/**\n * Wraps the native Web Audio API\n * [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n *\n * @example\n * const osc = new Tone.Oscillator().toDestination().start();\n * // multiply the output of the signal by 2 using the waveshaper's function\n * const timesTwo = new Tone.WaveShaper((val) => val * 2, 2048).connect(osc.frequency);\n * const signal = new Tone.Signal(440).connect(timesTwo);\n * @category Signal\n */\n\nexport class WaveShaper extends SignalOperator {\n  constructor() {\n    super(Object.assign(optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"])));\n    this.name = \"WaveShaper\";\n    /**\n     * the waveshaper node\n     */\n\n    this._shaper = this.context.createWaveShaper();\n    /**\n     * The input to the waveshaper node.\n     */\n\n    this.input = this._shaper;\n    /**\n     * The output from the waveshaper node\n     */\n\n    this.output = this._shaper;\n    const options = optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"]);\n\n    if (isArray(options.mapping) || options.mapping instanceof Float32Array) {\n      this.curve = Float32Array.from(options.mapping);\n    } else if (isFunction(options.mapping)) {\n      this.setMap(options.mapping, options.length);\n    }\n  }\n\n  static getDefaults() {\n    return Object.assign(Signal.getDefaults(), {\n      length: 1024\n    });\n  }\n  /**\n   * Uses a mapping function to set the value of the curve.\n   * @param mapping The function used to define the values.\n   *                The mapping function take two arguments:\n   *                the first is the value at the current position\n   *                which goes from -1 to 1 over the number of elements\n   *                in the curve array. The second argument is the array position.\n   * @example\n   * const shaper = new Tone.WaveShaper();\n   * // map the input signal from [-1, 1] to [0, 10]\n   * shaper.setMap((val, index) => (val + 1) * 5);\n   */\n\n\n  setMap(mapping, length = 1024) {\n    const array = new Float32Array(length);\n\n    for (let i = 0, len = length; i < len; i++) {\n      const normalized = i / (len - 1) * 2 - 1;\n      array[i] = mapping(normalized, i);\n    }\n\n    this.curve = array;\n    return this;\n  }\n  /**\n   * The array to set as the waveshaper curve. For linear curves\n   * array length does not make much difference, but for complex curves\n   * longer arrays will provide smoother interpolation.\n   */\n\n\n  get curve() {\n    return this._shaper.curve;\n  }\n\n  set curve(mapping) {\n    this._shaper.curve = mapping;\n  }\n  /**\n   * Specifies what type of oversampling (if any) should be used when\n   * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\".\n   */\n\n\n  get oversample() {\n    return this._shaper.oversample;\n  }\n\n  set oversample(oversampling) {\n    const isOverSampleType = [\"none\", \"2x\", \"4x\"].some(str => str.includes(oversampling));\n    assert(isOverSampleType, \"oversampling must be either 'none', '2x', or '4x'\");\n    this._shaper.oversample = oversampling;\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._shaper.disconnect();\n\n    return this;\n  }\n\n}","import { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n/**\n * AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1].\n * See {@link GainToAudio}.\n * @category Signal\n */\n\nexport class AudioToGain extends SignalOperator {\n  constructor() {\n    super(...arguments);\n    this.name = \"AudioToGain\";\n    /**\n     * The node which converts the audio ranges\n     */\n\n    this._norm = new WaveShaper({\n      context: this.context,\n      mapping: x => (x + 1) / 2\n    });\n    /**\n     * The AudioRange input [-1, 1]\n     */\n\n    this.input = this._norm;\n    /**\n     * The GainRange output [0, 1]\n     */\n\n    this.output = this._norm;\n  }\n  /**\n   * clean up\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._norm.dispose();\n\n    return this;\n  }\n\n}","import { Gain } from \"../core/context/Gain\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal } from \"./Signal\";\n/**\n * Multiply two incoming signals. Or, if a number is given in the constructor,\n * multiplies the incoming signal by that value.\n *\n * @example\n * // multiply two signals\n * const mult = new Tone.Multiply();\n * const sigA = new Tone.Signal(3);\n * const sigB = new Tone.Signal(4);\n * sigA.connect(mult);\n * sigB.connect(mult.factor);\n * // output of mult is 12.\n * @example\n * // multiply a signal and a number\n * const mult = new Tone.Multiply(10);\n * const sig = new Tone.Signal(2).connect(mult);\n * // the output of mult is 20.\n * @category Signal\n */\n\nexport class Multiply extends Signal {\n  constructor() {\n    super(Object.assign(optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"])));\n    this.name = \"Multiply\";\n    /**\n     * Indicates if the value should be overridden on connection\n     */\n\n    this.override = false;\n    const options = optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"]);\n    this._mult = this.input = this.output = new Gain({\n      context: this.context,\n      minValue: options.minValue,\n      maxValue: options.maxValue\n    });\n    this.factor = this._param = this._mult.gain;\n    this.factor.setValueAtTime(options.value, 0);\n  }\n\n  static getDefaults() {\n    return Object.assign(Signal.getDefaults(), {\n      value: 0\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._mult.dispose();\n\n    return this;\n  }\n\n}","import { __awaiter } from \"tslib\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\n/**\n * An amplitude modulated oscillator node. It is implemented with\n * two oscillators, one which modulators the other's amplitude\n * through a gain node.\n * ```\n *    +-------------+       +----------+\n *    | Carrier Osc +>------> GainNode |\n *    +-------------+       |          +--->Output\n *                      +---> gain     |\n * +---------------+    |   +----------+\n * | Modulator Osc +>---+\n * +---------------+\n * ```\n * @offline 0.2 1\n * @example\n * const amOsc = new Tone.AMOscillator(30, \"sine\", \"square\").toDestination().start();\n * @category Source\n */\n\nexport class AMOscillator extends Source {\n  constructor() {\n    super(optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n    this.name = \"AMOscillator\";\n    /**\n     * convert the -1,1 output to 0,1\n     */\n\n    this._modulationScale = new AudioToGain({\n      context: this.context\n    });\n    /**\n     * the node where the modulation happens\n     */\n\n    this._modulationNode = new Gain({\n      context: this.context\n    });\n    const options = optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n    this._carrier = new Oscillator({\n      context: this.context,\n      detune: options.detune,\n      frequency: options.frequency,\n      onstop: () => this.onstop(this),\n      phase: options.phase,\n      type: options.type\n    });\n    this.frequency = this._carrier.frequency, this.detune = this._carrier.detune;\n    this._modulator = new Oscillator({\n      context: this.context,\n      phase: options.phase,\n      type: options.modulationType\n    });\n    this.harmonicity = new Multiply({\n      context: this.context,\n      units: \"positive\",\n      value: options.harmonicity\n    }); // connections\n\n    this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\n    this._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\n    this._carrier.chain(this._modulationNode, this.output);\n\n    readOnly(this, [\"frequency\", \"detune\", \"harmonicity\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(Oscillator.getDefaults(), {\n      harmonicity: 1,\n      modulationType: \"square\"\n    });\n  }\n  /**\n   * start the oscillator\n   */\n\n\n  _start(time) {\n    this._modulator.start(time);\n\n    this._carrier.start(time);\n  }\n  /**\n   * stop the oscillator\n   */\n\n\n  _stop(time) {\n    this._modulator.stop(time);\n\n    this._carrier.stop(time);\n  }\n\n  _restart(time) {\n    this._modulator.restart(time);\n\n    this._carrier.restart(time);\n  }\n  /**\n   * The type of the carrier oscillator\n   */\n\n\n  get type() {\n    return this._carrier.type;\n  }\n\n  set type(type) {\n    this._carrier.type = type;\n  }\n\n  get baseType() {\n    return this._carrier.baseType;\n  }\n\n  set baseType(baseType) {\n    this._carrier.baseType = baseType;\n  }\n\n  get partialCount() {\n    return this._carrier.partialCount;\n  }\n\n  set partialCount(partialCount) {\n    this._carrier.partialCount = partialCount;\n  }\n  /**\n   * The type of the modulator oscillator\n   */\n\n\n  get modulationType() {\n    return this._modulator.type;\n  }\n\n  set modulationType(type) {\n    this._modulator.type = type;\n  }\n\n  get phase() {\n    return this._carrier.phase;\n  }\n\n  set phase(phase) {\n    this._carrier.phase = phase;\n    this._modulator.phase = phase;\n  }\n\n  get partials() {\n    return this._carrier.partials;\n  }\n\n  set partials(partials) {\n    this._carrier.partials = partials;\n  }\n\n  asArray(length = 1024) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return generateWaveform(this, length);\n    });\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n    this.frequency.dispose();\n    this.detune.dispose();\n    this.harmonicity.dispose();\n\n    this._carrier.dispose();\n\n    this._modulator.dispose();\n\n    this._modulationNode.dispose();\n\n    this._modulationScale.dispose();\n\n    return this;\n  }\n\n}","import { __awaiter } from \"tslib\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\n/**\n * FMOscillator implements a frequency modulation synthesis\n * ```\n *                                              +-------------+\n * +---------------+        +-------------+     | Carrier Osc |\n * | Modulator Osc +>-------> GainNode    |     |             +--->Output\n * +---------------+        |             +>----> frequency   |\n *                       +--> gain        |     +-------------+\n *                       |  +-------------+\n * +-----------------+   |\n * | modulationIndex +>--+\n * +-----------------+\n * ```\n *\n * @offline 0.1 1\n * @example\n * const fmOsc = new Tone.FMOscillator({\n * \tfrequency: 200,\n * \ttype: \"square\",\n * \tmodulationType: \"triangle\",\n * \tharmonicity: 0.2,\n * \tmodulationIndex: 3\n * }).toDestination().start();\n * @category Source\n */\n\nexport class FMOscillator extends Source {\n  constructor() {\n    super(optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n    this.name = \"FMOscillator\";\n    /**\n     * the node where the modulation happens\n     */\n\n    this._modulationNode = new Gain({\n      context: this.context,\n      gain: 0\n    });\n    const options = optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n    this._carrier = new Oscillator({\n      context: this.context,\n      detune: options.detune,\n      frequency: 0,\n      onstop: () => this.onstop(this),\n      phase: options.phase,\n      type: options.type\n    });\n    this.detune = this._carrier.detune;\n    this.frequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    this._modulator = new Oscillator({\n      context: this.context,\n      phase: options.phase,\n      type: options.modulationType\n    });\n    this.harmonicity = new Multiply({\n      context: this.context,\n      units: \"positive\",\n      value: options.harmonicity\n    });\n    this.modulationIndex = new Multiply({\n      context: this.context,\n      units: \"positive\",\n      value: options.modulationIndex\n    }); // connections\n\n    this.frequency.connect(this._carrier.frequency);\n    this.frequency.chain(this.harmonicity, this._modulator.frequency);\n    this.frequency.chain(this.modulationIndex, this._modulationNode);\n\n    this._modulator.connect(this._modulationNode.gain);\n\n    this._modulationNode.connect(this._carrier.frequency);\n\n    this._carrier.connect(this.output);\n\n    this.detune.connect(this._modulator.detune);\n    readOnly(this, [\"modulationIndex\", \"frequency\", \"detune\", \"harmonicity\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(Oscillator.getDefaults(), {\n      harmonicity: 1,\n      modulationIndex: 2,\n      modulationType: \"square\"\n    });\n  }\n  /**\n   * start the oscillator\n   */\n\n\n  _start(time) {\n    this._modulator.start(time);\n\n    this._carrier.start(time);\n  }\n  /**\n   * stop the oscillator\n   */\n\n\n  _stop(time) {\n    this._modulator.stop(time);\n\n    this._carrier.stop(time);\n  }\n\n  _restart(time) {\n    this._modulator.restart(time);\n\n    this._carrier.restart(time);\n\n    return this;\n  }\n\n  get type() {\n    return this._carrier.type;\n  }\n\n  set type(type) {\n    this._carrier.type = type;\n  }\n\n  get baseType() {\n    return this._carrier.baseType;\n  }\n\n  set baseType(baseType) {\n    this._carrier.baseType = baseType;\n  }\n\n  get partialCount() {\n    return this._carrier.partialCount;\n  }\n\n  set partialCount(partialCount) {\n    this._carrier.partialCount = partialCount;\n  }\n  /**\n   * The type of the modulator oscillator\n   */\n\n\n  get modulationType() {\n    return this._modulator.type;\n  }\n\n  set modulationType(type) {\n    this._modulator.type = type;\n  }\n\n  get phase() {\n    return this._carrier.phase;\n  }\n\n  set phase(phase) {\n    this._carrier.phase = phase;\n    this._modulator.phase = phase;\n  }\n\n  get partials() {\n    return this._carrier.partials;\n  }\n\n  set partials(partials) {\n    this._carrier.partials = partials;\n  }\n\n  asArray(length = 1024) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return generateWaveform(this, length);\n    });\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n    this.frequency.dispose();\n    this.harmonicity.dispose();\n\n    this._carrier.dispose();\n\n    this._modulator.dispose();\n\n    this._modulationNode.dispose();\n\n    this.modulationIndex.dispose();\n    return this;\n  }\n\n}","import { __awaiter } from \"tslib\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { WaveShaper } from \"../../signal/WaveShaper\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\n/**\n * PulseOscillator is an oscillator with control over pulse width,\n * also known as the duty cycle. At 50% duty cycle (width = 0) the wave is\n * a square wave.\n * [Read more](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n * ```\n *    width = -0.25        width = 0.0          width = 0.25\n *\n *   +-----+            +-------+       +    +-------+     +-+\n *   |     |            |       |       |            |     |\n *   |     |            |       |       |            |     |\n * +-+     +-------+    +       +-------+            +-----+\n *\n *\n *    width = -0.5                              width = 0.5\n *\n *     +---+                                 +-------+   +---+\n *     |   |                                         |   |\n *     |   |                                         |   |\n * +---+   +-------+                                 +---+\n *\n *\n *    width = -0.75                             width = 0.75\n *\n *       +-+                                 +-------+ +-----+\n *       | |                                         | |\n *       | |                                         | |\n * +-----+ +-------+                                 +-+\n * ```\n * @offline 0.1 1\n * @example\n * const pulse = new Tone.PulseOscillator(50, 0.4).toDestination().start();\n * @category Source\n */\n\nexport class PulseOscillator extends Source {\n  constructor() {\n    super(optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]));\n    this.name = \"PulseOscillator\";\n    /**\n     * gate the width amount\n     */\n\n    this._widthGate = new Gain({\n      context: this.context,\n      gain: 0\n    });\n    /**\n     * Threshold the signal to turn it into a square\n     */\n\n    this._thresh = new WaveShaper({\n      context: this.context,\n      mapping: val => val <= 0 ? -1 : 1\n    });\n    const options = optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]);\n    this.width = new Signal({\n      context: this.context,\n      units: \"audioRange\",\n      value: options.width\n    });\n    this._triangle = new Oscillator({\n      context: this.context,\n      detune: options.detune,\n      frequency: options.frequency,\n      onstop: () => this.onstop(this),\n      phase: options.phase,\n      type: \"triangle\"\n    });\n    this.frequency = this._triangle.frequency;\n    this.detune = this._triangle.detune; // connections\n\n    this._triangle.chain(this._thresh, this.output);\n\n    this.width.chain(this._widthGate, this._thresh);\n    readOnly(this, [\"width\", \"frequency\", \"detune\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(Source.getDefaults(), {\n      detune: 0,\n      frequency: 440,\n      phase: 0,\n      type: \"pulse\",\n      width: 0.2\n    });\n  }\n  /**\n   * start the oscillator\n   */\n\n\n  _start(time) {\n    time = this.toSeconds(time);\n\n    this._triangle.start(time);\n\n    this._widthGate.gain.setValueAtTime(1, time);\n  }\n  /**\n   * stop the oscillator\n   */\n\n\n  _stop(time) {\n    time = this.toSeconds(time);\n\n    this._triangle.stop(time); // the width is still connected to the output.\n    // that needs to be stopped also\n\n\n    this._widthGate.gain.cancelScheduledValues(time);\n\n    this._widthGate.gain.setValueAtTime(0, time);\n  }\n\n  _restart(time) {\n    this._triangle.restart(time);\n\n    this._widthGate.gain.cancelScheduledValues(time);\n\n    this._widthGate.gain.setValueAtTime(1, time);\n  }\n  /**\n   * The phase of the oscillator in degrees.\n   */\n\n\n  get phase() {\n    return this._triangle.phase;\n  }\n\n  set phase(phase) {\n    this._triangle.phase = phase;\n  }\n  /**\n   * The type of the oscillator. Always returns \"pulse\".\n   */\n\n\n  get type() {\n    return \"pulse\";\n  }\n  /**\n   * The baseType of the oscillator. Always returns \"pulse\".\n   */\n\n\n  get baseType() {\n    return \"pulse\";\n  }\n  /**\n   * The partials of the waveform. Cannot set partials for this waveform type\n   */\n\n\n  get partials() {\n    return [];\n  }\n  /**\n   * No partials for this waveform type.\n   */\n\n\n  get partialCount() {\n    return 0;\n  }\n  /**\n   * *Internal use* The carrier oscillator type is fed through the\n   * waveshaper node to create the pulse. Using different carrier oscillators\n   * changes oscillator's behavior.\n   */\n\n\n  set carrierType(type) {\n    this._triangle.type = type;\n  }\n\n  asArray(length = 1024) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return generateWaveform(this, length);\n    });\n  }\n  /**\n   * Clean up method.\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._triangle.dispose();\n\n    this.width.dispose();\n\n    this._widthGate.dispose();\n\n    this._thresh.dispose();\n\n    return this;\n  }\n\n}","import { __awaiter } from \"tslib\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp, readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\nimport { assertRange } from \"../../core/util/Debug\";\n/**\n * FatOscillator is an array of oscillators with detune spread between the oscillators\n * @example\n * const fatOsc = new Tone.FatOscillator(\"Ab3\", \"sawtooth\", 40).toDestination().start();\n * @category Source\n */\n\nexport class FatOscillator extends Source {\n  constructor() {\n    super(optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]));\n    this.name = \"FatOscillator\";\n    /**\n     * The array of oscillators\n     */\n\n    this._oscillators = [];\n    const options = optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]);\n    this.frequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    this.detune = new Signal({\n      context: this.context,\n      units: \"cents\",\n      value: options.detune\n    });\n    this._spread = options.spread;\n    this._type = options.type;\n    this._phase = options.phase;\n    this._partials = options.partials;\n    this._partialCount = options.partialCount; // set the count initially\n\n    this.count = options.count;\n    readOnly(this, [\"frequency\", \"detune\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(Oscillator.getDefaults(), {\n      count: 3,\n      spread: 20,\n      type: \"sawtooth\"\n    });\n  }\n  /**\n   * start the oscillator\n   */\n\n\n  _start(time) {\n    time = this.toSeconds(time);\n\n    this._forEach(osc => osc.start(time));\n  }\n  /**\n   * stop the oscillator\n   */\n\n\n  _stop(time) {\n    time = this.toSeconds(time);\n\n    this._forEach(osc => osc.stop(time));\n  }\n\n  _restart(time) {\n    this._forEach(osc => osc.restart(time));\n  }\n  /**\n   * Iterate over all of the oscillators\n   */\n\n\n  _forEach(iterator) {\n    for (let i = 0; i < this._oscillators.length; i++) {\n      iterator(this._oscillators[i], i);\n    }\n  }\n  /**\n   * The type of the oscillator\n   */\n\n\n  get type() {\n    return this._type;\n  }\n\n  set type(type) {\n    this._type = type;\n\n    this._forEach(osc => osc.type = type);\n  }\n  /**\n   * The detune spread between the oscillators. If \"count\" is\n   * set to 3 oscillators and the \"spread\" is set to 40,\n   * the three oscillators would be detuned like this: [-20, 0, 20]\n   * for a total detune spread of 40 cents.\n   * @example\n   * const fatOsc = new Tone.FatOscillator().toDestination().start();\n   * fatOsc.spread = 70;\n   */\n\n\n  get spread() {\n    return this._spread;\n  }\n\n  set spread(spread) {\n    this._spread = spread;\n\n    if (this._oscillators.length > 1) {\n      const start = -spread / 2;\n      const step = spread / (this._oscillators.length - 1);\n\n      this._forEach((osc, i) => osc.detune.value = start + step * i);\n    }\n  }\n  /**\n   * The number of detuned oscillators. Must be an integer greater than 1.\n   * @example\n   * const fatOsc = new Tone.FatOscillator(\"C#3\", \"sawtooth\").toDestination().start();\n   * // use 4 sawtooth oscillators\n   * fatOsc.count = 4;\n   */\n\n\n  get count() {\n    return this._oscillators.length;\n  }\n\n  set count(count) {\n    assertRange(count, 1);\n\n    if (this._oscillators.length !== count) {\n      // dispose the previous oscillators\n      this._forEach(osc => osc.dispose());\n\n      this._oscillators = [];\n\n      for (let i = 0; i < count; i++) {\n        const osc = new Oscillator({\n          context: this.context,\n          volume: -6 - count * 1.1,\n          type: this._type,\n          phase: this._phase + i / count * 360,\n          partialCount: this._partialCount,\n          onstop: i === 0 ? () => this.onstop(this) : noOp\n        });\n\n        if (this.type === \"custom\") {\n          osc.partials = this._partials;\n        }\n\n        this.frequency.connect(osc.frequency);\n        this.detune.connect(osc.detune);\n        osc.detune.overridden = false;\n        osc.connect(this.output);\n        this._oscillators[i] = osc;\n      } // set the spread\n\n\n      this.spread = this._spread;\n\n      if (this.state === \"started\") {\n        this._forEach(osc => osc.start());\n      }\n    }\n  }\n\n  get phase() {\n    return this._phase;\n  }\n\n  set phase(phase) {\n    this._phase = phase;\n\n    this._forEach(osc => osc.phase = phase);\n  }\n\n  get baseType() {\n    return this._oscillators[0].baseType;\n  }\n\n  set baseType(baseType) {\n    this._forEach(osc => osc.baseType = baseType);\n\n    this._type = this._oscillators[0].type;\n  }\n\n  get partials() {\n    return this._oscillators[0].partials;\n  }\n\n  set partials(partials) {\n    this._partials = partials;\n    this._partialCount = this._partials.length;\n\n    if (partials.length) {\n      this._type = \"custom\";\n\n      this._forEach(osc => osc.partials = partials);\n    }\n  }\n\n  get partialCount() {\n    return this._oscillators[0].partialCount;\n  }\n\n  set partialCount(partialCount) {\n    this._partialCount = partialCount;\n\n    this._forEach(osc => osc.partialCount = partialCount);\n\n    this._type = this._oscillators[0].type;\n  }\n\n  asArray(length = 1024) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return generateWaveform(this, length);\n    });\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n    this.frequency.dispose();\n    this.detune.dispose();\n\n    this._forEach(osc => osc.dispose());\n\n    return this;\n  }\n\n}","import { __awaiter } from \"tslib\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\n/**\n * PWMOscillator modulates the width of a Tone.PulseOscillator\n * at the modulationFrequency. This has the effect of continuously\n * changing the timbre of the oscillator by altering the harmonics\n * generated.\n * @offline 0.1 1\n * @example\n * const pwm = new Tone.PWMOscillator(60, 0.3).toDestination().start();\n * @category Source\n */\n\nexport class PWMOscillator extends Source {\n  constructor() {\n    super(optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]));\n    this.name = \"PWMOscillator\";\n    this.sourceType = \"pwm\";\n    /**\n     * Scale the oscillator so it doesn't go silent\n     * at the extreme values.\n     */\n\n    this._scale = new Multiply({\n      context: this.context,\n      value: 2\n    });\n    const options = optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]);\n    this._pulse = new PulseOscillator({\n      context: this.context,\n      frequency: options.modulationFrequency\n    }); // change the pulse oscillator type\n\n    this._pulse.carrierType = \"sine\";\n    this.modulationFrequency = this._pulse.frequency;\n    this._modulator = new Oscillator({\n      context: this.context,\n      detune: options.detune,\n      frequency: options.frequency,\n      onstop: () => this.onstop(this),\n      phase: options.phase\n    });\n    this.frequency = this._modulator.frequency;\n    this.detune = this._modulator.detune; // connections\n\n    this._modulator.chain(this._scale, this._pulse.width);\n\n    this._pulse.connect(this.output);\n\n    readOnly(this, [\"modulationFrequency\", \"frequency\", \"detune\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(Source.getDefaults(), {\n      detune: 0,\n      frequency: 440,\n      modulationFrequency: 0.4,\n      phase: 0,\n      type: \"pwm\"\n    });\n  }\n  /**\n   * start the oscillator\n   */\n\n\n  _start(time) {\n    time = this.toSeconds(time);\n\n    this._modulator.start(time);\n\n    this._pulse.start(time);\n  }\n  /**\n   * stop the oscillator\n   */\n\n\n  _stop(time) {\n    time = this.toSeconds(time);\n\n    this._modulator.stop(time);\n\n    this._pulse.stop(time);\n  }\n  /**\n   * restart the oscillator\n   */\n\n\n  _restart(time) {\n    this._modulator.restart(time);\n\n    this._pulse.restart(time);\n  }\n  /**\n   * The type of the oscillator. Always returns \"pwm\".\n   */\n\n\n  get type() {\n    return \"pwm\";\n  }\n  /**\n   * The baseType of the oscillator. Always returns \"pwm\".\n   */\n\n\n  get baseType() {\n    return \"pwm\";\n  }\n  /**\n   * The partials of the waveform. Cannot set partials for this waveform type\n   */\n\n\n  get partials() {\n    return [];\n  }\n  /**\n   * No partials for this waveform type.\n   */\n\n\n  get partialCount() {\n    return 0;\n  }\n  /**\n   * The phase of the oscillator in degrees.\n   */\n\n\n  get phase() {\n    return this._modulator.phase;\n  }\n\n  set phase(phase) {\n    this._modulator.phase = phase;\n  }\n\n  asArray(length = 1024) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return generateWaveform(this, length);\n    });\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._pulse.dispose();\n\n    this._scale.dispose();\n\n    this._modulator.dispose();\n\n    return this;\n  }\n\n}","import { __awaiter } from \"tslib\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { isNumber, isString } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { AMOscillator } from \"./AMOscillator\";\nimport { FatOscillator } from \"./FatOscillator\";\nimport { FMOscillator } from \"./FMOscillator\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\nimport { PWMOscillator } from \"./PWMOscillator\";\nconst OmniOscillatorSourceMap = {\n  am: AMOscillator,\n  fat: FatOscillator,\n  fm: FMOscillator,\n  oscillator: Oscillator,\n  pulse: PulseOscillator,\n  pwm: PWMOscillator\n};\n/**\n * OmniOscillator aggregates all of the oscillator types into one.\n * @offline 0.1 1\n * @example\n * const omniOsc = new Tone.OmniOscillator(\"C#4\", \"pwm\").toDestination().start();\n * @category Source\n */\n\nexport class OmniOscillator extends Source {\n  constructor() {\n    super(optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]));\n    this.name = \"OmniOscillator\";\n    const options = optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n    this.frequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    this.detune = new Signal({\n      context: this.context,\n      units: \"cents\",\n      value: options.detune\n    });\n    readOnly(this, [\"frequency\", \"detune\"]); // set the options\n\n    this.set(options);\n  }\n\n  static getDefaults() {\n    return Object.assign(Oscillator.getDefaults(), FMOscillator.getDefaults(), AMOscillator.getDefaults(), FatOscillator.getDefaults(), PulseOscillator.getDefaults(), PWMOscillator.getDefaults());\n  }\n  /**\n   * start the oscillator\n   */\n\n\n  _start(time) {\n    this._oscillator.start(time);\n  }\n  /**\n   * start the oscillator\n   */\n\n\n  _stop(time) {\n    this._oscillator.stop(time);\n  }\n\n  _restart(time) {\n    this._oscillator.restart(time);\n\n    return this;\n  }\n  /**\n   * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\n   * prefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\n   * types. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\n   * oscillator's class are accessible when the oscillator is set to that type, but throws an error\n   * when it's not.\n   * @example\n   * const omniOsc = new Tone.OmniOscillator().toDestination().start();\n   * omniOsc.type = \"pwm\";\n   * // modulationFrequency is parameter which is available\n   * // only when the type is \"pwm\".\n   * omniOsc.modulationFrequency.value = 0.5;\n   */\n\n\n  get type() {\n    let prefix = \"\";\n\n    if ([\"am\", \"fm\", \"fat\"].some(p => this._sourceType === p)) {\n      prefix = this._sourceType;\n    }\n\n    return prefix + this._oscillator.type;\n  }\n\n  set type(type) {\n    if (type.substr(0, 2) === \"fm\") {\n      this._createNewOscillator(\"fm\");\n\n      this._oscillator = this._oscillator;\n      this._oscillator.type = type.substr(2);\n    } else if (type.substr(0, 2) === \"am\") {\n      this._createNewOscillator(\"am\");\n\n      this._oscillator = this._oscillator;\n      this._oscillator.type = type.substr(2);\n    } else if (type.substr(0, 3) === \"fat\") {\n      this._createNewOscillator(\"fat\");\n\n      this._oscillator = this._oscillator;\n      this._oscillator.type = type.substr(3);\n    } else if (type === \"pwm\") {\n      this._createNewOscillator(\"pwm\");\n\n      this._oscillator = this._oscillator;\n    } else if (type === \"pulse\") {\n      this._createNewOscillator(\"pulse\");\n    } else {\n      this._createNewOscillator(\"oscillator\");\n\n      this._oscillator = this._oscillator;\n      this._oscillator.type = type;\n    }\n  }\n  /**\n   * The value is an empty array when the type is not \"custom\".\n   * This is not available on \"pwm\" and \"pulse\" oscillator types.\n   * See [[Oscillator.partials]]\n   */\n\n\n  get partials() {\n    return this._oscillator.partials;\n  }\n\n  set partials(partials) {\n    if (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n      this._oscillator.partials = partials;\n    }\n  }\n\n  get partialCount() {\n    return this._oscillator.partialCount;\n  }\n\n  set partialCount(partialCount) {\n    if (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n      this._oscillator.partialCount = partialCount;\n    }\n  }\n\n  set(props) {\n    // make sure the type is set first\n    if (Reflect.has(props, \"type\") && props.type) {\n      this.type = props.type;\n    } // then set the rest\n\n\n    super.set(props);\n    return this;\n  }\n  /**\n   * connect the oscillator to the frequency and detune signals\n   */\n\n\n  _createNewOscillator(oscType) {\n    if (oscType !== this._sourceType) {\n      this._sourceType = oscType;\n      const OscConstructor = OmniOscillatorSourceMap[oscType]; // short delay to avoid clicks on the change\n\n      const now = this.now();\n\n      if (this._oscillator) {\n        const oldOsc = this._oscillator;\n        oldOsc.stop(now); // dispose the old one\n\n        this.context.setTimeout(() => oldOsc.dispose(), this.blockTime);\n      }\n\n      this._oscillator = new OscConstructor({\n        context: this.context\n      });\n      this.frequency.connect(this._oscillator.frequency);\n      this.detune.connect(this._oscillator.detune);\n\n      this._oscillator.connect(this.output);\n\n      this._oscillator.onstop = () => this.onstop(this);\n\n      if (this.state === \"started\") {\n        this._oscillator.start(now);\n      }\n    }\n  }\n\n  get phase() {\n    return this._oscillator.phase;\n  }\n\n  set phase(phase) {\n    this._oscillator.phase = phase;\n  }\n  /**\n   * The source type of the oscillator.\n   * @example\n   * const omniOsc = new Tone.OmniOscillator(440, \"fmsquare\");\n   * console.log(omniOsc.sourceType); // 'fm'\n   */\n\n\n  get sourceType() {\n    return this._sourceType;\n  }\n\n  set sourceType(sType) {\n    // the basetype defaults to sine\n    let baseType = \"sine\";\n\n    if (this._oscillator.type !== \"pwm\" && this._oscillator.type !== \"pulse\") {\n      baseType = this._oscillator.type;\n    } // set the type\n\n\n    if (sType === \"fm\") {\n      this.type = \"fm\" + baseType;\n    } else if (sType === \"am\") {\n      this.type = \"am\" + baseType;\n    } else if (sType === \"fat\") {\n      this.type = \"fat\" + baseType;\n    } else if (sType === \"oscillator\") {\n      this.type = baseType;\n    } else if (sType === \"pulse\") {\n      this.type = \"pulse\";\n    } else if (sType === \"pwm\") {\n      this.type = \"pwm\";\n    }\n  }\n\n  _getOscType(osc, sourceType) {\n    return osc instanceof OmniOscillatorSourceMap[sourceType];\n  }\n  /**\n   * The base type of the oscillator. See [[Oscillator.baseType]]\n   * @example\n   * const omniOsc = new Tone.OmniOscillator(440, \"fmsquare4\");\n   * console.log(omniOsc.sourceType, omniOsc.baseType, omniOsc.partialCount);\n   */\n\n\n  get baseType() {\n    return this._oscillator.baseType;\n  }\n\n  set baseType(baseType) {\n    if (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\") && baseType !== \"pulse\" && baseType !== \"pwm\") {\n      this._oscillator.baseType = baseType;\n    }\n  }\n  /**\n   * The width of the oscillator when sourceType === \"pulse\".\n   * See [[PWMOscillator.width]]\n   */\n\n\n  get width() {\n    if (this._getOscType(this._oscillator, \"pulse\")) {\n      return this._oscillator.width;\n    } else {\n      return undefined;\n    }\n  }\n  /**\n   * The number of detuned oscillators when sourceType === \"fat\".\n   * See [[FatOscillator.count]]\n   */\n\n\n  get count() {\n    if (this._getOscType(this._oscillator, \"fat\")) {\n      return this._oscillator.count;\n    } else {\n      return undefined;\n    }\n  }\n\n  set count(count) {\n    if (this._getOscType(this._oscillator, \"fat\") && isNumber(count)) {\n      this._oscillator.count = count;\n    }\n  }\n  /**\n   * The detune spread between the oscillators when sourceType === \"fat\".\n   * See [[FatOscillator.count]]\n   */\n\n\n  get spread() {\n    if (this._getOscType(this._oscillator, \"fat\")) {\n      return this._oscillator.spread;\n    } else {\n      return undefined;\n    }\n  }\n\n  set spread(spread) {\n    if (this._getOscType(this._oscillator, \"fat\") && isNumber(spread)) {\n      this._oscillator.spread = spread;\n    }\n  }\n  /**\n   * The type of the modulator oscillator. Only if the oscillator is set to \"am\" or \"fm\" types.\n   * See [[AMOscillator]] or [[FMOscillator]]\n   */\n\n\n  get modulationType() {\n    if (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n      return this._oscillator.modulationType;\n    } else {\n      return undefined;\n    }\n  }\n\n  set modulationType(mType) {\n    if ((this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) && isString(mType)) {\n      this._oscillator.modulationType = mType;\n    }\n  }\n  /**\n   * The modulation index when the sourceType === \"fm\"\n   * See [[FMOscillator]].\n   */\n\n\n  get modulationIndex() {\n    if (this._getOscType(this._oscillator, \"fm\")) {\n      return this._oscillator.modulationIndex;\n    } else {\n      return undefined;\n    }\n  }\n  /**\n   * Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n   * See [[AMOscillator]] or [[FMOscillator]]\n   */\n\n\n  get harmonicity() {\n    if (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n      return this._oscillator.harmonicity;\n    } else {\n      return undefined;\n    }\n  }\n  /**\n   * The modulationFrequency Signal of the oscillator when sourceType === \"pwm\"\n   * see [[PWMOscillator]]\n   * @min 0.1\n   * @max 5\n   */\n\n\n  get modulationFrequency() {\n    if (this._getOscType(this._oscillator, \"pwm\")) {\n      return this._oscillator.modulationFrequency;\n    } else {\n      return undefined;\n    }\n  }\n\n  asArray(length = 1024) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return generateWaveform(this, length);\n    });\n  }\n\n  dispose() {\n    super.dispose();\n    this.detune.dispose();\n    this.frequency.dispose();\n\n    this._oscillator.dispose();\n\n    return this;\n  }\n\n}","import { assertRange } from \"./Debug\";\n/**\n * Assert that the number is in the given range.\n */\n\nexport function range(min, max = Infinity) {\n  const valueMap = new WeakMap();\n  return function (target, propertyKey) {\n    Reflect.defineProperty(target, propertyKey, {\n      configurable: true,\n      enumerable: true,\n      get: function () {\n        return valueMap.get(this);\n      },\n      set: function (newValue) {\n        assertRange(newValue, min, max);\n        valueMap.set(this, newValue);\n      }\n    });\n  };\n}\n/**\n * Convert the time to seconds and assert that the time is in between the two\n * values when being set.\n */\n\nexport function timeRange(min, max = Infinity) {\n  const valueMap = new WeakMap();\n  return function (target, propertyKey) {\n    Reflect.defineProperty(target, propertyKey, {\n      configurable: true,\n      enumerable: true,\n      get: function () {\n        return valueMap.get(this);\n      },\n      set: function (newValue) {\n        assertRange(this.toSeconds(newValue), min, max);\n        valueMap.set(this, newValue);\n      }\n    });\n  };\n}","import { __awaiter, __decorate } from \"tslib\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isUndef } from \"../../core/util/TypeCheck\";\nimport { Source } from \"../Source\";\nimport { ToneBufferSource } from \"./ToneBufferSource\";\nimport { assertRange } from \"../../core/util/Debug\";\nimport { timeRange } from \"../../core/util/Decorator\";\n/**\n * Player is an audio file player with start, loop, and stop functions.\n * @example\n * const player = new Tone.Player(\"https://tonejs.github.io/examples/audio/FWDL.mp3\").toDestination();\n * // play as soon as the buffer is loaded\n * player.autostart = true;\n * @category Source\n */\n\nexport class Player extends Source {\n  constructor() {\n    super(optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]));\n    this.name = \"Player\";\n    /**\n     * All of the active buffer source nodes\n     */\n\n    this._activeSources = new Set();\n    const options = optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]);\n    this._buffer = new ToneAudioBuffer({\n      onload: this._onload.bind(this, options.onload),\n      onerror: options.onerror,\n      reverse: options.reverse,\n      url: options.url\n    });\n    this.autostart = options.autostart;\n    this._loop = options.loop;\n    this._loopStart = options.loopStart;\n    this._loopEnd = options.loopEnd;\n    this._playbackRate = options.playbackRate;\n    this.fadeIn = options.fadeIn;\n    this.fadeOut = options.fadeOut;\n  }\n\n  static getDefaults() {\n    return Object.assign(Source.getDefaults(), {\n      autostart: false,\n      fadeIn: 0,\n      fadeOut: 0,\n      loop: false,\n      loopEnd: 0,\n      loopStart: 0,\n      onload: noOp,\n      onerror: noOp,\n      playbackRate: 1,\n      reverse: false\n    });\n  }\n  /**\n   * Load the audio file as an audio buffer.\n   * Decodes the audio asynchronously and invokes\n   * the callback once the audio buffer loads.\n   * Note: this does not need to be called if a url\n   * was passed in to the constructor. Only use this\n   * if you want to manually load a new url.\n   * @param url The url of the buffer to load. Filetype support depends on the browser.\n   */\n\n\n  load(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this._buffer.load(url);\n\n      this._onload();\n\n      return this;\n    });\n  }\n  /**\n   * Internal callback when the buffer is loaded.\n   */\n\n\n  _onload(callback = noOp) {\n    callback();\n\n    if (this.autostart) {\n      this.start();\n    }\n  }\n  /**\n   * Internal callback when the buffer is done playing.\n   */\n\n\n  _onSourceEnd(source) {\n    // invoke the onstop function\n    this.onstop(this); // delete the source from the active sources\n\n    this._activeSources.delete(source);\n\n    if (this._activeSources.size === 0 && !this._synced && this._state.getValueAtTime(this.now()) === \"started\") {\n      this._state.setStateAtTime(\"stopped\", this.now());\n    }\n  }\n  /**\n   * Play the buffer at the given startTime. Optionally add an offset\n   * and/or duration which will play the buffer from a position\n   * within the buffer for the given duration.\n   *\n   * @param  time When the player should start.\n   * @param  offset The offset from the beginning of the sample to start at.\n   * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)\n   */\n\n\n  start(time, offset, duration) {\n    super.start(time, offset, duration);\n    return this;\n  }\n  /**\n   * Internal start method\n   */\n\n\n  _start(startTime, offset, duration) {\n    // if it's a loop the default offset is the loopStart point\n    if (this._loop) {\n      offset = defaultArg(offset, this._loopStart);\n    } else {\n      // otherwise the default offset is 0\n      offset = defaultArg(offset, 0);\n    } // compute the values in seconds\n\n\n    let computedOffset = this.toSeconds(offset); // if it's synced, it should factor in the playback rate for computing the offset\n\n    if (this._synced) {\n      computedOffset *= this._playbackRate;\n    } // compute the duration which is either the passed in duration of the buffer.duration - offset\n\n\n    const origDuration = duration;\n    duration = defaultArg(duration, Math.max(this._buffer.duration - computedOffset, 0));\n    let computedDuration = this.toSeconds(duration); // scale it by the playback rate\n\n    computedDuration = computedDuration / this._playbackRate; // get the start time\n\n    startTime = this.toSeconds(startTime); // make the source\n\n    const source = new ToneBufferSource({\n      url: this._buffer,\n      context: this.context,\n      fadeIn: this.fadeIn,\n      fadeOut: this.fadeOut,\n      loop: this._loop,\n      loopEnd: this._loopEnd,\n      loopStart: this._loopStart,\n      onended: this._onSourceEnd.bind(this),\n      playbackRate: this._playbackRate\n    }).connect(this.output); // set the looping properties\n\n    if (!this._loop && !this._synced) {\n      // cancel the previous stop\n      this._state.cancel(startTime + computedDuration); // if it's not looping, set the state change at the end of the sample\n\n\n      this._state.setStateAtTime(\"stopped\", startTime + computedDuration, {\n        implicitEnd: true\n      });\n    } // add it to the array of active sources\n\n\n    this._activeSources.add(source); // start it\n\n\n    if (this._loop && isUndef(origDuration)) {\n      source.start(startTime, computedOffset);\n    } else {\n      // subtract the fade out time\n      source.start(startTime, computedOffset, computedDuration - this.toSeconds(this.fadeOut));\n    }\n  }\n  /**\n   * Stop playback.\n   */\n\n\n  _stop(time) {\n    const computedTime = this.toSeconds(time);\n\n    this._activeSources.forEach(source => source.stop(computedTime));\n  }\n  /**\n   * Stop and then restart the player from the beginning (or offset)\n   * @param  time When the player should start.\n   * @param  offset The offset from the beginning of the sample to start at.\n   * @param  duration How long the sample should play. If no duration is given,\n   * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n   */\n\n\n  restart(time, offset, duration) {\n    super.restart(time, offset, duration);\n    return this;\n  }\n\n  _restart(time, offset, duration) {\n    this._stop(time);\n\n    this._start(time, offset, duration);\n  }\n  /**\n   * Seek to a specific time in the player's buffer. If the\n   * source is no longer playing at that time, it will stop.\n   * @param offset The time to seek to.\n   * @param when The time for the seek event to occur.\n   * @example\n   * const player = new Tone.Player(\"https://tonejs.github.io/examples/audio/FWDL.mp3\", () => {\n   * \tplayer.start();\n   * \t// seek to the offset in 1 second from now\n   * \tplayer.seek(0.4, \"+1\");\n   * }).toDestination();\n   */\n\n\n  seek(offset, when) {\n    const computedTime = this.toSeconds(when);\n\n    if (this._state.getValueAtTime(computedTime) === \"started\") {\n      const computedOffset = this.toSeconds(offset); // if it's currently playing, stop it\n\n      this._stop(computedTime); // restart it at the given time\n\n\n      this._start(computedTime, computedOffset);\n    }\n\n    return this;\n  }\n  /**\n   * Set the loop start and end. Will only loop if loop is set to true.\n   * @param loopStart The loop start time\n   * @param loopEnd The loop end time\n   * @example\n   * const player = new Tone.Player(\"https://tonejs.github.io/examples/audio/FWDL.mp3\").toDestination();\n   * // loop between the given points\n   * player.setLoopPoints(0.2, 0.3);\n   * player.loop = true;\n   * player.autostart = true;\n   */\n\n\n  setLoopPoints(loopStart, loopEnd) {\n    this.loopStart = loopStart;\n    this.loopEnd = loopEnd;\n    return this;\n  }\n  /**\n   * If loop is true, the loop will start at this position.\n   */\n\n\n  get loopStart() {\n    return this._loopStart;\n  }\n\n  set loopStart(loopStart) {\n    this._loopStart = loopStart;\n\n    if (this.buffer.loaded) {\n      assertRange(this.toSeconds(loopStart), 0, this.buffer.duration);\n    } // get the current source\n\n\n    this._activeSources.forEach(source => {\n      source.loopStart = loopStart;\n    });\n  }\n  /**\n   * If loop is true, the loop will end at this position.\n   */\n\n\n  get loopEnd() {\n    return this._loopEnd;\n  }\n\n  set loopEnd(loopEnd) {\n    this._loopEnd = loopEnd;\n\n    if (this.buffer.loaded) {\n      assertRange(this.toSeconds(loopEnd), 0, this.buffer.duration);\n    } // get the current source\n\n\n    this._activeSources.forEach(source => {\n      source.loopEnd = loopEnd;\n    });\n  }\n  /**\n   * The audio buffer belonging to the player.\n   */\n\n\n  get buffer() {\n    return this._buffer;\n  }\n\n  set buffer(buffer) {\n    this._buffer.set(buffer);\n  }\n  /**\n   * If the buffer should loop once it's over.\n   */\n\n\n  get loop() {\n    return this._loop;\n  }\n\n  set loop(loop) {\n    // if no change, do nothing\n    if (this._loop === loop) {\n      return;\n    }\n\n    this._loop = loop; // set the loop of all of the sources\n\n    this._activeSources.forEach(source => {\n      source.loop = loop;\n    });\n\n    if (loop) {\n      // remove the next stopEvent\n      const stopEvent = this._state.getNextState(\"stopped\", this.now());\n\n      if (stopEvent) {\n        this._state.cancel(stopEvent.time);\n      }\n    }\n  }\n  /**\n   * The playback speed. 1 is normal speed. This is not a signal because\n   * Safari and iOS currently don't support playbackRate as a signal.\n   */\n\n\n  get playbackRate() {\n    return this._playbackRate;\n  }\n\n  set playbackRate(rate) {\n    this._playbackRate = rate;\n    const now = this.now(); // cancel the stop event since it's at a different time now\n\n    const stopEvent = this._state.getNextState(\"stopped\", now);\n\n    if (stopEvent && stopEvent.implicitEnd) {\n      this._state.cancel(stopEvent.time);\n\n      this._activeSources.forEach(source => source.cancelStop());\n    } // set all the sources\n\n\n    this._activeSources.forEach(source => {\n      source.playbackRate.setValueAtTime(rate, now);\n    });\n  }\n  /**\n   * The direction the buffer should play in\n   */\n\n\n  get reverse() {\n    return this._buffer.reverse;\n  }\n\n  set reverse(rev) {\n    this._buffer.reverse = rev;\n  }\n  /**\n   * If the buffer is loaded\n   */\n\n\n  get loaded() {\n    return this._buffer.loaded;\n  }\n\n  dispose() {\n    super.dispose(); // disconnect all of the players\n\n    this._activeSources.forEach(source => source.dispose());\n\n    this._activeSources.clear();\n\n    this._buffer.dispose();\n\n    return this;\n  }\n\n}\n\n__decorate([timeRange(0)], Player.prototype, \"fadeIn\", void 0);\n\n__decorate([timeRange(0)], Player.prototype, \"fadeOut\", void 0);","import { __awaiter, __decorate } from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { isArray, isObject, isString } from \"../../core/util/TypeCheck\";\nimport { connectSignal, Signal } from \"../../signal/Signal\";\nimport { OfflineContext } from \"../../core/context/OfflineContext\";\nimport { assert } from \"../../core/util/Debug\";\nimport { range, timeRange } from \"../../core/util/Decorator\";\n/**\n * Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)\n * envelope generator. Envelope outputs a signal which\n * can be connected to an AudioParam or Tone.Signal.\n * ```\n *           /\\\n *          /  \\\n *         /    \\\n *        /      \\\n *       /        \\___________\n *      /                     \\\n *     /                       \\\n *    /                         \\\n *   /                           \\\n * ```\n * @offline 2 1\n * @example\n * const env = new Tone.Envelope({\n * \tattack: 0.1,\n * \tdecay: 0.2,\n * \tsustain: 1,\n * \trelease: 0.8,\n * }).toDestination();\n * env.triggerAttackRelease(0.5);\n * @category Component\n */\n\nexport class Envelope extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Envelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n    this.name = \"Envelope\";\n    /**\n     * the signal which is output.\n     */\n\n    this._sig = new Signal({\n      context: this.context,\n      value: 0\n    });\n    /**\n     * The output signal of the envelope\n     */\n\n    this.output = this._sig;\n    /**\n     * Envelope has no input\n     */\n\n    this.input = undefined;\n    const options = optionsFromArguments(Envelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]);\n    this.attack = options.attack;\n    this.decay = options.decay;\n    this.sustain = options.sustain;\n    this.release = options.release;\n    this.attackCurve = options.attackCurve;\n    this.releaseCurve = options.releaseCurve;\n    this.decayCurve = options.decayCurve;\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      attack: 0.01,\n      attackCurve: \"linear\",\n      decay: 0.1,\n      decayCurve: \"exponential\",\n      release: 1,\n      releaseCurve: \"exponential\",\n      sustain: 0.5\n    });\n  }\n  /**\n   * Read the current value of the envelope. Useful for\n   * synchronizing visual output to the envelope.\n   */\n\n\n  get value() {\n    return this.getValueAtTime(this.now());\n  }\n  /**\n   * Get the curve\n   * @param  curve\n   * @param  direction  In/Out\n   * @return The curve name\n   */\n\n\n  _getCurve(curve, direction) {\n    if (isString(curve)) {\n      return curve;\n    } else {\n      // look up the name in the curves array\n      let curveName;\n\n      for (curveName in EnvelopeCurves) {\n        if (EnvelopeCurves[curveName][direction] === curve) {\n          return curveName;\n        }\n      } // return the custom curve\n\n\n      return curve;\n    }\n  }\n  /**\n   * Assign a the curve to the given name using the direction\n   * @param  name\n   * @param  direction In/Out\n   * @param  curve\n   */\n\n\n  _setCurve(name, direction, curve) {\n    // check if it's a valid type\n    if (isString(curve) && Reflect.has(EnvelopeCurves, curve)) {\n      const curveDef = EnvelopeCurves[curve];\n\n      if (isObject(curveDef)) {\n        if (name !== \"_decayCurve\") {\n          this[name] = curveDef[direction];\n        }\n      } else {\n        this[name] = curveDef;\n      }\n    } else if (isArray(curve) && name !== \"_decayCurve\") {\n      this[name] = curve;\n    } else {\n      throw new Error(\"Envelope: invalid curve: \" + curve);\n    }\n  }\n  /**\n   * The shape of the attack.\n   * Can be any of these strings:\n   * * \"linear\"\n   * * \"exponential\"\n   * * \"sine\"\n   * * \"cosine\"\n   * * \"bounce\"\n   * * \"ripple\"\n   * * \"step\"\n   *\n   * Can also be an array which describes the curve. Values\n   * in the array are evenly subdivided and linearly\n   * interpolated over the duration of the attack.\n   * @offline 1 1\n   * @example\n   * const env = new Tone.Envelope().toDestination();\n   * env.attackCurve = \"linear\";\n   * env.triggerAttack();\n   * @example\n   * const env = new Tone.Envelope().toDestination();\n   * // can also be an array\n   * env.attackCurve = [0, 0.2, 0.3, 0.4, 1];\n   * env.triggerAttack();\n   */\n\n\n  get attackCurve() {\n    return this._getCurve(this._attackCurve, \"In\");\n  }\n\n  set attackCurve(curve) {\n    this._setCurve(\"_attackCurve\", \"In\", curve);\n  }\n  /**\n   * The shape of the release. See the attack curve types.\n   * @offline 1 1\n   * @example\n   * const env = new Tone.Envelope({\n   * \trelease: 0.5\n   * });\n   * env.releaseCurve = \"linear\";\n   * env.triggerAttack();\n   * env.triggerRelease(0.5);\n   */\n\n\n  get releaseCurve() {\n    return this._getCurve(this._releaseCurve, \"Out\");\n  }\n\n  set releaseCurve(curve) {\n    this._setCurve(\"_releaseCurve\", \"Out\", curve);\n  }\n  /**\n   * The shape of the decay either \"linear\" or \"exponential\"\n   * @offline 1 1\n   * @example\n   * const env = new Tone.Envelope({\n   * \tsustain: 0.1,\n   * \tdecay: 0.5\n   * });\n   * env.decayCurve = \"linear\";\n   * env.triggerAttack();\n   */\n\n\n  get decayCurve() {\n    return this._decayCurve;\n  }\n\n  set decayCurve(curve) {\n    assert([\"linear\", \"exponential\"].some(c => c === curve), `Invalid envelope curve: ${curve}`);\n    this._decayCurve = curve;\n  }\n  /**\n   * Trigger the attack/decay portion of the ADSR envelope.\n   * @param  time When the attack should start.\n   * @param velocity The velocity of the envelope scales the vales.\n   *                             number between 0-1\n   * @example\n   * const env = new Tone.AmplitudeEnvelope().toDestination();\n   * const osc = new Tone.Oscillator().connect(env).start();\n   * // trigger the attack 0.5 seconds from now with a velocity of 0.2\n   * env.triggerAttack(\"+0.5\", 0.2);\n   */\n\n\n  triggerAttack(time, velocity = 1) {\n    this.log(\"triggerAttack\", time, velocity);\n    time = this.toSeconds(time);\n    const originalAttack = this.toSeconds(this.attack);\n    let attack = originalAttack;\n    const decay = this.toSeconds(this.decay); // check if it's not a complete attack\n\n    const currentValue = this.getValueAtTime(time);\n\n    if (currentValue > 0) {\n      // subtract the current value from the attack time\n      const attackRate = 1 / attack;\n      const remainingDistance = 1 - currentValue; // the attack is now the remaining time\n\n      attack = remainingDistance / attackRate;\n    } // attack\n\n\n    if (attack < this.sampleTime) {\n      this._sig.cancelScheduledValues(time); // case where the attack time is 0 should set instantly\n\n\n      this._sig.setValueAtTime(velocity, time);\n    } else if (this._attackCurve === \"linear\") {\n      this._sig.linearRampTo(velocity, attack, time);\n    } else if (this._attackCurve === \"exponential\") {\n      this._sig.targetRampTo(velocity, attack, time);\n    } else {\n      this._sig.cancelAndHoldAtTime(time);\n\n      let curve = this._attackCurve; // find the starting position in the curve\n\n      for (let i = 1; i < curve.length; i++) {\n        // the starting index is between the two values\n        if (curve[i - 1] <= currentValue && currentValue <= curve[i]) {\n          curve = this._attackCurve.slice(i); // the first index is the current value\n\n          curve[0] = currentValue;\n          break;\n        }\n      }\n\n      this._sig.setValueCurveAtTime(curve, time, attack, velocity);\n    } // decay\n\n\n    if (decay && this.sustain < 1) {\n      const decayValue = velocity * this.sustain;\n      const decayStart = time + attack;\n      this.log(\"decay\", decayStart);\n\n      if (this._decayCurve === \"linear\") {\n        this._sig.linearRampToValueAtTime(decayValue, decay + decayStart);\n      } else {\n        this._sig.exponentialApproachValueAtTime(decayValue, decayStart, decay);\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Triggers the release of the envelope.\n   * @param  time When the release portion of the envelope should start.\n   * @example\n   * const env = new Tone.AmplitudeEnvelope().toDestination();\n   * const osc = new Tone.Oscillator({\n   * \ttype: \"sawtooth\"\n   * }).connect(env).start();\n   * env.triggerAttack();\n   * // trigger the release half a second after the attack\n   * env.triggerRelease(\"+0.5\");\n   */\n\n\n  triggerRelease(time) {\n    this.log(\"triggerRelease\", time);\n    time = this.toSeconds(time);\n    const currentValue = this.getValueAtTime(time);\n\n    if (currentValue > 0) {\n      const release = this.toSeconds(this.release);\n\n      if (release < this.sampleTime) {\n        this._sig.setValueAtTime(0, time);\n      } else if (this._releaseCurve === \"linear\") {\n        this._sig.linearRampTo(0, release, time);\n      } else if (this._releaseCurve === \"exponential\") {\n        this._sig.targetRampTo(0, release, time);\n      } else {\n        assert(isArray(this._releaseCurve), \"releaseCurve must be either 'linear', 'exponential' or an array\");\n\n        this._sig.cancelAndHoldAtTime(time);\n\n        this._sig.setValueCurveAtTime(this._releaseCurve, time, release, currentValue);\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Get the scheduled value at the given time. This will\n   * return the unconverted (raw) value.\n   */\n\n\n  getValueAtTime(time) {\n    return this._sig.getValueAtTime(time);\n  }\n  /**\n   * triggerAttackRelease is shorthand for triggerAttack, then waiting\n   * some duration, then triggerRelease.\n   * @param duration The duration of the sustain.\n   * @param time When the attack should be triggered.\n   * @param velocity The velocity of the envelope.\n   * @example\n   * const env = new Tone.AmplitudeEnvelope().toDestination();\n   * const osc = new Tone.Oscillator().connect(env).start();\n   * // trigger the release 0.5 seconds after the attack\n   * env.triggerAttackRelease(0.5);\n   */\n\n\n  triggerAttackRelease(duration, time, velocity = 1) {\n    time = this.toSeconds(time);\n    this.triggerAttack(time, velocity);\n    this.triggerRelease(time + this.toSeconds(duration));\n    return this;\n  }\n  /**\n   * Cancels all scheduled envelope changes after the given time.\n   */\n\n\n  cancel(after) {\n    this._sig.cancelScheduledValues(this.toSeconds(after));\n\n    return this;\n  }\n  /**\n   * Connect the envelope to a destination node.\n   */\n\n\n  connect(destination, outputNumber = 0, inputNumber = 0) {\n    connectSignal(this, destination, outputNumber, inputNumber);\n    return this;\n  }\n  /**\n   * Render the envelope curve to an array of the given length.\n   * Good for visualizing the envelope curve. Rescales the duration of the\n   * envelope to fit the length.\n   */\n\n\n  asArray(length = 1024) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const duration = length / this.context.sampleRate;\n      const context = new OfflineContext(1, duration, this.context.sampleRate); // normalize the ADSR for the given duration with 20% sustain time\n\n      const attackPortion = this.toSeconds(this.attack) + this.toSeconds(this.decay);\n      const envelopeDuration = attackPortion + this.toSeconds(this.release);\n      const sustainTime = envelopeDuration * 0.1;\n      const totalDuration = envelopeDuration + sustainTime; // @ts-ignore\n\n      const clone = new this.constructor(Object.assign(this.get(), {\n        attack: duration * this.toSeconds(this.attack) / totalDuration,\n        decay: duration * this.toSeconds(this.decay) / totalDuration,\n        release: duration * this.toSeconds(this.release) / totalDuration,\n        context\n      }));\n\n      clone._sig.toDestination();\n\n      clone.triggerAttackRelease(duration * (attackPortion + sustainTime) / totalDuration, 0);\n      const buffer = yield context.render();\n      return buffer.getChannelData(0);\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._sig.dispose();\n\n    return this;\n  }\n\n}\n\n__decorate([timeRange(0)], Envelope.prototype, \"attack\", void 0);\n\n__decorate([timeRange(0)], Envelope.prototype, \"decay\", void 0);\n\n__decorate([range(0, 1)], Envelope.prototype, \"sustain\", void 0);\n\n__decorate([timeRange(0)], Envelope.prototype, \"release\", void 0);\n/**\n * Generate some complex envelope curves.\n */\n\n\nconst EnvelopeCurves = (() => {\n  const curveLen = 128;\n  let i;\n  let k; // cosine curve\n\n  const cosineCurve = [];\n\n  for (i = 0; i < curveLen; i++) {\n    cosineCurve[i] = Math.sin(i / (curveLen - 1) * (Math.PI / 2));\n  } // ripple curve\n\n\n  const rippleCurve = [];\n  const rippleCurveFreq = 6.4;\n\n  for (i = 0; i < curveLen - 1; i++) {\n    k = i / (curveLen - 1);\n    const sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;\n    rippleCurve[i] = sineWave / 10 + k * 0.83;\n  }\n\n  rippleCurve[curveLen - 1] = 1; // stairs curve\n\n  const stairsCurve = [];\n  const steps = 5;\n\n  for (i = 0; i < curveLen; i++) {\n    stairsCurve[i] = Math.ceil(i / (curveLen - 1) * steps) / steps;\n  } // in-out easing curve\n\n\n  const sineCurve = [];\n\n  for (i = 0; i < curveLen; i++) {\n    k = i / (curveLen - 1);\n    sineCurve[i] = 0.5 * (1 - Math.cos(Math.PI * k));\n  } // a bounce curve\n\n\n  const bounceCurve = [];\n\n  for (i = 0; i < curveLen; i++) {\n    k = i / (curveLen - 1);\n    const freq = Math.pow(k, 3) * 4 + 0.2;\n    const val = Math.cos(freq * Math.PI * 2 * k);\n    bounceCurve[i] = Math.abs(val * (1 - k));\n  }\n  /**\n   * Invert a value curve to make it work for the release\n   */\n\n\n  function invertCurve(curve) {\n    const out = new Array(curve.length);\n\n    for (let j = 0; j < curve.length; j++) {\n      out[j] = 1 - curve[j];\n    }\n\n    return out;\n  }\n  /**\n   * reverse the curve\n   */\n\n\n  function reverseCurve(curve) {\n    return curve.slice(0).reverse();\n  }\n  /**\n   * attack and release curve arrays\n   */\n\n\n  return {\n    bounce: {\n      In: invertCurve(bounceCurve),\n      Out: bounceCurve\n    },\n    cosine: {\n      In: cosineCurve,\n      Out: reverseCurve(cosineCurve)\n    },\n    exponential: \"exponential\",\n    linear: \"linear\",\n    ripple: {\n      In: rippleCurve,\n      Out: invertCurve(rippleCurve)\n    },\n    sine: {\n      In: sineCurve,\n      Out: invertCurve(sineCurve)\n    },\n    step: {\n      In: stairsCurve,\n      Out: invertCurve(stairsCurve)\n    }\n  };\n})();","import { Volume } from \"../component/channel/Volume\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Base-class for all instruments\n */\n\nexport class Instrument extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Instrument.getDefaults(), arguments));\n    /**\n     * Keep track of all events scheduled to the transport\n     * when the instrument is 'synced'\n     */\n\n    this._scheduledEvents = [];\n    /**\n     * If the instrument is currently synced\n     */\n\n    this._synced = false;\n    this._original_triggerAttack = this.triggerAttack;\n    this._original_triggerRelease = this.triggerRelease;\n    const options = optionsFromArguments(Instrument.getDefaults(), arguments);\n    this._volume = this.output = new Volume({\n      context: this.context,\n      volume: options.volume\n    });\n    this.volume = this._volume.volume;\n    readOnly(this, \"volume\");\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      volume: 0\n    });\n  }\n  /**\n   * Sync the instrument to the Transport. All subsequent calls of\n   * [[triggerAttack]] and [[triggerRelease]] will be scheduled along the transport.\n   * @example\n   * const fmSynth = new Tone.FMSynth().toDestination();\n   * fmSynth.volume.value = -6;\n   * fmSynth.sync();\n   * // schedule 3 notes when the transport first starts\n   * fmSynth.triggerAttackRelease(\"C4\", \"8n\", 0);\n   * fmSynth.triggerAttackRelease(\"E4\", \"8n\", \"8n\");\n   * fmSynth.triggerAttackRelease(\"G4\", \"8n\", \"4n\");\n   * // start the transport to hear the notes\n   * Tone.Transport.start();\n   */\n\n\n  sync() {\n    if (!this._synced) {\n      this._synced = true;\n\n      this._syncMethod(\"triggerAttack\", 1);\n\n      this._syncMethod(\"triggerRelease\", 0);\n    }\n\n    return this;\n  }\n  /**\n   * Wrap the given method so that it can be synchronized\n   * @param method Which method to wrap and sync\n   * @param  timePosition What position the time argument appears in\n   */\n\n\n  _syncMethod(method, timePosition) {\n    const originalMethod = this[\"_original_\" + method] = this[method];\n\n    this[method] = (...args) => {\n      const time = args[timePosition];\n      const id = this.context.transport.schedule(t => {\n        args[timePosition] = t;\n        originalMethod.apply(this, args);\n      }, time);\n\n      this._scheduledEvents.push(id);\n    };\n  }\n  /**\n   * Unsync the instrument from the Transport\n   */\n\n\n  unsync() {\n    this._scheduledEvents.forEach(id => this.context.transport.clear(id));\n\n    this._scheduledEvents = [];\n\n    if (this._synced) {\n      this._synced = false;\n      this.triggerAttack = this._original_triggerAttack;\n      this.triggerRelease = this._original_triggerRelease;\n    }\n\n    return this;\n  }\n  /**\n   * Trigger the attack and then the release after the duration.\n   * @param  note     The note to trigger.\n   * @param  duration How long the note should be held for before\n   *                         triggering the release. This value must be greater than 0.\n   * @param time  When the note should be triggered.\n   * @param  velocity The velocity the note should be triggered at.\n   * @example\n   * const synth = new Tone.Synth().toDestination();\n   * // trigger \"C4\" for the duration of an 8th note\n   * synth.triggerAttackRelease(\"C4\", \"8n\");\n   */\n\n\n  triggerAttackRelease(note, duration, time, velocity) {\n    const computedTime = this.toSeconds(time);\n    const computedDuration = this.toSeconds(duration);\n    this.triggerAttack(note, computedTime, velocity);\n    this.triggerRelease(computedTime + computedDuration);\n    return this;\n  }\n  /**\n   * clean up\n   * @returns {Instrument} this\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._volume.dispose();\n\n    this.unsync();\n    this._scheduledEvents = [];\n    return this;\n  }\n\n}","import { __decorate } from \"tslib\";\nimport { FrequencyClass } from \"../core/type/Frequency\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { Instrument } from \"../instrument/Instrument\";\nimport { timeRange } from \"../core/util/Decorator\";\n/**\n * Abstract base class for other monophonic instruments to extend.\n */\n\nexport class Monophonic extends Instrument {\n  constructor() {\n    super(optionsFromArguments(Monophonic.getDefaults(), arguments));\n    const options = optionsFromArguments(Monophonic.getDefaults(), arguments);\n    this.portamento = options.portamento;\n    this.onsilence = options.onsilence;\n  }\n\n  static getDefaults() {\n    return Object.assign(Instrument.getDefaults(), {\n      detune: 0,\n      onsilence: noOp,\n      portamento: 0\n    });\n  }\n  /**\n   * Trigger the attack of the note optionally with a given velocity.\n   * @param  note The note to trigger.\n   * @param  time When the note should start.\n   * @param  velocity The velocity scaler determines how \"loud\" the note will be triggered.\n   * @example\n   * const synth = new Tone.Synth().toDestination();\n   * // trigger the note a half second from now at half velocity\n   * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n   */\n\n\n  triggerAttack(note, time, velocity = 1) {\n    this.log(\"triggerAttack\", note, time, velocity);\n    const seconds = this.toSeconds(time);\n\n    this._triggerEnvelopeAttack(seconds, velocity);\n\n    this.setNote(note, seconds);\n    return this;\n  }\n  /**\n   * Trigger the release portion of the envelope\n   * @param  time If no time is given, the release happens immediatly\n   * @example\n   * const synth = new Tone.Synth().toDestination();\n   * synth.triggerAttack(\"C4\");\n   * // trigger the release a second from now\n   * synth.triggerRelease(\"+1\");\n   */\n\n\n  triggerRelease(time) {\n    this.log(\"triggerRelease\", time);\n    const seconds = this.toSeconds(time);\n\n    this._triggerEnvelopeRelease(seconds);\n\n    return this;\n  }\n  /**\n   * Set the note at the given time. If no time is given, the note\n   * will set immediately.\n   * @param note The note to change to.\n   * @param  time The time when the note should be set.\n   * @example\n   * const synth = new Tone.Synth().toDestination();\n   * synth.triggerAttack(\"C4\");\n   * // change to F#6 in one quarter note from now.\n   * synth.setNote(\"F#6\", \"+4n\");\n   */\n\n\n  setNote(note, time) {\n    const computedTime = this.toSeconds(time);\n    const computedFrequency = note instanceof FrequencyClass ? note.toFrequency() : note;\n\n    if (this.portamento > 0 && this.getLevelAtTime(computedTime) > 0.05) {\n      const portTime = this.toSeconds(this.portamento);\n      this.frequency.exponentialRampTo(computedFrequency, portTime, computedTime);\n    } else {\n      this.frequency.setValueAtTime(computedFrequency, computedTime);\n    }\n\n    return this;\n  }\n\n}\n\n__decorate([timeRange(0)], Monophonic.prototype, \"portamento\", void 0);","import { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Envelope } from \"./Envelope\";\n/**\n * AmplitudeEnvelope is a Tone.Envelope connected to a gain node.\n * Unlike Tone.Envelope, which outputs the envelope's value, AmplitudeEnvelope accepts\n * an audio signal as the input and will apply the envelope to the amplitude\n * of the signal.\n * Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).\n *\n * @example\n * const ampEnv = new Tone.AmplitudeEnvelope({\n * \tattack: 0.1,\n * \tdecay: 0.2,\n * \tsustain: 1.0,\n * \trelease: 0.8\n * }).toDestination();\n * // create an oscillator and connect it\n * const osc = new Tone.Oscillator().connect(ampEnv).start();\n * // trigger the envelopes attack and release \"8t\" apart\n * ampEnv.triggerAttackRelease(\"8t\");\n * @category Component\n */\n\nexport class AmplitudeEnvelope extends Envelope {\n  constructor() {\n    super(optionsFromArguments(AmplitudeEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n    this.name = \"AmplitudeEnvelope\";\n    this._gainNode = new Gain({\n      context: this.context,\n      gain: 0\n    });\n    this.output = this._gainNode;\n    this.input = this._gainNode;\n\n    this._sig.connect(this._gainNode.gain);\n\n    this.output = this._gainNode;\n    this.input = this._gainNode;\n  }\n  /**\n   * Clean up\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._gainNode.dispose();\n\n    return this;\n  }\n\n}","import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { Source } from \"../source/Source\";\nimport { Monophonic } from \"./Monophonic\";\n/**\n * Synth is composed simply of a {@link OmniOscillator} routed through an {@link AmplitudeEnvelope}.\n * ```\n * +----------------+   +-------------------+\n * | OmniOscillator +>--> AmplitudeEnvelope +>--> Output\n * +----------------+   +-------------------+\n * ```\n * @example\n * const synth = new Tone.Synth().toDestination();\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Instrument\n */\n\nexport class Synth extends Monophonic {\n  constructor() {\n    super(optionsFromArguments(Synth.getDefaults(), arguments));\n    this.name = \"Synth\";\n    const options = optionsFromArguments(Synth.getDefaults(), arguments);\n    this.oscillator = new OmniOscillator(Object.assign({\n      context: this.context,\n      detune: options.detune,\n      onstop: () => this.onsilence(this)\n    }, options.oscillator));\n    this.frequency = this.oscillator.frequency;\n    this.detune = this.oscillator.detune;\n    this.envelope = new AmplitudeEnvelope(Object.assign({\n      context: this.context\n    }, options.envelope)); // connect the oscillators to the output\n\n    this.oscillator.chain(this.envelope, this.output);\n    readOnly(this, [\"oscillator\", \"frequency\", \"detune\", \"envelope\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(Monophonic.getDefaults(), {\n      envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        attack: 0.005,\n        decay: 0.1,\n        release: 1,\n        sustain: 0.3\n      }),\n      oscillator: Object.assign(omitFromObject(OmniOscillator.getDefaults(), [...Object.keys(Source.getDefaults()), \"frequency\", \"detune\"]), {\n        type: \"triangle\"\n      })\n    });\n  }\n  /**\n   * start the attack portion of the envelope\n   * @param time the time the attack should start\n   * @param velocity the velocity of the note (0-1)\n   */\n\n\n  _triggerEnvelopeAttack(time, velocity) {\n    // the envelopes\n    this.envelope.triggerAttack(time, velocity);\n    this.oscillator.start(time); // if there is no release portion, stop the oscillator\n\n    if (this.envelope.sustain === 0) {\n      const computedAttack = this.toSeconds(this.envelope.attack);\n      const computedDecay = this.toSeconds(this.envelope.decay);\n      this.oscillator.stop(time + computedAttack + computedDecay);\n    }\n  }\n  /**\n   * start the release portion of the envelope\n   * @param time the time the release should start\n   */\n\n\n  _triggerEnvelopeRelease(time) {\n    this.envelope.triggerRelease(time);\n    this.oscillator.stop(time + this.toSeconds(this.envelope.release));\n  }\n\n  getLevelAtTime(time) {\n    time = this.toSeconds(time);\n    return this.envelope.getValueAtTime(time);\n  }\n  /**\n   * clean up\n   */\n\n\n  dispose() {\n    super.dispose();\n    this.oscillator.dispose();\n    this.envelope.dispose();\n    return this;\n  }\n\n}","import { __decorate } from \"tslib\";\nimport { FrequencyClass } from \"../core/type/Frequency\";\nimport { deepMerge, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Monophonic } from \"./Monophonic\";\nimport { Synth } from \"./Synth\";\nimport { range, timeRange } from \"../core/util/Decorator\";\n/**\n * MembraneSynth makes kick and tom sounds using a single oscillator\n * with an amplitude envelope and frequency ramp. A Tone.OmniOscillator\n * is routed through a Tone.AmplitudeEnvelope to the output. The drum\n * quality of the sound comes from the frequency envelope applied\n * during MembraneSynth.triggerAttack(note). The frequency envelope\n * starts at <code>note * .octaves</code> and ramps to <code>note</code>\n * over the duration of <code>.pitchDecay</code>.\n * @example\n * const synth = new Tone.MembraneSynth().toDestination();\n * synth.triggerAttackRelease(\"C2\", \"8n\");\n * @category Instrument\n */\n\nexport class MembraneSynth extends Synth {\n  constructor() {\n    super(optionsFromArguments(MembraneSynth.getDefaults(), arguments));\n    this.name = \"MembraneSynth\";\n    /**\n     * Portamento is ignored in this synth. use pitch decay instead.\n     */\n\n    this.portamento = 0;\n    const options = optionsFromArguments(MembraneSynth.getDefaults(), arguments);\n    this.pitchDecay = options.pitchDecay;\n    this.octaves = options.octaves;\n    readOnly(this, [\"oscillator\", \"envelope\"]);\n  }\n\n  static getDefaults() {\n    return deepMerge(Monophonic.getDefaults(), Synth.getDefaults(), {\n      envelope: {\n        attack: 0.001,\n        attackCurve: \"exponential\",\n        decay: 0.4,\n        release: 1.4,\n        sustain: 0.01\n      },\n      octaves: 10,\n      oscillator: {\n        type: \"sine\"\n      },\n      pitchDecay: 0.05\n    });\n  }\n\n  setNote(note, time) {\n    const seconds = this.toSeconds(time);\n    const hertz = this.toFrequency(note instanceof FrequencyClass ? note.toFrequency() : note);\n    const maxNote = hertz * this.octaves;\n    this.oscillator.frequency.setValueAtTime(maxNote, seconds);\n    this.oscillator.frequency.exponentialRampToValueAtTime(hertz, seconds + this.toSeconds(this.pitchDecay));\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n    return this;\n  }\n\n}\n\n__decorate([range(0)], MembraneSynth.prototype, \"octaves\", void 0);\n\n__decorate([timeRange(0)], MembraneSynth.prototype, \"pitchDecay\", void 0);","const workletContext = new Set();\n/**\n * Add a class to the AudioWorkletGlobalScope\n */\n\nexport function addToWorklet(classOrFunction) {\n  workletContext.add(classOrFunctionToString(classOrFunction));\n}\n/**\n * Converts a class or a function to a string so it can be used in the worklet context\n */\n\nfunction classOrFunctionToString(classOrFunction) {\n  const regexp = new RegExp(/class.*extends.*\\{/m);\n  const matches = classOrFunction.toString().match(regexp);\n\n  if (matches) {\n    // if it extends another class, get that class name\n    return classOrFunction.toString().replace(matches[0], `class ${classOrFunction.name} extends ${Object.getPrototypeOf(classOrFunction).name} {`);\n  } else {\n    // otherwise just return the class as a string\n    return classOrFunction.toString();\n  }\n}\n/**\n * Register a processor in the AudioWorkletGlobalScope with the given name\n */\n\n\nexport function registerProcessor(name, classDesc) {\n  const processor =\n  /* javascript */\n  `registerProcessor(\"${name}\", ${classOrFunctionToString(classDesc)})`;\n  workletContext.add(processor);\n}\n/**\n * Get all of the modules which have been registered to the AudioWorkletGlobalScope\n */\n\nexport function getWorkletGlobalScope() {\n  return Array.from(workletContext).join(\"\\n\");\n}","import { AudioWorkletProcessor } from \"./AudioWorkletProcessor.worklet\";\nimport { addToWorklet } from \"./WorkletGlobalScope\";\n/**\n * The base AudioWorkletProcessor for use in Tone.js. Works with the [[ToneAudioWorklet]].\n */\n\nexport class ToneAudioWorkletProcessor extends AudioWorkletProcessor {\n  constructor(options) {\n    super(options);\n    /**\n     * If the processor was disposed or not. Keep alive until it's disposed.\n     */\n\n    this.disposed = false;\n    /**\n     * The number of samples in the processing block\n     */\n\n    this.blockSize = 128;\n    /**\n     * the sample rate\n     */\n    // @ts-ignore\n\n    this.sampleRate = sampleRate;\n\n    this.port.onmessage = event => {\n      // when it receives a dispose \n      if (event.data === \"dispose\") {\n        this.disposed = true;\n      }\n    };\n  }\n\n}\naddToWorklet(ToneAudioWorkletProcessor);","/**\n * This is just an interface for the AudioWorkletProcessor\n */\nexport class AudioWorkletProcessor {\n  constructor(_options) {\n    this.parameterDescriptors = [];\n    this.port = new MessagePort();\n  }\n\n  process(_inputs, _outputs, _parameters) {\n    return false;\n  }\n\n}","import { ToneAudioWorkletProcessor } from \"./ToneAudioWorkletProcessor.worklet\";\nimport { addToWorklet } from \"./WorkletGlobalScope\";\nexport class SingleIOProcessor extends ToneAudioWorkletProcessor {\n  constructor(options) {\n    super(Object.assign(options, {\n      numberOfInputs: 1,\n      numberOfOutputs: 1\n    }));\n    /**\n     * Holds the name of the parameter and a single value of that\n     * parameter at the current sample\n     */\n\n    this.params = {};\n  }\n  /**\n   * Update the private `params` object with the\n   * values of the parameters at the given index\n   */\n\n\n  updateParams(parameters, index) {\n    for (const paramName in parameters) {\n      const param = parameters[paramName];\n\n      if (param.length > 1) {\n        this.params[paramName] = parameters[paramName][index];\n      } else {\n        this.params[paramName] = parameters[paramName][0];\n      }\n    }\n  }\n  /**\n   * Process a single frame of the audio\n   */\n\n\n  process(inputs, outputs, parameters) {\n    const input = inputs[0];\n    const output = outputs[0]; // get the parameter values\n\n    const channelCount = Math.max((input === null || input === void 0 ? void 0 : input.length) || 0, output.length);\n\n    for (let sample = 0; sample < this.blockSize; sample++) {\n      this.updateParams(parameters, sample);\n\n      for (let channel = 0; channel < channelCount; channel++) {\n        const inputSample = (input === null || input === void 0 ? void 0 : input.length) ? input[channel][sample] : 0;\n        output[channel][sample] = this.generate(inputSample, channel, this.params);\n      }\n    }\n\n    return !this.disposed;\n  }\n\n}\n;\naddToWorklet(SingleIOProcessor);","import { addToWorklet } from \"./WorkletGlobalScope\";\n/**\n * A multichannel buffer for use within an AudioWorkletProcessor as a delay line\n */\n\nexport class DelayLine {\n  constructor(size, channels) {\n    this.buffer = [];\n    this.writeHead = [];\n    this.size = size; // create the empty channels\n\n    for (let i = 0; i < channels; i++) {\n      this.buffer[i] = new Float32Array(this.size);\n      this.writeHead[i] = 0;\n    }\n  }\n  /**\n   * Push a value onto the end\n   */\n\n\n  push(channel, value) {\n    this.writeHead[channel] += 1;\n\n    if (this.writeHead[channel] > this.size) {\n      this.writeHead[channel] = 0;\n    }\n\n    this.buffer[channel][this.writeHead[channel]] = value;\n  }\n  /**\n   * Get the recorded value of the channel given the delay\n   */\n\n\n  get(channel, delay) {\n    let readHead = this.writeHead[channel] - Math.floor(delay);\n\n    if (readHead < 0) {\n      readHead += this.size;\n    }\n\n    return this.buffer[channel][readHead];\n  }\n\n}\naddToWorklet(DelayLine);","import { SingleIOProcessor } from \"../../core/worklet/SingleIOProcessor.worklet\";\nimport \"../../core/worklet/DelayLine.worklet\";\nimport { registerProcessor } from \"../../core/worklet/WorkletGlobalScope\";\nexport const workletName = \"feedback-comb-filter\";\nexport class FeedbackCombFilterWorklet extends SingleIOProcessor {\n  constructor(options) {\n    super(options); // @ts-ignore\n\n    this.delayLine = new DelayLine(this.sampleRate, options.channelCount || 2);\n  }\n\n  static get parameterDescriptors() {\n    return [{\n      name: \"delayTime\",\n      defaultValue: 0.1,\n      minValue: 0,\n      maxValue: 1\n    }, {\n      name: \"feedback\",\n      defaultValue: 0.5,\n      minValue: 0,\n      maxValue: 0.9999\n    }];\n  }\n\n  generate(input, channel, parameters) {\n    const delayedSample = this.delayLine.get(channel, parameters.delayTime * this.sampleRate);\n    this.delayLine.push(channel, input + delayedSample * parameters.feedback); // console.log(channel);\n\n    return delayedSample;\n  }\n\n}\nregisterProcessor(workletName, FeedbackCombFilterWorklet);","import { __decorate } from \"tslib\";\nimport { ToneAudioBuffers } from \"../core/context/ToneAudioBuffers\";\nimport { intervalToFrequencyRatio } from \"../core/type/Conversions\";\nimport { FrequencyClass } from \"../core/type/Frequency\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { isArray, isNote, isNumber } from \"../core/util/TypeCheck\";\nimport { Instrument } from \"../instrument/Instrument\";\nimport { ToneBufferSource } from \"../source/buffer/ToneBufferSource\";\nimport { timeRange } from \"../core/util/Decorator\";\nimport { assert } from \"../core/util/Debug\";\n/**\n * Pass in an object which maps the note's pitch or midi value to the url,\n * then you can trigger the attack and release of that note like other instruments.\n * By automatically repitching the samples, it is possible to play pitches which\n * were not explicitly included which can save loading time.\n *\n * For sample or buffer playback where repitching is not necessary,\n * use [[Player]].\n * @example\n * const sampler = new Tone.Sampler({\n * \turls: {\n * \t\tC1: \"C1.mp3\",\n * \t\tC2: \"C2.mp3\",\n * \t},\n * \tbaseUrl: \"https://tonejs.github.io/examples/audio/casio/\",\n * \tonload: () => {\n * \t\tsampler.triggerAttackRelease([\"C1\", \"E1\", \"G1\", \"B1\"], 0.5);\n * \t},\n * });\n * @category Instrument\n */\n\nexport class Sampler extends Instrument {\n  constructor() {\n    super(optionsFromArguments(Sampler.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\"));\n    this.name = \"Sampler\";\n    /**\n     * The object of all currently playing BufferSources\n     */\n\n    this._activeSources = new Map();\n    const options = optionsFromArguments(Sampler.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\");\n    const urlMap = {};\n    Object.keys(options.urls).forEach(note => {\n      const noteNumber = parseInt(note, 10);\n      assert(isNote(note) || isNumber(noteNumber) && isFinite(noteNumber), `url key is neither a note or midi pitch: ${note}`);\n\n      if (isNote(note)) {\n        // convert the note name to MIDI\n        const mid = new FrequencyClass(this.context, note).toMidi();\n        urlMap[mid] = options.urls[note];\n      } else if (isNumber(noteNumber) && isFinite(noteNumber)) {\n        // otherwise if it's numbers assume it's midi\n        urlMap[noteNumber] = options.urls[noteNumber];\n      }\n    });\n    this._buffers = new ToneAudioBuffers({\n      urls: urlMap,\n      onload: options.onload,\n      baseUrl: options.baseUrl,\n      onerror: options.onerror\n    });\n    this.attack = options.attack;\n    this.release = options.release;\n    this.curve = options.curve; // invoke the callback if it's already loaded\n\n    if (this._buffers.loaded) {\n      // invoke onload deferred\n      Promise.resolve().then(options.onload);\n    }\n  }\n\n  static getDefaults() {\n    return Object.assign(Instrument.getDefaults(), {\n      attack: 0,\n      baseUrl: \"\",\n      curve: \"exponential\",\n      onload: noOp,\n      onerror: noOp,\n      release: 0.1,\n      urls: {}\n    });\n  }\n  /**\n   * Returns the difference in steps between the given midi note at the closets sample.\n   */\n\n\n  _findClosest(midi) {\n    // searches within 8 octaves of the given midi note\n    const MAX_INTERVAL = 96;\n    let interval = 0;\n\n    while (interval < MAX_INTERVAL) {\n      // check above and below\n      if (this._buffers.has(midi + interval)) {\n        return -interval;\n      } else if (this._buffers.has(midi - interval)) {\n        return interval;\n      }\n\n      interval++;\n    }\n\n    throw new Error(`No available buffers for note: ${midi}`);\n  }\n  /**\n   * @param  notes\tThe note to play, or an array of notes.\n   * @param  time     When to play the note\n   * @param  velocity The velocity to play the sample back.\n   */\n\n\n  triggerAttack(notes, time, velocity = 1) {\n    this.log(\"triggerAttack\", notes, time, velocity);\n\n    if (!Array.isArray(notes)) {\n      notes = [notes];\n    }\n\n    notes.forEach(note => {\n      const midi = new FrequencyClass(this.context, note).toMidi(); // find the closest note pitch\n\n      const difference = this._findClosest(midi);\n\n      const closestNote = midi - difference;\n\n      const buffer = this._buffers.get(closestNote);\n\n      const playbackRate = intervalToFrequencyRatio(difference); // play that note\n\n      const source = new ToneBufferSource({\n        url: buffer,\n        context: this.context,\n        curve: this.curve,\n        fadeIn: this.attack,\n        fadeOut: this.release,\n        playbackRate\n      }).connect(this.output);\n      source.start(time, 0, buffer.duration / playbackRate, velocity); // add it to the active sources\n\n      if (!isArray(this._activeSources.get(midi))) {\n        this._activeSources.set(midi, []);\n      }\n\n      this._activeSources.get(midi).push(source); // remove it when it's done\n\n\n      source.onended = () => {\n        if (this._activeSources && this._activeSources.has(midi)) {\n          const sources = this._activeSources.get(midi);\n\n          const index = sources.indexOf(source);\n\n          if (index !== -1) {\n            sources.splice(index, 1);\n          }\n        }\n      };\n    });\n    return this;\n  }\n  /**\n   * @param  notes\tThe note to release, or an array of notes.\n   * @param  time     \tWhen to release the note.\n   */\n\n\n  triggerRelease(notes, time) {\n    this.log(\"triggerRelease\", notes, time);\n\n    if (!Array.isArray(notes)) {\n      notes = [notes];\n    }\n\n    notes.forEach(note => {\n      const midi = new FrequencyClass(this.context, note).toMidi(); // find the note\n\n      if (this._activeSources.has(midi) && this._activeSources.get(midi).length) {\n        const sources = this._activeSources.get(midi);\n\n        time = this.toSeconds(time);\n        sources.forEach(source => {\n          source.stop(time);\n        });\n\n        this._activeSources.set(midi, []);\n      }\n    });\n    return this;\n  }\n  /**\n   * Release all currently active notes.\n   * @param  time     \tWhen to release the notes.\n   */\n\n\n  releaseAll(time) {\n    const computedTime = this.toSeconds(time);\n\n    this._activeSources.forEach(sources => {\n      while (sources.length) {\n        const source = sources.shift();\n        source.stop(computedTime);\n      }\n    });\n\n    return this;\n  }\n\n  sync() {\n    this._syncMethod(\"triggerAttack\", 1);\n\n    this._syncMethod(\"triggerRelease\", 1);\n\n    return this;\n  }\n  /**\n   * Invoke the attack phase, then after the duration, invoke the release.\n   * @param  notes\tThe note to play and release, or an array of notes.\n   * @param  duration The time the note should be held\n   * @param  time     When to start the attack\n   * @param  velocity The velocity of the attack\n   */\n\n\n  triggerAttackRelease(notes, duration, time, velocity = 1) {\n    const computedTime = this.toSeconds(time);\n    this.triggerAttack(notes, computedTime, velocity);\n\n    if (isArray(duration)) {\n      assert(isArray(notes), \"notes must be an array when duration is array\");\n      notes.forEach((note, index) => {\n        const d = duration[Math.min(index, duration.length - 1)];\n        this.triggerRelease(note, computedTime + this.toSeconds(d));\n      });\n    } else {\n      this.triggerRelease(notes, computedTime + this.toSeconds(duration));\n    }\n\n    return this;\n  }\n  /**\n   * Add a note to the sampler.\n   * @param  note      The buffer's pitch.\n   * @param  url  Either the url of the buffer, or a buffer which will be added with the given name.\n   * @param  callback  The callback to invoke when the url is loaded.\n   */\n\n\n  add(note, url, callback) {\n    assert(isNote(note) || isFinite(note), `note must be a pitch or midi: ${note}`);\n\n    if (isNote(note)) {\n      // convert the note name to MIDI\n      const mid = new FrequencyClass(this.context, note).toMidi();\n\n      this._buffers.add(mid, url, callback);\n    } else {\n      // otherwise if it's numbers assume it's midi\n      this._buffers.add(note, url, callback);\n    }\n\n    return this;\n  }\n  /**\n   * If the buffers are loaded or not\n   */\n\n\n  get loaded() {\n    return this._buffers.loaded;\n  }\n  /**\n   * Clean up\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._buffers.dispose();\n\n    this._activeSources.forEach(sources => {\n      sources.forEach(source => source.dispose());\n    });\n\n    this._activeSources.clear();\n\n    return this;\n  }\n\n}\n\n__decorate([timeRange(0)], Sampler.prototype, \"attack\", void 0);\n\n__decorate([timeRange(0)], Sampler.prototype, \"release\", void 0);","import { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * Panner is an equal power Left/Right Panner. It is a wrapper around the StereoPannerNode.\n * @offline 0.5 2\n * @example\n * // move the input signal from right to left\n * const panner = new Tone.Panner(1).toDestination();\n * panner.pan.rampTo(-1, 0.5);\n * const osc = new Tone.Oscillator(100).connect(panner).start();\n * @category Component\n */\n\nexport class Panner extends ToneAudioNode {\n  constructor() {\n    super(Object.assign(optionsFromArguments(Panner.getDefaults(), arguments, [\"pan\"])));\n    this.name = \"Panner\";\n    /**\n     * the panner node\n     */\n\n    this._panner = this.context.createStereoPanner();\n    this.input = this._panner;\n    this.output = this._panner;\n    const options = optionsFromArguments(Panner.getDefaults(), arguments, [\"pan\"]);\n    this.pan = new Param({\n      context: this.context,\n      param: this._panner.pan,\n      value: options.pan,\n      minValue: -1,\n      maxValue: 1\n    }); // this is necessary for standardized-audio-context\n    // doesn't make any difference for the native AudioContext\n    // https://github.com/chrisguttandin/standardized-audio-context/issues/647\n\n    this._panner.channelCount = options.channelCount;\n    this._panner.channelCountMode = \"explicit\"; // initial value\n\n    readOnly(this, \"pan\");\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      pan: 0,\n      channelCount: 1\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._panner.disconnect();\n\n    this.pan.dispose();\n    return this;\n  }\n\n}","import { SingleIOProcessor } from \"../core/worklet/SingleIOProcessor.worklet\";\nimport { registerProcessor } from \"../core/worklet/WorkletGlobalScope\";\nexport const workletName = \"bit-crusher\";\nexport default class BitCrusherWorklet extends SingleIOProcessor {\n  static get parameterDescriptors() {\n    return [{\n      name: \"bits\",\n      defaultValue: 12,\n      minValue: 1,\n      maxValue: 16\n    }];\n  }\n\n  generate(input, _channel, parameters) {\n    const step = Math.pow(0.5, parameters.bits - 1);\n    const val = step * Math.floor(input / step + 0.5);\n    return val;\n  }\n\n}\nregisterProcessor(workletName, BitCrusherWorklet);","import { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * Solo lets you isolate a specific audio stream. When an instance is set to `solo=true`,\n * it will mute all other instances of Solo.\n * @example\n * const soloA = new Tone.Solo().toDestination();\n * const oscA = new Tone.Oscillator(\"C4\", \"sawtooth\").connect(soloA);\n * const soloB = new Tone.Solo().toDestination();\n * const oscB = new Tone.Oscillator(\"E4\", \"square\").connect(soloB);\n * soloA.solo = true;\n * // no audio will pass through soloB\n * @category Component\n */\n\nexport class Solo extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Solo.getDefaults(), arguments, [\"solo\"]));\n    this.name = \"Solo\";\n    const options = optionsFromArguments(Solo.getDefaults(), arguments, [\"solo\"]);\n    this.input = this.output = new Gain({\n      context: this.context\n    });\n\n    if (!Solo._allSolos.has(this.context)) {\n      Solo._allSolos.set(this.context, new Set());\n    }\n\n    Solo._allSolos.get(this.context).add(this); // set initially\n\n\n    this.solo = options.solo;\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      solo: false\n    });\n  }\n  /**\n   * Isolates this instance and mutes all other instances of Solo.\n   * Only one instance can be soloed at a time. A soloed\n   * instance will report `solo=false` when another instance is soloed.\n   */\n\n\n  get solo() {\n    return this._isSoloed();\n  }\n\n  set solo(solo) {\n    if (solo) {\n      this._addSolo();\n    } else {\n      this._removeSolo();\n    }\n\n    Solo._allSolos.get(this.context).forEach(instance => instance._updateSolo());\n  }\n  /**\n   * If the current instance is muted, i.e. another instance is soloed\n   */\n\n\n  get muted() {\n    return this.input.gain.value === 0;\n  }\n  /**\n   * Add this to the soloed array\n   */\n\n\n  _addSolo() {\n    if (!Solo._soloed.has(this.context)) {\n      Solo._soloed.set(this.context, new Set());\n    }\n\n    Solo._soloed.get(this.context).add(this);\n  }\n  /**\n   * Remove this from the soloed array\n   */\n\n\n  _removeSolo() {\n    if (Solo._soloed.has(this.context)) {\n      Solo._soloed.get(this.context).delete(this);\n    }\n  }\n  /**\n   * Is this on the soloed array\n   */\n\n\n  _isSoloed() {\n    return Solo._soloed.has(this.context) && Solo._soloed.get(this.context).has(this);\n  }\n  /**\n   * Returns true if no one is soloed\n   */\n\n\n  _noSolos() {\n    // either does not have any soloed added\n    return !Solo._soloed.has(this.context) || // or has a solo set but doesn't include any items\n    Solo._soloed.has(this.context) && Solo._soloed.get(this.context).size === 0;\n  }\n  /**\n   * Solo the current instance and unsolo all other instances.\n   */\n\n\n  _updateSolo() {\n    if (this._isSoloed()) {\n      this.input.gain.value = 1;\n    } else if (this._noSolos()) {\n      // no one is soloed\n      this.input.gain.value = 1;\n    } else {\n      this.input.gain.value = 0;\n    }\n  }\n\n  dispose() {\n    super.dispose();\n\n    Solo._allSolos.get(this.context).delete(this);\n\n    this._removeSolo();\n\n    return this;\n  }\n\n}\n/**\n * Hold all of the solo'ed tracks belonging to a specific context\n */\n\nSolo._allSolos = new Map();\n/**\n * Hold the currently solo'ed instance(s)\n */\n\nSolo._soloed = new Map();","import { readOnly } from \"../../core/util/Interface\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Panner } from \"./Panner\";\nimport { Volume } from \"./Volume\";\n/**\n * PanVol is a Tone.Panner and Tone.Volume in one.\n * @example\n * // pan the incoming signal left and drop the volume\n * const panVol = new Tone.PanVol(-0.25, -12).toDestination();\n * const osc = new Tone.Oscillator().connect(panVol).start();\n * @category Component\n */\n\nexport class PanVol extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(PanVol.getDefaults(), arguments, [\"pan\", \"volume\"]));\n    this.name = \"PanVol\";\n    const options = optionsFromArguments(PanVol.getDefaults(), arguments, [\"pan\", \"volume\"]);\n    this._panner = this.input = new Panner({\n      context: this.context,\n      pan: options.pan,\n      channelCount: options.channelCount\n    });\n    this.pan = this._panner.pan;\n    this._volume = this.output = new Volume({\n      context: this.context,\n      volume: options.volume\n    });\n    this.volume = this._volume.volume; // connections\n\n    this._panner.connect(this._volume);\n\n    this.mute = options.mute;\n    readOnly(this, [\"pan\", \"volume\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      mute: false,\n      pan: 0,\n      volume: 0,\n      channelCount: 1\n    });\n  }\n  /**\n   * Mute/unmute the volume\n   */\n\n\n  get mute() {\n    return this._volume.mute;\n  }\n\n  set mute(mute) {\n    this._volume.mute = mute;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._panner.dispose();\n\n    this.pan.dispose();\n\n    this._volume.dispose();\n\n    this.volume.dispose();\n    return this;\n  }\n\n}","import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Solo } from \"./Solo\";\nimport { PanVol } from \"./PanVol\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Gain } from \"../../core/context/Gain\";\n/**\n * Channel provides a channel strip interface with volume, pan, solo and mute controls.\n * See [[PanVol]] and [[Solo]]\n * @example\n * // pan the incoming signal left and drop the volume 12db\n * const channel = new Tone.Channel(-0.25, -12);\n * @category Component\n */\n\nexport class Channel extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Channel.getDefaults(), arguments, [\"volume\", \"pan\"]));\n    this.name = \"Channel\";\n    const options = optionsFromArguments(Channel.getDefaults(), arguments, [\"volume\", \"pan\"]);\n    this._solo = this.input = new Solo({\n      solo: options.solo,\n      context: this.context\n    });\n    this._panVol = this.output = new PanVol({\n      context: this.context,\n      pan: options.pan,\n      volume: options.volume,\n      mute: options.mute\n    });\n    this.pan = this._panVol.pan;\n    this.volume = this._panVol.volume;\n\n    this._solo.connect(this._panVol);\n\n    readOnly(this, [\"pan\", \"volume\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      pan: 0,\n      volume: 0,\n      mute: false,\n      solo: false\n    });\n  }\n  /**\n   * Solo/unsolo the channel. Soloing is only relative to other [[Channels]] and [[Solo]] instances\n   */\n\n\n  get solo() {\n    return this._solo.solo;\n  }\n\n  set solo(solo) {\n    this._solo.solo = solo;\n  }\n  /**\n   * If the current instance is muted, i.e. another instance is soloed,\n   * or the channel is muted\n   */\n\n\n  get muted() {\n    return this._solo.muted || this.mute;\n  }\n  /**\n   * Mute/unmute the volume\n   */\n\n\n  get mute() {\n    return this._panVol.mute;\n  }\n\n  set mute(mute) {\n    this._panVol.mute = mute;\n  }\n  /**\n   * Get the gain node belonging to the bus name. Create it if\n   * it doesn't exist\n   * @param name The bus name\n   */\n\n\n  _getBus(name) {\n    if (!Channel.buses.has(name)) {\n      Channel.buses.set(name, new Gain({\n        context: this.context\n      }));\n    }\n\n    return Channel.buses.get(name);\n  }\n  /**\n   * Send audio to another channel using a string. `send` is a lot like\n   * [[connect]], except it uses a string instead of an object. This can\n   * be useful in large applications to decouple sections since [[send]]\n   * and [[receive]] can be invoked separately in order to connect an object\n   * @param name The channel name to send the audio\n   * @param volume The amount of the signal to send.\n   * \tDefaults to 0db, i.e. send the entire signal\n   * @returns Returns the gain node of this connection.\n   */\n\n\n  send(name, volume = 0) {\n    const bus = this._getBus(name);\n\n    const sendKnob = new Gain({\n      context: this.context,\n      units: \"decibels\",\n      gain: volume\n    });\n    this.connect(sendKnob);\n    sendKnob.connect(bus);\n    return sendKnob;\n  }\n  /**\n   * Receive audio from a channel which was connected with [[send]].\n   * @param name The channel name to receive audio from.\n   */\n\n\n  receive(name) {\n    const bus = this._getBus(name);\n\n    bus.connect(this);\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._panVol.dispose();\n\n    this.pan.dispose();\n    this.volume.dispose();\n\n    this._solo.dispose();\n\n    return this;\n  }\n\n}\n/**\n * Store the send/receive channels by name.\n */\n\nChannel.buses = new Map();","import { ToneAudioNode } from \"./ToneAudioNode\";\nimport { Param } from \"./Param\";\nimport { onContextClose, onContextInit } from \"./ContextInitialization\";\n/**\n * Tone.Listener is a thin wrapper around the AudioListener. Listener combined\n * with [[Panner3D]] makes up the Web Audio API's 3D panning system. Panner3D allows you\n * to place sounds in 3D and Listener allows you to navigate the 3D sound environment from\n * a first-person perspective. There is only one listener per audio context.\n */\n\nexport class Listener extends ToneAudioNode {\n  constructor() {\n    super(...arguments);\n    this.name = \"Listener\";\n    this.positionX = new Param({\n      context: this.context,\n      param: this.context.rawContext.listener.positionX\n    });\n    this.positionY = new Param({\n      context: this.context,\n      param: this.context.rawContext.listener.positionY\n    });\n    this.positionZ = new Param({\n      context: this.context,\n      param: this.context.rawContext.listener.positionZ\n    });\n    this.forwardX = new Param({\n      context: this.context,\n      param: this.context.rawContext.listener.forwardX\n    });\n    this.forwardY = new Param({\n      context: this.context,\n      param: this.context.rawContext.listener.forwardY\n    });\n    this.forwardZ = new Param({\n      context: this.context,\n      param: this.context.rawContext.listener.forwardZ\n    });\n    this.upX = new Param({\n      context: this.context,\n      param: this.context.rawContext.listener.upX\n    });\n    this.upY = new Param({\n      context: this.context,\n      param: this.context.rawContext.listener.upY\n    });\n    this.upZ = new Param({\n      context: this.context,\n      param: this.context.rawContext.listener.upZ\n    });\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      positionX: 0,\n      positionY: 0,\n      positionZ: 0,\n      forwardX: 0,\n      forwardY: 0,\n      forwardZ: -1,\n      upX: 0,\n      upY: 1,\n      upZ: 0\n    });\n  }\n\n  dispose() {\n    super.dispose();\n    this.positionX.dispose();\n    this.positionY.dispose();\n    this.positionZ.dispose();\n    this.forwardX.dispose();\n    this.forwardY.dispose();\n    this.forwardZ.dispose();\n    this.upX.dispose();\n    this.upY.dispose();\n    this.upZ.dispose();\n    return this;\n  }\n\n} //-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\n\nonContextInit(context => {\n  context.listener = new Listener({\n    context\n  });\n});\nonContextClose(context => {\n  context.listener.dispose();\n});","export { getContext, setContext } from \"./core/Global\";\nexport * from \"./classes\";\nexport * from \"./version\";\nimport { getContext } from \"./core/Global\";\nimport { ToneAudioBuffer } from \"./core/context/ToneAudioBuffer\";\nexport { start } from \"./core/Global\";\nexport { supported } from \"./core/context/AudioContext\";\n/**\n * The current audio context time of the global [[Context]].\n * See [[Context.now]]\n * @category Core\n */\n\nexport const now = getContext().now.bind(getContext());\n/**\n * The current audio context time of the global [[Context]] without the [[Context.lookAhead]]\n * See [[Context.immediate]]\n * @category Core\n */\n\nexport const immediate = getContext().immediate.bind(getContext());\n/**\n * The Transport object belonging to the global Tone.js Context.\n * See [[Transport]]\n * @category Core\n */\n\nexport const Transport = getContext().transport;\n/**\n * The Destination (output) belonging to the global Tone.js Context.\n * See [[Destination]]\n * @category Core\n */\n\nexport const Destination = getContext().destination;\n/**\n * The [[Listener]] belonging to the global Tone.js Context.\n * @category Core\n */\n\nexport const Listener = getContext().listener;\n/**\n * Draw is used to synchronize the draw frame with the Transport's callbacks.\n * See [[Draw]]\n * @category Core\n */\n\nexport const Draw = getContext().draw;\n/**\n * A reference to the global context\n * See [[Context]]\n * @category Core\n */\n\nexport const context = getContext();\n/**\n * Promise which resolves when all of the loading promises are resolved.\n * Alias for static [[ToneAudioBuffer.loaded]] method.\n * @category Core\n */\n\nexport const loaded = ToneAudioBuffer.loaded.bind(ToneAudioBuffer); // this fills in name changes from 13.x to 14.x\n\nimport { ToneAudioBuffers } from \"./core/context/ToneAudioBuffers\";\nimport { ToneBufferSource } from \"./source/buffer/ToneBufferSource\";\nexport const Buffer = ToneAudioBuffer;\nexport const Buffers = ToneAudioBuffers;\nexport const BufferSource = ToneBufferSource;","import \"./styles/index.scss\";\nimport * as Tone from 'tone';\n// import Drums from './scripts/drumkit';\n\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const play = document.body.querySelector(\".play\");\n  const pause = document.getElementById(\"pause\");\n  \n  play.addEventListener(\"click\", Tone.Transport.start());\n  pause.addEventListener(\"click\", Tone.Transport.stop());\n\n  const info = document.getElementById(\"more-info\");\n  const modal = document.getElementById('modal');\n  const modalChild = document.getElementById('modal-child');\n  info.addEventListener('click', openModal);\n  modal.addEventListener('click', closeModal);\n\n  function openModal(e) {\n    e.preventDefault();\n    modal.style.display = \"block\";\n    modalChild.style.display = \"block\";\n  }\n\n  function closeModal(e) {\n    e.preventDefault();\n    modal.style.display = \"none\";\n    modalChild.style.display = \"none\";\n\n  }\n\n  const synths = [\n    new Tone.Synth(),\n    new Tone.Synth(),\n    new Tone.Synth(),\n    new Tone.Synth(),\n    new Tone.Synth()\n  ];\n\n  synths[0].oscillator.type = 'sine';\n  synths[1].oscillator.type = 'sine';\n  synths[2].oscillator.type = \"sine\";\n  synths[3].oscillator.type = \"sine\";\n  synths[4].oscillator.type = \"sine\";\n\n  const gain = new Tone.Gain(0.5);\n  gain.toDestination();\n  let notes = ['C4', 'D4', 'E4', 'F4', 'G4'];\n  synths.forEach(synth => synth.toDestination());\n\n  const $rows = document.body.querySelectorAll('.note'); //array of note divs\n  let index = 0;\n  Tone.Transport.scheduleRepeat(repeat, '4n');\n\n  function repeat(time) {\n    let step = index % 8;\n    for (let i = 0; i < $rows.length; i++){\n      let synth = synths[i];\n      let note = notes[i];\n      let $row = $rows[i];\n      let $input = $row.querySelector(`input:nth-child(${step + 1})`);\n      if ($input.checked) {\n        synth.triggerAttackRelease(note, '4n', time);\n      }\n    }\n  }\n\n\n  Tone.Transport.start();\n\n  // const synth = new Tone.Synth();\n  // synth.oscillator.type = \"sine\";\n  // const gain = new Tone.Gain(0.5);\n  // gain.toMaster();\n  // synth.connect(gain);\n  // // synth.toMaster();\n\n  // synth.triggerAttackRelease(\"C4\", \"8n\");\n\n  // const notes = [\"C4\", \"E4\", \"C5\", \"D5\", \"E5\", \"D4\"];\n  // let index = 0;\n  // Tone.Transport.scheduleRepeat(time => {\n  //   repeat(time);\n  //   //do something with the time\n  // }, \"8n\");\n\n  // const synth2 = new Tone.Synth();\n  // synth2.oscillator.type = \"sawtooth\";\n  // const gain2 = new Tone.Gain(0.5);\n  // gain2.toMaster();\n  // synth2.connect(gain2);\n  // // synth.toMaster();\n\n  // synth2.triggerAttackRelease(\"C3\", \"4n\");\n\n  // const notes2 = [\"C4\", \"E4\", \"C5\", \"D5\", \"E5\", \"D4\"];\n  // let index2 = 0;\n  // Tone.Transport.scheduleRepeat((time) => {\n  //   repeat(time);\n  //   //do something with the time\n  // }, \"8n\");\n\n  // function repeat(time) {\n  //   let note = notes[index % notes.length];\n  //   synth.triggerAttackRelease(note, '8n', time);\n  //   index++;\n  // }\n\n  // Tone.Transport.start();\n  // setTimeout(()=>{\n  //   Tone.Transport.stop();\n  // }, 5000);\n\n  // var synth3 = new Tone.PolySynth(6, Tone.Synth).toMaster();\n  // //set the attributes using the set interface\n  // synth3.set(\"detune\", -1200);\n  // //play a chord\n  // synth3.triggerAttackRelease([\"C4\", \"E4\", \"A4\"], \"4n\");\n});\n\n\n\n"],"sourceRoot":""}